// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Trimprefix
    {
        /// <summary>
        /// Removes the specified prefix from the start of the given string, if present.
        /// </summary>
        public static Task<TrimprefixResult> InvokeAsync(TrimprefixArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<TrimprefixResult>("std:index:trimprefix", args ?? new TrimprefixArgs(), options.WithDefaults());

        /// <summary>
        /// Removes the specified prefix from the start of the given string, if present.
        /// </summary>
        public static Output<TrimprefixResult> Invoke(TrimprefixInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<TrimprefixResult>("std:index:trimprefix", args ?? new TrimprefixInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Removes the specified prefix from the start of the given string, if present.
        /// </summary>
        public static Output<TrimprefixResult> Invoke(TrimprefixInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<TrimprefixResult>("std:index:trimprefix", args ?? new TrimprefixInvokeArgs(), options.WithDefaults());
    }


    public sealed class TrimprefixArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public string Input { get; set; } = null!;

        [Input("prefix", required: true)]
        public string Prefix { get; set; } = null!;

        public TrimprefixArgs()
        {
        }
        public static new TrimprefixArgs Empty => new TrimprefixArgs();
    }

    public sealed class TrimprefixInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public Input<string> Input { get; set; } = null!;

        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public TrimprefixInvokeArgs()
        {
        }
        public static new TrimprefixInvokeArgs Empty => new TrimprefixInvokeArgs();
    }


    [OutputType]
    public sealed class TrimprefixResult
    {
        public readonly string Result;

        [OutputConstructor]
        private TrimprefixResult(string result)
        {
            Result = result;
        }
    }
}
