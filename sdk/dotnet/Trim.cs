// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Trim
    {
        /// <summary>
        /// Removes the specified set of characters from the start and end of the given string.
        /// </summary>
        public static Task<TrimResult> InvokeAsync(TrimArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<TrimResult>("std:index:trim", args ?? new TrimArgs(), options.WithDefaults());

        /// <summary>
        /// Removes the specified set of characters from the start and end of the given string.
        /// </summary>
        public static Output<TrimResult> Invoke(TrimInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<TrimResult>("std:index:trim", args ?? new TrimInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Removes the specified set of characters from the start and end of the given string.
        /// </summary>
        public static Output<TrimResult> Invoke(TrimInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<TrimResult>("std:index:trim", args ?? new TrimInvokeArgs(), options.WithDefaults());
    }


    public sealed class TrimArgs : global::Pulumi.InvokeArgs
    {
        [Input("cutset", required: true)]
        public string Cutset { get; set; } = null!;

        [Input("input", required: true)]
        public string Input { get; set; } = null!;

        public TrimArgs()
        {
        }
        public static new TrimArgs Empty => new TrimArgs();
    }

    public sealed class TrimInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("cutset", required: true)]
        public Input<string> Cutset { get; set; } = null!;

        [Input("input", required: true)]
        public Input<string> Input { get; set; } = null!;

        public TrimInvokeArgs()
        {
        }
        public static new TrimInvokeArgs Empty => new TrimInvokeArgs();
    }


    [OutputType]
    public sealed class TrimResult
    {
        public readonly string Result;

        [OutputConstructor]
        private TrimResult(string result)
        {
            Result = result;
        }
    }
}
