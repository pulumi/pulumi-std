// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Signum
    {
        /// <summary>
        /// Returns the greatest integer value less than or equal to the argument.
        /// </summary>
        public static Task<SignumResult> InvokeAsync(SignumArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<SignumResult>("std:index:signum", args ?? new SignumArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the greatest integer value less than or equal to the argument.
        /// </summary>
        public static Output<SignumResult> Invoke(SignumInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<SignumResult>("std:index:signum", args ?? new SignumInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the greatest integer value less than or equal to the argument.
        /// </summary>
        public static Output<SignumResult> Invoke(SignumInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<SignumResult>("std:index:signum", args ?? new SignumInvokeArgs(), options.WithDefaults());
    }


    public sealed class SignumArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public double Input { get; set; }

        public SignumArgs()
        {
        }
        public static new SignumArgs Empty => new SignumArgs();
    }

    public sealed class SignumInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public Input<double> Input { get; set; } = null!;

        public SignumInvokeArgs()
        {
        }
        public static new SignumInvokeArgs Empty => new SignumInvokeArgs();
    }


    [OutputType]
    public sealed class SignumResult
    {
        public readonly double Result;

        [OutputConstructor]
        private SignumResult(double result)
        {
            Result = result;
        }
    }
}
