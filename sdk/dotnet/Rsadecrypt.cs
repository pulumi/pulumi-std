// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Rsadecrypt
    {
        /// <summary>
        /// Decrypts an RSA-encrypted ciphertext.
        /// The cipher text must be base64-encoded and the key must be in PEM format.
        /// </summary>
        public static Task<RsadecryptResult> InvokeAsync(RsadecryptArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<RsadecryptResult>("std:index:rsadecrypt", args ?? new RsadecryptArgs(), options.WithDefaults());

        /// <summary>
        /// Decrypts an RSA-encrypted ciphertext.
        /// The cipher text must be base64-encoded and the key must be in PEM format.
        /// </summary>
        public static Output<RsadecryptResult> Invoke(RsadecryptInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<RsadecryptResult>("std:index:rsadecrypt", args ?? new RsadecryptInvokeArgs(), options.WithDefaults());
    }


    public sealed class RsadecryptArgs : global::Pulumi.InvokeArgs
    {
        [Input("cipherText", required: true)]
        public string CipherText { get; set; } = null!;

        [Input("key", required: true)]
        public string Key { get; set; } = null!;

        public RsadecryptArgs()
        {
        }
        public static new RsadecryptArgs Empty => new RsadecryptArgs();
    }

    public sealed class RsadecryptInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("cipherText", required: true)]
        public Input<string> CipherText { get; set; } = null!;

        [Input("key", required: true)]
        public Input<string> Key { get; set; } = null!;

        public RsadecryptInvokeArgs()
        {
        }
        public static new RsadecryptInvokeArgs Empty => new RsadecryptInvokeArgs();
    }


    [OutputType]
    public sealed class RsadecryptResult
    {
        public readonly string Result;

        [OutputConstructor]
        private RsadecryptResult(string result)
        {
            Result = result;
        }
    }
}
