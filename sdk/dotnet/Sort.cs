// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Sort
    {
        /// <summary>
        /// Returns a list of strings sorted lexicographically.
        /// </summary>
        public static Task<SortResult> InvokeAsync(SortArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<SortResult>("std:index:sort", args ?? new SortArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a list of strings sorted lexicographically.
        /// </summary>
        public static Output<SortResult> Invoke(SortInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<SortResult>("std:index:sort", args ?? new SortInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a list of strings sorted lexicographically.
        /// </summary>
        public static Output<SortResult> Invoke(SortInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<SortResult>("std:index:sort", args ?? new SortInvokeArgs(), options.WithDefaults());
    }


    public sealed class SortArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        private List<string>? _input;
        public List<string> Input
        {
            get => _input ?? (_input = new List<string>());
            set => _input = value;
        }

        public SortArgs()
        {
        }
        public static new SortArgs Empty => new SortArgs();
    }

    public sealed class SortInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        private InputList<string>? _input;
        public InputList<string> Input
        {
            get => _input ?? (_input = new InputList<string>());
            set => _input = value;
        }

        public SortInvokeArgs()
        {
        }
        public static new SortInvokeArgs Empty => new SortInvokeArgs();
    }


    [OutputType]
    public sealed class SortResult
    {
        public readonly ImmutableArray<string> Result;

        [OutputConstructor]
        private SortResult(ImmutableArray<string> result)
        {
            Result = result;
        }
    }
}
