// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Fileexists
    {
        /// <summary>
        /// Determines whether a file exists at a given path.
        /// </summary>
        public static Task<FileexistsResult> InvokeAsync(FileexistsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<FileexistsResult>("std:index:fileexists", args ?? new FileexistsArgs(), options.WithDefaults());

        /// <summary>
        /// Determines whether a file exists at a given path.
        /// </summary>
        public static Output<FileexistsResult> Invoke(FileexistsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<FileexistsResult>("std:index:fileexists", args ?? new FileexistsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Determines whether a file exists at a given path.
        /// </summary>
        public static Output<FileexistsResult> Invoke(FileexistsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<FileexistsResult>("std:index:fileexists", args ?? new FileexistsInvokeArgs(), options.WithDefaults());
    }


    public sealed class FileexistsArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public string Input { get; set; } = null!;

        public FileexistsArgs()
        {
        }
        public static new FileexistsArgs Empty => new FileexistsArgs();
    }

    public sealed class FileexistsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public Input<string> Input { get; set; } = null!;

        public FileexistsInvokeArgs()
        {
        }
        public static new FileexistsInvokeArgs Empty => new FileexistsInvokeArgs();
    }


    [OutputType]
    public sealed class FileexistsResult
    {
        public readonly bool Result;

        [OutputConstructor]
        private FileexistsResult(bool result)
        {
            Result = result;
        }
    }
}
