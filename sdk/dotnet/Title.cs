// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Title
    {
        /// <summary>
        /// Converts the first letter of each word in the given string to uppercase.
        /// </summary>
        public static Task<TitleResult> InvokeAsync(TitleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<TitleResult>("std:index:title", args ?? new TitleArgs(), options.WithDefaults());

        /// <summary>
        /// Converts the first letter of each word in the given string to uppercase.
        /// </summary>
        public static Output<TitleResult> Invoke(TitleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<TitleResult>("std:index:title", args ?? new TitleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Converts the first letter of each word in the given string to uppercase.
        /// </summary>
        public static Output<TitleResult> Invoke(TitleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<TitleResult>("std:index:title", args ?? new TitleInvokeArgs(), options.WithDefaults());
    }


    public sealed class TitleArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public string Input { get; set; } = null!;

        public TitleArgs()
        {
        }
        public static new TitleArgs Empty => new TitleArgs();
    }

    public sealed class TitleInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public Input<string> Input { get; set; } = null!;

        public TitleInvokeArgs()
        {
        }
        public static new TitleInvokeArgs Empty => new TitleInvokeArgs();
    }


    [OutputType]
    public sealed class TitleResult
    {
        public readonly string Result;

        [OutputConstructor]
        private TitleResult(string result)
        {
            Result = result;
        }
    }
}
