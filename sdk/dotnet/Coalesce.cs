// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Coalesce
    {
        /// <summary>
        /// Returns the first non-empty value from the given arguments.
        /// </summary>
        public static Task<CoalesceResult> InvokeAsync(CoalesceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<CoalesceResult>("std:index:coalesce", args ?? new CoalesceArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the first non-empty value from the given arguments.
        /// </summary>
        public static Output<CoalesceResult> Invoke(CoalesceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<CoalesceResult>("std:index:coalesce", args ?? new CoalesceInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the first non-empty value from the given arguments.
        /// </summary>
        public static Output<CoalesceResult> Invoke(CoalesceInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<CoalesceResult>("std:index:coalesce", args ?? new CoalesceInvokeArgs(), options.WithDefaults());
    }


    public sealed class CoalesceArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        private List<string>? _input;
        public List<string> Input
        {
            get => _input ?? (_input = new List<string>());
            set => _input = value;
        }

        public CoalesceArgs()
        {
        }
        public static new CoalesceArgs Empty => new CoalesceArgs();
    }

    public sealed class CoalesceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        private InputList<string>? _input;
        public InputList<string> Input
        {
            get => _input ?? (_input = new InputList<string>());
            set => _input = value;
        }

        public CoalesceInvokeArgs()
        {
        }
        public static new CoalesceInvokeArgs Empty => new CoalesceInvokeArgs();
    }


    [OutputType]
    public sealed class CoalesceResult
    {
        public readonly string Result;

        [OutputConstructor]
        private CoalesceResult(string result)
        {
            Result = result;
        }
    }
}
