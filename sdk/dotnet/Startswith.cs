// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Startswith
    {
        /// <summary>
        /// Determines if the input string starts with the suffix.
        /// </summary>
        public static Task<StartswithResult> InvokeAsync(StartswithArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<StartswithResult>("std:index:startswith", args ?? new StartswithArgs(), options.WithDefaults());

        /// <summary>
        /// Determines if the input string starts with the suffix.
        /// </summary>
        public static Output<StartswithResult> Invoke(StartswithInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<StartswithResult>("std:index:startswith", args ?? new StartswithInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Determines if the input string starts with the suffix.
        /// </summary>
        public static Output<StartswithResult> Invoke(StartswithInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<StartswithResult>("std:index:startswith", args ?? new StartswithInvokeArgs(), options.WithDefaults());
    }


    public sealed class StartswithArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public string Input { get; set; } = null!;

        [Input("prefix", required: true)]
        public string Prefix { get; set; } = null!;

        public StartswithArgs()
        {
        }
        public static new StartswithArgs Empty => new StartswithArgs();
    }

    public sealed class StartswithInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public Input<string> Input { get; set; } = null!;

        [Input("prefix", required: true)]
        public Input<string> Prefix { get; set; } = null!;

        public StartswithInvokeArgs()
        {
        }
        public static new StartswithInvokeArgs Empty => new StartswithInvokeArgs();
    }


    [OutputType]
    public sealed class StartswithResult
    {
        public readonly bool Result;

        [OutputConstructor]
        private StartswithResult(bool result)
        {
            Result = result;
        }
    }
}
