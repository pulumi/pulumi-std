// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Chomp
    {
        /// <summary>
        /// Removes one or more newline characters from the end of the given string.
        /// </summary>
        public static Task<ChompResult> InvokeAsync(ChompArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ChompResult>("std:index:chomp", args ?? new ChompArgs(), options.WithDefaults());

        /// <summary>
        /// Removes one or more newline characters from the end of the given string.
        /// </summary>
        public static Output<ChompResult> Invoke(ChompInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ChompResult>("std:index:chomp", args ?? new ChompInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Removes one or more newline characters from the end of the given string.
        /// </summary>
        public static Output<ChompResult> Invoke(ChompInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<ChompResult>("std:index:chomp", args ?? new ChompInvokeArgs(), options.WithDefaults());
    }


    public sealed class ChompArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public string Input { get; set; } = null!;

        public ChompArgs()
        {
        }
        public static new ChompArgs Empty => new ChompArgs();
    }

    public sealed class ChompInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public Input<string> Input { get; set; } = null!;

        public ChompInvokeArgs()
        {
        }
        public static new ChompInvokeArgs Empty => new ChompInvokeArgs();
    }


    [OutputType]
    public sealed class ChompResult
    {
        public readonly string Result;

        [OutputConstructor]
        private ChompResult(string result)
        {
            Result = result;
        }
    }
}
