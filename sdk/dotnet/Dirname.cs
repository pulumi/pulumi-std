// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Dirname
    {
        /// <summary>
        /// Returns all but the last element of path, typically the path's directory.
        /// </summary>
        public static Task<DirnameResult> InvokeAsync(DirnameArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<DirnameResult>("std:index:dirname", args ?? new DirnameArgs(), options.WithDefaults());

        /// <summary>
        /// Returns all but the last element of path, typically the path's directory.
        /// </summary>
        public static Output<DirnameResult> Invoke(DirnameInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<DirnameResult>("std:index:dirname", args ?? new DirnameInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns all but the last element of path, typically the path's directory.
        /// </summary>
        public static Output<DirnameResult> Invoke(DirnameInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<DirnameResult>("std:index:dirname", args ?? new DirnameInvokeArgs(), options.WithDefaults());
    }


    public sealed class DirnameArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public string Input { get; set; } = null!;

        public DirnameArgs()
        {
        }
        public static new DirnameArgs Empty => new DirnameArgs();
    }

    public sealed class DirnameInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public Input<string> Input { get; set; } = null!;

        public DirnameInvokeArgs()
        {
        }
        public static new DirnameInvokeArgs Empty => new DirnameInvokeArgs();
    }


    [OutputType]
    public sealed class DirnameResult
    {
        public readonly string Result;

        [OutputConstructor]
        private DirnameResult(string result)
        {
            Result = result;
        }
    }
}
