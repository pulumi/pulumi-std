// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Ceil
    {
        /// <summary>
        /// Returns the least integer value greater than or equal to the argument.
        /// </summary>
        public static Task<CeilResult> InvokeAsync(CeilArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<CeilResult>("std:index:ceil", args ?? new CeilArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the least integer value greater than or equal to the argument.
        /// </summary>
        public static Output<CeilResult> Invoke(CeilInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<CeilResult>("std:index:ceil", args ?? new CeilInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the least integer value greater than or equal to the argument.
        /// </summary>
        public static Output<CeilResult> Invoke(CeilInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<CeilResult>("std:index:ceil", args ?? new CeilInvokeArgs(), options.WithDefaults());
    }


    public sealed class CeilArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public double Input { get; set; }

        public CeilArgs()
        {
        }
        public static new CeilArgs Empty => new CeilArgs();
    }

    public sealed class CeilInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public Input<double> Input { get; set; } = null!;

        public CeilInvokeArgs()
        {
        }
        public static new CeilInvokeArgs Empty => new CeilInvokeArgs();
    }


    [OutputType]
    public sealed class CeilResult
    {
        public readonly double Result;

        [OutputConstructor]
        private CeilResult(double result)
        {
            Result = result;
        }
    }
}
