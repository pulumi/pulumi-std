// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Distinct
    {
        /// <summary>
        /// Removes duplicate items from a list.
        /// </summary>
        public static Task<DistinctResult> InvokeAsync(DistinctArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<DistinctResult>("std:index:distinct", args ?? new DistinctArgs(), options.WithDefaults());

        /// <summary>
        /// Removes duplicate items from a list.
        /// </summary>
        public static Output<DistinctResult> Invoke(DistinctInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<DistinctResult>("std:index:distinct", args ?? new DistinctInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Removes duplicate items from a list.
        /// </summary>
        public static Output<DistinctResult> Invoke(DistinctInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<DistinctResult>("std:index:distinct", args ?? new DistinctInvokeArgs(), options.WithDefaults());
    }


    public sealed class DistinctArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        private List<object>? _input;
        public List<object> Input
        {
            get => _input ?? (_input = new List<object>());
            set => _input = value;
        }

        public DistinctArgs()
        {
        }
        public static new DistinctArgs Empty => new DistinctArgs();
    }

    public sealed class DistinctInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        private InputList<object>? _input;
        public InputList<object> Input
        {
            get => _input ?? (_input = new InputList<object>());
            set => _input = value;
        }

        public DistinctInvokeArgs()
        {
        }
        public static new DistinctInvokeArgs Empty => new DistinctInvokeArgs();
    }


    [OutputType]
    public sealed class DistinctResult
    {
        public readonly ImmutableArray<object> Result;

        [OutputConstructor]
        private DistinctResult(ImmutableArray<object> result)
        {
            Result = result;
        }
    }
}
