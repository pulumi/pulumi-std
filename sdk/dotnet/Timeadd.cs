// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Timeadd
    {
        /// <summary>
        /// Adds a duration to a timestamp, returning a new timestamp.
        /// 	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
        /// 	'timestamp' must be a string adhering this syntax, i.e. "2017-11-22T00:00:00Z".
        /// 	'duration' is a string representation of a time difference, comprised of sequences of
        /// 	numbers and unit pairs, i.e. "3.5h" or "2h15m".
        /// 	Accepted units are "ns", "us" or "µs", "ms", "s", "m", and "h". The first number may be negative
        /// 	to provide a negative duration, i.e. "-2h15m".
        /// </summary>
        public static Task<TimeaddResult> InvokeAsync(TimeaddArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<TimeaddResult>("std:index:timeadd", args ?? new TimeaddArgs(), options.WithDefaults());

        /// <summary>
        /// Adds a duration to a timestamp, returning a new timestamp.
        /// 	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
        /// 	'timestamp' must be a string adhering this syntax, i.e. "2017-11-22T00:00:00Z".
        /// 	'duration' is a string representation of a time difference, comprised of sequences of
        /// 	numbers and unit pairs, i.e. "3.5h" or "2h15m".
        /// 	Accepted units are "ns", "us" or "µs", "ms", "s", "m", and "h". The first number may be negative
        /// 	to provide a negative duration, i.e. "-2h15m".
        /// </summary>
        public static Output<TimeaddResult> Invoke(TimeaddInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<TimeaddResult>("std:index:timeadd", args ?? new TimeaddInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Adds a duration to a timestamp, returning a new timestamp.
        /// 	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
        /// 	'timestamp' must be a string adhering this syntax, i.e. "2017-11-22T00:00:00Z".
        /// 	'duration' is a string representation of a time difference, comprised of sequences of
        /// 	numbers and unit pairs, i.e. "3.5h" or "2h15m".
        /// 	Accepted units are "ns", "us" or "µs", "ms", "s", "m", and "h". The first number may be negative
        /// 	to provide a negative duration, i.e. "-2h15m".
        /// </summary>
        public static Output<TimeaddResult> Invoke(TimeaddInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<TimeaddResult>("std:index:timeadd", args ?? new TimeaddInvokeArgs(), options.WithDefaults());
    }


    public sealed class TimeaddArgs : global::Pulumi.InvokeArgs
    {
        [Input("duration", required: true)]
        public string Duration { get; set; } = null!;

        [Input("timestamp", required: true)]
        public string Timestamp { get; set; } = null!;

        public TimeaddArgs()
        {
        }
        public static new TimeaddArgs Empty => new TimeaddArgs();
    }

    public sealed class TimeaddInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("duration", required: true)]
        public Input<string> Duration { get; set; } = null!;

        [Input("timestamp", required: true)]
        public Input<string> Timestamp { get; set; } = null!;

        public TimeaddInvokeArgs()
        {
        }
        public static new TimeaddInvokeArgs Empty => new TimeaddInvokeArgs();
    }


    [OutputType]
    public sealed class TimeaddResult
    {
        public readonly string Result;

        [OutputConstructor]
        private TimeaddResult(string result)
        {
            Result = result;
        }
    }
}
