// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Values
    {
        /// <summary>
        /// Returns a list of the values of the map.
        /// </summary>
        public static Task<ValuesResult> InvokeAsync(ValuesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ValuesResult>("std:index:values", args ?? new ValuesArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a list of the values of the map.
        /// </summary>
        public static Output<ValuesResult> Invoke(ValuesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ValuesResult>("std:index:values", args ?? new ValuesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a list of the values of the map.
        /// </summary>
        public static Output<ValuesResult> Invoke(ValuesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<ValuesResult>("std:index:values", args ?? new ValuesInvokeArgs(), options.WithDefaults());
    }


    public sealed class ValuesArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        private Dictionary<string, object>? _input;
        public Dictionary<string, object> Input
        {
            get => _input ?? (_input = new Dictionary<string, object>());
            set => _input = value;
        }

        public ValuesArgs()
        {
        }
        public static new ValuesArgs Empty => new ValuesArgs();
    }

    public sealed class ValuesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        private InputMap<object>? _input;
        public InputMap<object> Input
        {
            get => _input ?? (_input = new InputMap<object>());
            set => _input = value;
        }

        public ValuesInvokeArgs()
        {
        }
        public static new ValuesInvokeArgs Empty => new ValuesInvokeArgs();
    }


    [OutputType]
    public sealed class ValuesResult
    {
        public readonly ImmutableArray<object> Result;

        [OutputConstructor]
        private ValuesResult(ImmutableArray<object> result)
        {
            Result = result;
        }
    }
}
