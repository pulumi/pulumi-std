// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Floor
    {
        /// <summary>
        /// Returns the greatest integer value less than or equal to the argument.
        /// </summary>
        public static Task<FloorResult> InvokeAsync(FloorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<FloorResult>("std:index:floor", args ?? new FloorArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the greatest integer value less than or equal to the argument.
        /// </summary>
        public static Output<FloorResult> Invoke(FloorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<FloorResult>("std:index:floor", args ?? new FloorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the greatest integer value less than or equal to the argument.
        /// </summary>
        public static Output<FloorResult> Invoke(FloorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<FloorResult>("std:index:floor", args ?? new FloorInvokeArgs(), options.WithDefaults());
    }


    public sealed class FloorArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public double Input { get; set; }

        public FloorArgs()
        {
        }
        public static new FloorArgs Empty => new FloorArgs();
    }

    public sealed class FloorInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("input", required: true)]
        public Input<double> Input { get; set; } = null!;

        public FloorInvokeArgs()
        {
        }
        public static new FloorInvokeArgs Empty => new FloorInvokeArgs();
    }


    [OutputType]
    public sealed class FloorResult
    {
        public readonly double Result;

        [OutputConstructor]
        private FloorResult(double result)
        {
            Result = result;
        }
    }
}
