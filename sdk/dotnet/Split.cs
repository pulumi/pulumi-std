// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Split
    {
        /// <summary>
        /// Produces a list by dividing a given string at all occurrences of a given separator
        /// </summary>
        public static Task<SplitResult> InvokeAsync(SplitArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<SplitResult>("std:index:split", args ?? new SplitArgs(), options.WithDefaults());

        /// <summary>
        /// Produces a list by dividing a given string at all occurrences of a given separator
        /// </summary>
        public static Output<SplitResult> Invoke(SplitInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<SplitResult>("std:index:split", args ?? new SplitInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Produces a list by dividing a given string at all occurrences of a given separator
        /// </summary>
        public static Output<SplitResult> Invoke(SplitInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<SplitResult>("std:index:split", args ?? new SplitInvokeArgs(), options.WithDefaults());
    }


    public sealed class SplitArgs : global::Pulumi.InvokeArgs
    {
        [Input("separator", required: true)]
        public string Separator { get; set; } = null!;

        [Input("text", required: true)]
        public string Text { get; set; } = null!;

        public SplitArgs()
        {
        }
        public static new SplitArgs Empty => new SplitArgs();
    }

    public sealed class SplitInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("separator", required: true)]
        public Input<string> Separator { get; set; } = null!;

        [Input("text", required: true)]
        public Input<string> Text { get; set; } = null!;

        public SplitInvokeArgs()
        {
        }
        public static new SplitInvokeArgs Empty => new SplitInvokeArgs();
    }


    [OutputType]
    public sealed class SplitResult
    {
        public readonly ImmutableArray<string> Result;

        [OutputConstructor]
        private SplitResult(ImmutableArray<string> result)
        {
            Result = result;
        }
    }
}
