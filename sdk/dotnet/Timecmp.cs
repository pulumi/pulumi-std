// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Timecmp
    {
        /// <summary>
        /// Compares two timestamps and returns a number that represents the ordering
        /// 	of the instants those timestamps represent.
        /// 	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
        /// 	Both timestamps must be strings adhering this syntax, i.e. "2017-11-22T00:00:00Z".
        /// 	If 'timestamp_a' is before 'timestamp_b', -1 is returned.
        /// 	If 'timestamp_a' is equal to 'timestamp_b', 0 is returned.
        /// 	If 'timestamp_a' is after 'timestamp_b', 1 is returned.
        /// </summary>
        public static Task<TimecmpResult> InvokeAsync(TimecmpArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<TimecmpResult>("std:index:timecmp", args ?? new TimecmpArgs(), options.WithDefaults());

        /// <summary>
        /// Compares two timestamps and returns a number that represents the ordering
        /// 	of the instants those timestamps represent.
        /// 	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
        /// 	Both timestamps must be strings adhering this syntax, i.e. "2017-11-22T00:00:00Z".
        /// 	If 'timestamp_a' is before 'timestamp_b', -1 is returned.
        /// 	If 'timestamp_a' is equal to 'timestamp_b', 0 is returned.
        /// 	If 'timestamp_a' is after 'timestamp_b', 1 is returned.
        /// </summary>
        public static Output<TimecmpResult> Invoke(TimecmpInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<TimecmpResult>("std:index:timecmp", args ?? new TimecmpInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Compares two timestamps and returns a number that represents the ordering
        /// 	of the instants those timestamps represent.
        /// 	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
        /// 	Both timestamps must be strings adhering this syntax, i.e. "2017-11-22T00:00:00Z".
        /// 	If 'timestamp_a' is before 'timestamp_b', -1 is returned.
        /// 	If 'timestamp_a' is equal to 'timestamp_b', 0 is returned.
        /// 	If 'timestamp_a' is after 'timestamp_b', 1 is returned.
        /// </summary>
        public static Output<TimecmpResult> Invoke(TimecmpInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<TimecmpResult>("std:index:timecmp", args ?? new TimecmpInvokeArgs(), options.WithDefaults());
    }


    public sealed class TimecmpArgs : global::Pulumi.InvokeArgs
    {
        [Input("timestampa", required: true)]
        public string Timestampa { get; set; } = null!;

        [Input("timestampb", required: true)]
        public string Timestampb { get; set; } = null!;

        public TimecmpArgs()
        {
        }
        public static new TimecmpArgs Empty => new TimecmpArgs();
    }

    public sealed class TimecmpInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("timestampa", required: true)]
        public Input<string> Timestampa { get; set; } = null!;

        [Input("timestampb", required: true)]
        public Input<string> Timestampb { get; set; } = null!;

        public TimecmpInvokeArgs()
        {
        }
        public static new TimecmpInvokeArgs Empty => new TimecmpInvokeArgs();
    }


    [OutputType]
    public sealed class TimecmpResult
    {
        public readonly int Result;

        [OutputConstructor]
        private TimecmpResult(int result)
        {
            Result = result;
        }
    }
}
