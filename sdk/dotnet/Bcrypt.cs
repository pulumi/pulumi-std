// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Bcrypt
    {
        /// <summary>
        /// Returns the Blowfish encrypted hash of the string at the given cost.
        /// A default cost of 10 will be used if not provided.
        /// </summary>
        public static Task<BcryptResult> InvokeAsync(BcryptArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<BcryptResult>("std:index:bcrypt", args ?? new BcryptArgs(), options.WithDefaults());

        /// <summary>
        /// Returns the Blowfish encrypted hash of the string at the given cost.
        /// A default cost of 10 will be used if not provided.
        /// </summary>
        public static Output<BcryptResult> Invoke(BcryptInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<BcryptResult>("std:index:bcrypt", args ?? new BcryptInvokeArgs(), options.WithDefaults());
    }


    public sealed class BcryptArgs : global::Pulumi.InvokeArgs
    {
        [Input("cost")]
        public int? Cost { get; set; }

        [Input("input", required: true)]
        public string Input { get; set; } = null!;

        public BcryptArgs()
        {
        }
        public static new BcryptArgs Empty => new BcryptArgs();
    }

    public sealed class BcryptInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("cost")]
        public Input<int>? Cost { get; set; }

        [Input("input", required: true)]
        public Input<string> Input { get; set; } = null!;

        public BcryptInvokeArgs()
        {
        }
        public static new BcryptInvokeArgs Empty => new BcryptInvokeArgs();
    }


    [OutputType]
    public sealed class BcryptResult
    {
        public readonly string Result;

        [OutputConstructor]
        private BcryptResult(string result)
        {
            Result = result;
        }
    }
}
