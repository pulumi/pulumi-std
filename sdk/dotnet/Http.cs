// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Http
    {
        /// <summary>
        /// Performs an HTTP request and returns the response.
        /// </summary>
        public static Task<HttpResult> InvokeAsync(HttpArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<HttpResult>("std:index:http", args ?? new HttpArgs(), options.WithDefaults());

        /// <summary>
        /// Performs an HTTP request and returns the response.
        /// </summary>
        public static Output<HttpResult> Invoke(HttpInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<HttpResult>("std:index:http", args ?? new HttpInvokeArgs(), options.WithDefaults());
    }


    public sealed class HttpArgs : global::Pulumi.InvokeArgs
    {
        [Input("attempts")]
        public int? Attempts { get; set; }

        [Input("caCertPem")]
        public string? CaCertPem { get; set; }

        [Input("insecure")]
        public bool? Insecure { get; set; }

        [Input("maxDelayMs")]
        public int? MaxDelayMs { get; set; }

        [Input("method")]
        public string? Method { get; set; }

        [Input("minDelayMs")]
        public int? MinDelayMs { get; set; }

        [Input("requestBody")]
        public string? RequestBody { get; set; }

        [Input("requestHeaders")]
        private Dictionary<string, string>? _requestHeaders;
        public Dictionary<string, string> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new Dictionary<string, string>());
            set => _requestHeaders = value;
        }

        [Input("requestTimeoutMs")]
        public int? RequestTimeoutMs { get; set; }

        [Input("url", required: true)]
        public string Url { get; set; } = null!;

        public HttpArgs()
        {
        }
        public static new HttpArgs Empty => new HttpArgs();
    }

    public sealed class HttpInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("attempts")]
        public Input<int>? Attempts { get; set; }

        [Input("caCertPem")]
        public Input<string>? CaCertPem { get; set; }

        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        [Input("maxDelayMs")]
        public Input<int>? MaxDelayMs { get; set; }

        [Input("method")]
        public Input<string>? Method { get; set; }

        [Input("minDelayMs")]
        public Input<int>? MinDelayMs { get; set; }

        [Input("requestBody")]
        public Input<string>? RequestBody { get; set; }

        [Input("requestHeaders")]
        private InputMap<string>? _requestHeaders;
        public InputMap<string> RequestHeaders
        {
            get => _requestHeaders ?? (_requestHeaders = new InputMap<string>());
            set => _requestHeaders = value;
        }

        [Input("requestTimeoutMs")]
        public Input<int>? RequestTimeoutMs { get; set; }

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public HttpInvokeArgs()
        {
        }
        public static new HttpInvokeArgs Empty => new HttpInvokeArgs();
    }


    [OutputType]
    public sealed class HttpResult
    {
        public readonly string Id;
        public readonly string ResponseBody;
        public readonly string ResponseBodyBase64;
        public readonly ImmutableDictionary<string, string> ResponseHeaders;
        public readonly int StatusCode;

        [OutputConstructor]
        private HttpResult(
            string id,

            string responseBody,

            string responseBodyBase64,

            ImmutableDictionary<string, string> responseHeaders,

            int statusCode)
        {
            Id = id;
            ResponseBody = responseBody;
            ResponseBodyBase64 = responseBodyBase64;
            ResponseHeaders = responseHeaders;
            StatusCode = statusCode;
        }
    }
}
