// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Std
{
    public static class Map
    {
        /// <summary>
        /// Returns a map consisting of the key/value pairs specified as arguments.
        /// </summary>
        public static Task<MapResult> InvokeAsync(MapArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<MapResult>("std:index:map", args ?? new MapArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a map consisting of the key/value pairs specified as arguments.
        /// </summary>
        public static Output<MapResult> Invoke(MapInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<MapResult>("std:index:map", args ?? new MapInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Returns a map consisting of the key/value pairs specified as arguments.
        /// </summary>
        public static Output<MapResult> Invoke(MapInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<MapResult>("std:index:map", args ?? new MapInvokeArgs(), options.WithDefaults());
    }


    public sealed class MapArgs : global::Pulumi.InvokeArgs
    {
        [Input("args", required: true)]
        private List<object>? _args;
        public List<object> Args
        {
            get => _args ?? (_args = new List<object>());
            set => _args = value;
        }

        public MapArgs()
        {
        }
        public static new MapArgs Empty => new MapArgs();
    }

    public sealed class MapInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("args", required: true)]
        private InputList<object>? _args;
        public InputList<object> Args
        {
            get => _args ?? (_args = new InputList<object>());
            set => _args = value;
        }

        public MapInvokeArgs()
        {
        }
        public static new MapInvokeArgs Empty => new MapInvokeArgs();
    }


    [OutputType]
    public sealed class MapResult
    {
        public readonly ImmutableDictionary<string, object> Result;

        [OutputConstructor]
        private MapResult(ImmutableDictionary<string, object> result)
        {
            Result = result;
        }
    }
}
