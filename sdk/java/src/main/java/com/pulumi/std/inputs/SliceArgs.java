// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.std.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SliceArgs extends com.pulumi.resources.InvokeArgs {

    public static final SliceArgs Empty = new SliceArgs();

    @Import(name="from")
    private @Nullable Output<Integer> from;

    public Optional<Output<Integer>> from() {
        return Optional.ofNullable(this.from);
    }

    @Import(name="list", required=true)
    private Output<List<Object>> list;

    public Output<List<Object>> list() {
        return this.list;
    }

    @Import(name="to")
    private @Nullable Output<Integer> to;

    public Optional<Output<Integer>> to() {
        return Optional.ofNullable(this.to);
    }

    private SliceArgs() {}

    private SliceArgs(SliceArgs $) {
        this.from = $.from;
        this.list = $.list;
        this.to = $.to;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SliceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SliceArgs $;

        public Builder() {
            $ = new SliceArgs();
        }

        public Builder(SliceArgs defaults) {
            $ = new SliceArgs(Objects.requireNonNull(defaults));
        }

        public Builder from(@Nullable Output<Integer> from) {
            $.from = from;
            return this;
        }

        public Builder from(Integer from) {
            return from(Output.of(from));
        }

        public Builder list(Output<List<Object>> list) {
            $.list = list;
            return this;
        }

        public Builder list(List<Object> list) {
            return list(Output.of(list));
        }

        public Builder list(Object... list) {
            return list(List.of(list));
        }

        public Builder to(@Nullable Output<Integer> to) {
            $.to = to;
            return this;
        }

        public Builder to(Integer to) {
            return to(Output.of(to));
        }

        public SliceArgs build() {
            if ($.list == null) {
                throw new MissingRequiredPropertyException("SliceArgs", "list");
            }
            return $;
        }
    }

}
