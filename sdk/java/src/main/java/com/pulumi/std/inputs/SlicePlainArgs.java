// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.std.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.Object;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SlicePlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final SlicePlainArgs Empty = new SlicePlainArgs();

    @Import(name="from")
    private @Nullable Integer from;

    public Optional<Integer> from() {
        return Optional.ofNullable(this.from);
    }

    @Import(name="list", required=true)
    private List<Object> list;

    public List<Object> list() {
        return this.list;
    }

    @Import(name="to")
    private @Nullable Integer to;

    public Optional<Integer> to() {
        return Optional.ofNullable(this.to);
    }

    private SlicePlainArgs() {}

    private SlicePlainArgs(SlicePlainArgs $) {
        this.from = $.from;
        this.list = $.list;
        this.to = $.to;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SlicePlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SlicePlainArgs $;

        public Builder() {
            $ = new SlicePlainArgs();
        }

        public Builder(SlicePlainArgs defaults) {
            $ = new SlicePlainArgs(Objects.requireNonNull(defaults));
        }

        public Builder from(@Nullable Integer from) {
            $.from = from;
            return this;
        }

        public Builder list(List<Object> list) {
            $.list = list;
            return this;
        }

        public Builder list(Object... list) {
            return list(List.of(list));
        }

        public Builder to(@Nullable Integer to) {
            $.to = to;
            return this;
        }

        public SlicePlainArgs build() {
            if ($.list == null) {
                throw new MissingRequiredPropertyException("SlicePlainArgs", "list");
            }
            return $;
        }
    }

}
