// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.std.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Double;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RangeArgs extends com.pulumi.resources.InvokeArgs {

    public static final RangeArgs Empty = new RangeArgs();

    @Import(name="limit", required=true)
    private Output<Double> limit;

    public Output<Double> limit() {
        return this.limit;
    }

    @Import(name="start")
    private @Nullable Output<Double> start;

    public Optional<Output<Double>> start() {
        return Optional.ofNullable(this.start);
    }

    @Import(name="step")
    private @Nullable Output<Double> step;

    public Optional<Output<Double>> step() {
        return Optional.ofNullable(this.step);
    }

    private RangeArgs() {}

    private RangeArgs(RangeArgs $) {
        this.limit = $.limit;
        this.start = $.start;
        this.step = $.step;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RangeArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RangeArgs $;

        public Builder() {
            $ = new RangeArgs();
        }

        public Builder(RangeArgs defaults) {
            $ = new RangeArgs(Objects.requireNonNull(defaults));
        }

        public Builder limit(Output<Double> limit) {
            $.limit = limit;
            return this;
        }

        public Builder limit(Double limit) {
            return limit(Output.of(limit));
        }

        public Builder start(@Nullable Output<Double> start) {
            $.start = start;
            return this;
        }

        public Builder start(Double start) {
            return start(Output.of(start));
        }

        public Builder step(@Nullable Output<Double> step) {
            $.step = step;
            return this;
        }

        public Builder step(Double step) {
            return step(Output.of(step));
        }

        public RangeArgs build() {
            if ($.limit == null) {
                throw new MissingRequiredPropertyException("RangeArgs", "limit");
            }
            return $;
        }
    }

}
