# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'TrimprefixResult',
    'AwaitableTrimprefixResult',
    'trimprefix',
    'trimprefix_output',
]

@pulumi.output_type
class TrimprefixResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> str:
        return pulumi.get(self, "result")


class AwaitableTrimprefixResult(TrimprefixResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return TrimprefixResult(
            result=self.result)


def trimprefix(input: Optional[str] = None,
               prefix: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableTrimprefixResult:
    """
    Removes the specified prefix from the start of the given string, if present.
    """
    __args__ = dict()
    __args__['input'] = input
    __args__['prefix'] = prefix
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('std:index:trimprefix', __args__, opts=opts, typ=TrimprefixResult).value

    return AwaitableTrimprefixResult(
        result=pulumi.get(__ret__, 'result'))


@_utilities.lift_output_func(trimprefix)
def trimprefix_output(input: Optional[pulumi.Input[str]] = None,
                      prefix: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[TrimprefixResult]:
    """
    Removes the specified prefix from the start of the given string, if present.
    """
    ...
