# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ZipmapResult',
    'AwaitableZipmapResult',
    'zipmap',
    'zipmap_output',
]

@pulumi.output_type
class ZipmapResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, dict):
            raise TypeError("Expected argument 'result' to be a dict")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> Mapping[str, Any]:
        return pulumi.get(self, "result")


class AwaitableZipmapResult(ZipmapResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ZipmapResult(
            result=self.result)


def zipmap(keys: Optional[Sequence[str]] = None,
           values: Optional[Sequence[Any]] = None,
           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableZipmapResult:
    """
    Constructs a map from a list of keys and a corresponding list of values.
    """
    __args__ = dict()
    __args__['keys'] = keys
    __args__['values'] = values
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('std:index:zipmap', __args__, opts=opts, typ=ZipmapResult).value

    return AwaitableZipmapResult(
        result=pulumi.get(__ret__, 'result'))


@_utilities.lift_output_func(zipmap)
def zipmap_output(keys: Optional[pulumi.Input[Sequence[str]]] = None,
                  values: Optional[pulumi.Input[Sequence[Any]]] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ZipmapResult]:
    """
    Constructs a map from a list of keys and a corresponding list of values.
    """
    ...
