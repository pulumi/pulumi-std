# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'CidrsubnetsResult',
    'AwaitableCidrsubnetsResult',
    'cidrsubnets',
    'cidrsubnets_output',
]

@pulumi.output_type
class CidrsubnetsResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, list):
            raise TypeError("Expected argument 'result' to be a list")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> Sequence[str]:
        return pulumi.get(self, "result")


class AwaitableCidrsubnetsResult(CidrsubnetsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return CidrsubnetsResult(
            result=self.result)


def cidrsubnets(input: Optional[str] = None,
                newbits: Optional[Sequence[int]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableCidrsubnetsResult:
    """
    Takes an IP address prefix in CIDR notation (like 10.0.0.0/8) and creates a series of
    consecutive IP address ranges within that CIDR prefix. See https://opentofu.org/docs/language/functions/cidrsubnets/
    for additional information
    """
    __args__ = dict()
    __args__['input'] = input
    __args__['newbits'] = newbits
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('std:index:cidrsubnets', __args__, opts=opts, typ=CidrsubnetsResult).value

    return AwaitableCidrsubnetsResult(
        result=pulumi.get(__ret__, 'result'))
def cidrsubnets_output(input: Optional[pulumi.Input[str]] = None,
                       newbits: Optional[pulumi.Input[Sequence[int]]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[CidrsubnetsResult]:
    """
    Takes an IP address prefix in CIDR notation (like 10.0.0.0/8) and creates a series of
    consecutive IP address ranges within that CIDR prefix. See https://opentofu.org/docs/language/functions/cidrsubnets/
    for additional information
    """
    __args__ = dict()
    __args__['input'] = input
    __args__['newbits'] = newbits
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('std:index:cidrsubnets', __args__, opts=opts, typ=CidrsubnetsResult)
    return __ret__.apply(lambda __response__: CidrsubnetsResult(
        result=pulumi.get(__response__, 'result')))
