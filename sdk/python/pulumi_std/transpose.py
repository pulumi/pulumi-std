# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'TransposeResult',
    'AwaitableTransposeResult',
    'transpose',
    'transpose_output',
]

@pulumi.output_type
class TransposeResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, dict):
            raise TypeError("Expected argument 'result' to be a dict")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> Mapping[str, Sequence[str]]:
        return pulumi.get(self, "result")


class AwaitableTransposeResult(TransposeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return TransposeResult(
            result=self.result)


def transpose(input: Optional[Mapping[str, Sequence[str]]] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableTransposeResult:
    """
    Takes a map of lists of strings and swaps the keys and values to return a new map of lists of strings.
    """
    __args__ = dict()
    __args__['input'] = input
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('std:index:transpose', __args__, opts=opts, typ=TransposeResult).value

    return AwaitableTransposeResult(
        result=pulumi.get(__ret__, 'result'))


@_utilities.lift_output_func(transpose)
def transpose_output(input: Optional[pulumi.Input[Mapping[str, Sequence[str]]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[TransposeResult]:
    """
    Takes a map of lists of strings and swaps the keys and values to return a new map of lists of strings.
    """
    ...
