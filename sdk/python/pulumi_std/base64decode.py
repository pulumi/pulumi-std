# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'Base64decodeResult',
    'AwaitableBase64decodeResult',
    'base64decode',
    'base64decode_output',
]

@pulumi.output_type
class Base64decodeResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, str):
            raise TypeError("Expected argument 'result' to be a str")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> str:
        return pulumi.get(self, "result")


class AwaitableBase64decodeResult(Base64decodeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return Base64decodeResult(
            result=self.result)


def base64decode(input: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableBase64decodeResult:
    """
    Given a base64-encoded string, decodes it and returns the original string.
    """
    __args__ = dict()
    __args__['input'] = input
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('std:index:base64decode', __args__, opts=opts, typ=Base64decodeResult).value

    return AwaitableBase64decodeResult(
        result=pulumi.get(__ret__, 'result'))
def base64decode_output(input: Optional[pulumi.Input[str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[Base64decodeResult]:
    """
    Given a base64-encoded string, decodes it and returns the original string.
    """
    __args__ = dict()
    __args__['input'] = input
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('std:index:base64decode', __args__, opts=opts, typ=Base64decodeResult)
    return __ret__.apply(lambda __response__: Base64decodeResult(
        result=pulumi.get(__response__, 'result')))
