# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'IndexResult',
    'AwaitableIndexResult',
    'index',
    'index_output',
]

@pulumi.output_type
class IndexResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, int):
            raise TypeError("Expected argument 'result' to be a int")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> int:
        return pulumi.get(self, "result")


class AwaitableIndexResult(IndexResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return IndexResult(
            result=self.result)


def index(element: Optional[Any] = None,
          input: Optional[Sequence[Any]] = None,
          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableIndexResult:
    """
    Finds the index of a given element in a list.
    """
    __args__ = dict()
    __args__['element'] = element
    __args__['input'] = input
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('std:index:index', __args__, opts=opts, typ=IndexResult).value

    return AwaitableIndexResult(
        result=pulumi.get(__ret__, 'result'))


@_utilities.lift_output_func(index)
def index_output(element: Optional[Any] = None,
                 input: Optional[pulumi.Input[Sequence[Any]]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[IndexResult]:
    """
    Finds the index of a given element in a list.
    """
    ...
