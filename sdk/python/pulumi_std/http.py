# coding=utf-8
# *** WARNING: this file was generated by pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'HttpResult',
    'AwaitableHttpResult',
    'http',
    'http_output',
]

@pulumi.output_type
class HttpResult:
    def __init__(__self__, id=None, response_body=None, response_body_base64=None, response_headers=None, status_code=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if response_body and not isinstance(response_body, str):
            raise TypeError("Expected argument 'response_body' to be a str")
        pulumi.set(__self__, "response_body", response_body)
        if response_body_base64 and not isinstance(response_body_base64, str):
            raise TypeError("Expected argument 'response_body_base64' to be a str")
        pulumi.set(__self__, "response_body_base64", response_body_base64)
        if response_headers and not isinstance(response_headers, dict):
            raise TypeError("Expected argument 'response_headers' to be a dict")
        pulumi.set(__self__, "response_headers", response_headers)
        if status_code and not isinstance(status_code, int):
            raise TypeError("Expected argument 'status_code' to be a int")
        pulumi.set(__self__, "status_code", status_code)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="responseBody")
    def response_body(self) -> str:
        return pulumi.get(self, "response_body")

    @property
    @pulumi.getter(name="responseBodyBase64")
    def response_body_base64(self) -> str:
        return pulumi.get(self, "response_body_base64")

    @property
    @pulumi.getter(name="responseHeaders")
    def response_headers(self) -> Mapping[str, str]:
        return pulumi.get(self, "response_headers")

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        return pulumi.get(self, "status_code")


class AwaitableHttpResult(HttpResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return HttpResult(
            id=self.id,
            response_body=self.response_body,
            response_body_base64=self.response_body_base64,
            response_headers=self.response_headers,
            status_code=self.status_code)


def http(attempts: Optional[int] = None,
         ca_cert_pem: Optional[str] = None,
         insecure: Optional[bool] = None,
         max_delay_ms: Optional[int] = None,
         method: Optional[str] = None,
         min_delay_ms: Optional[int] = None,
         request_body: Optional[str] = None,
         request_headers: Optional[Mapping[str, str]] = None,
         request_timeout_ms: Optional[int] = None,
         url: Optional[str] = None,
         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableHttpResult:
    """
    Performs an HTTP request and returns the response.
    """
    __args__ = dict()
    __args__['attempts'] = attempts
    __args__['caCertPem'] = ca_cert_pem
    __args__['insecure'] = insecure
    __args__['maxDelayMs'] = max_delay_ms
    __args__['method'] = method
    __args__['minDelayMs'] = min_delay_ms
    __args__['requestBody'] = request_body
    __args__['requestHeaders'] = request_headers
    __args__['requestTimeoutMs'] = request_timeout_ms
    __args__['url'] = url
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('std:index:http', __args__, opts=opts, typ=HttpResult).value

    return AwaitableHttpResult(
        id=__ret__.id,
        response_body=__ret__.response_body,
        response_body_base64=__ret__.response_body_base64,
        response_headers=__ret__.response_headers,
        status_code=__ret__.status_code)


@_utilities.lift_output_func(http)
def http_output(attempts: Optional[pulumi.Input[Optional[int]]] = None,
                ca_cert_pem: Optional[pulumi.Input[Optional[str]]] = None,
                insecure: Optional[pulumi.Input[Optional[bool]]] = None,
                max_delay_ms: Optional[pulumi.Input[Optional[int]]] = None,
                method: Optional[pulumi.Input[Optional[str]]] = None,
                min_delay_ms: Optional[pulumi.Input[Optional[int]]] = None,
                request_body: Optional[pulumi.Input[Optional[str]]] = None,
                request_headers: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                request_timeout_ms: Optional[pulumi.Input[Optional[int]]] = None,
                url: Optional[pulumi.Input[str]] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[HttpResult]:
    """
    Performs an HTTP request and returns the response.
    """
    ...
