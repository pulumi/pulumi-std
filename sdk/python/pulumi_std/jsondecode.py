# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'JsondecodeResult',
    'AwaitableJsondecodeResult',
    'jsondecode',
    'jsondecode_output',
]

@pulumi.output_type
class JsondecodeResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, dict):
            raise TypeError("Expected argument 'result' to be a dict")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> Any:
        return pulumi.get(self, "result")


class AwaitableJsondecodeResult(JsondecodeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return JsondecodeResult(
            result=self.result)


def jsondecode(input: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableJsondecodeResult:
    """
    Interprets a given string as JSON and returns a represetation
    	of the result of decoding that string.
    	If input is not valid JSON, the result will be the input unchanged.
    """
    __args__ = dict()
    __args__['input'] = input
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('std:index:jsondecode', __args__, opts=opts, typ=JsondecodeResult).value

    return AwaitableJsondecodeResult(
        result=pulumi.get(__ret__, 'result'))
def jsondecode_output(input: Optional[pulumi.Input[str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[JsondecodeResult]:
    """
    Interprets a given string as JSON and returns a represetation
    	of the result of decoding that string.
    	If input is not valid JSON, the result will be the input unchanged.
    """
    __args__ = dict()
    __args__['input'] = input
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('std:index:jsondecode', __args__, opts=opts, typ=JsondecodeResult)
    return __ret__.apply(lambda __response__: JsondecodeResult(
        result=pulumi.get(__response__, 'result')))
