// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns a JSON-encoded representation of the given value,
// which can contain arbitrarily-nested lists and maps.
// Note that if the value is a string then its value will be placed in quotes.
func Jsonencode(ctx *pulumi.Context, args *JsonencodeArgs, opts ...pulumi.InvokeOption) (*JsonencodeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv JsonencodeResult
	err := ctx.Invoke("std:index:jsonencode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type JsonencodeArgs struct {
	Input interface{} `pulumi:"input"`
}

type JsonencodeResult struct {
	Result string `pulumi:"result"`
}

func JsonencodeOutput(ctx *pulumi.Context, args JsonencodeOutputArgs, opts ...pulumi.InvokeOption) JsonencodeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (JsonencodeResult, error) {
			args := v.(JsonencodeArgs)
			r, err := Jsonencode(ctx, &args, opts...)
			var s JsonencodeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(JsonencodeResultOutput)
}

type JsonencodeOutputArgs struct {
	Input pulumi.Input `pulumi:"input"`
}

func (JsonencodeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonencodeArgs)(nil)).Elem()
}

type JsonencodeResultOutput struct{ *pulumi.OutputState }

func (JsonencodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonencodeResult)(nil)).Elem()
}

func (o JsonencodeResultOutput) ToJsonencodeResultOutput() JsonencodeResultOutput {
	return o
}

func (o JsonencodeResultOutput) ToJsonencodeResultOutputWithContext(ctx context.Context) JsonencodeResultOutput {
	return o
}

func (o JsonencodeResultOutput) ToOutput(ctx context.Context) pulumix.Output[JsonencodeResult] {
	return pulumix.Output[JsonencodeResult]{
		OutputState: o.OutputState,
	}
}

func (o JsonencodeResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v JsonencodeResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(JsonencodeResultOutput{})
}
