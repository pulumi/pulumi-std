// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Flattens lists of lists down to a flat list of primitive values,
// eliminating any nested lists recursively.
func Flatten(ctx *pulumi.Context, args *FlattenArgs, opts ...pulumi.InvokeOption) (*FlattenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FlattenResult
	err := ctx.Invoke("std:index:flatten", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FlattenArgs struct {
	Input []interface{} `pulumi:"input"`
}

type FlattenResult struct {
	Result []interface{} `pulumi:"result"`
}

func FlattenOutput(ctx *pulumi.Context, args FlattenOutputArgs, opts ...pulumi.InvokeOption) FlattenResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FlattenResult, error) {
			args := v.(FlattenArgs)
			r, err := Flatten(ctx, &args, opts...)
			var s FlattenResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(FlattenResultOutput)
}

type FlattenOutputArgs struct {
	Input pulumi.ArrayInput `pulumi:"input"`
}

func (FlattenOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlattenArgs)(nil)).Elem()
}

type FlattenResultOutput struct{ *pulumi.OutputState }

func (FlattenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlattenResult)(nil)).Elem()
}

func (o FlattenResultOutput) ToFlattenResultOutput() FlattenResultOutput {
	return o
}

func (o FlattenResultOutput) ToFlattenResultOutputWithContext(ctx context.Context) FlattenResultOutput {
	return o
}

func (o FlattenResultOutput) ToOutput(ctx context.Context) pulumix.Output[FlattenResult] {
	return pulumix.Output[FlattenResult]{
		OutputState: o.OutputState,
	}
}

func (o FlattenResultOutput) Result() pulumi.ArrayOutput {
	return o.ApplyT(func(v FlattenResult) []interface{} { return v.Result }).(pulumi.ArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(FlattenResultOutput{})
}
