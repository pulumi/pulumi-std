// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns true if any of the elements in a given collection are true or \"true\".
// It also returns false if the collection is empty.
func Anytrue(ctx *pulumi.Context, args *AnytrueArgs, opts ...pulumi.InvokeOption) (*AnytrueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv AnytrueResult
	err := ctx.Invoke("std:index:anytrue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type AnytrueArgs struct {
	Input []interface{} `pulumi:"input"`
}

type AnytrueResult struct {
	Result bool `pulumi:"result"`
}

func AnytrueOutput(ctx *pulumi.Context, args AnytrueOutputArgs, opts ...pulumi.InvokeOption) AnytrueResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (AnytrueResult, error) {
			args := v.(AnytrueArgs)
			r, err := Anytrue(ctx, &args, opts...)
			var s AnytrueResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(AnytrueResultOutput)
}

type AnytrueOutputArgs struct {
	Input pulumi.ArrayInput `pulumi:"input"`
}

func (AnytrueOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AnytrueArgs)(nil)).Elem()
}

type AnytrueResultOutput struct{ *pulumi.OutputState }

func (AnytrueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnytrueResult)(nil)).Elem()
}

func (o AnytrueResultOutput) ToAnytrueResultOutput() AnytrueResultOutput {
	return o
}

func (o AnytrueResultOutput) ToAnytrueResultOutputWithContext(ctx context.Context) AnytrueResultOutput {
	return o
}

func (o AnytrueResultOutput) ToOutput(ctx context.Context) pulumix.Output[AnytrueResult] {
	return pulumix.Output[AnytrueResult]{
		OutputState: o.OutputState,
	}
}

func (o AnytrueResultOutput) Result() pulumi.BoolOutput {
	return o.ApplyT(func(v AnytrueResult) bool { return v.Result }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(AnytrueResultOutput{})
}
