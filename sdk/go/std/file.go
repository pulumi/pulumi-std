// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Reads the contents of a file into the string.
func File(ctx *pulumi.Context, args *FileArgs, opts ...pulumi.InvokeOption) (*FileResult, error) {
	var rv FileResult
	err := ctx.Invoke("std:index:file", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FileArgs struct {
	Input string `pulumi:"input"`
}

type FileResult struct {
	Result string `pulumi:"result"`
}

func FileOutput(ctx *pulumi.Context, args FileOutputArgs, opts ...pulumi.InvokeOption) FileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FileResult, error) {
			args := v.(FileArgs)
			r, err := File(ctx, &args, opts...)
			var s FileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(FileResultOutput)
}

type FileOutputArgs struct {
	Input pulumi.StringInput `pulumi:"input"`
}

func (FileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileArgs)(nil)).Elem()
}

type FileResultOutput struct{ *pulumi.OutputState }

func (FileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileResult)(nil)).Elem()
}

func (o FileResultOutput) ToFileResultOutput() FileResultOutput {
	return o
}

func (o FileResultOutput) ToFileResultOutputWithContext(ctx context.Context) FileResultOutput {
	return o
}

func (o FileResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v FileResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FileResultOutput{})
}
