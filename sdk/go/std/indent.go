// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Adds a given number of spaces after each newline character in the given string.
func Indent(ctx *pulumi.Context, args *IndentArgs, opts ...pulumi.InvokeOption) (*IndentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv IndentResult
	err := ctx.Invoke("std:index:indent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type IndentArgs struct {
	Input  string `pulumi:"input"`
	Spaces int    `pulumi:"spaces"`
}

type IndentResult struct {
	Result string `pulumi:"result"`
}

func IndentOutput(ctx *pulumi.Context, args IndentOutputArgs, opts ...pulumi.InvokeOption) IndentResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (IndentResult, error) {
			args := v.(IndentArgs)
			r, err := Indent(ctx, &args, opts...)
			var s IndentResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(IndentResultOutput)
}

type IndentOutputArgs struct {
	Input  pulumi.StringInput `pulumi:"input"`
	Spaces pulumi.IntInput    `pulumi:"spaces"`
}

func (IndentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndentArgs)(nil)).Elem()
}

type IndentResultOutput struct{ *pulumi.OutputState }

func (IndentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndentResult)(nil)).Elem()
}

func (o IndentResultOutput) ToIndentResultOutput() IndentResultOutput {
	return o
}

func (o IndentResultOutput) ToIndentResultOutputWithContext(ctx context.Context) IndentResultOutput {
	return o
}

func (o IndentResultOutput) ToOutput(ctx context.Context) pulumix.Output[IndentResult] {
	return pulumix.Output[IndentResult]{
		OutputState: o.OutputState,
	}
}

func (o IndentResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v IndentResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(IndentResultOutput{})
}
