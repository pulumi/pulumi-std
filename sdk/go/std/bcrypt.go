// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the Blowfish encrypted hash of the string at the given cost.
// A default cost of 10 will be used if not provided.
func Bcrypt(ctx *pulumi.Context, args *BcryptArgs, opts ...pulumi.InvokeOption) (*BcryptResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv BcryptResult
	err := ctx.Invoke("std:index:bcrypt", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type BcryptArgs struct {
	Cost  *int   `pulumi:"cost"`
	Input string `pulumi:"input"`
}

type BcryptResult struct {
	Result string `pulumi:"result"`
}

func BcryptOutput(ctx *pulumi.Context, args BcryptOutputArgs, opts ...pulumi.InvokeOption) BcryptResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (BcryptResultOutput, error) {
			args := v.(BcryptArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("std:index:bcrypt", args, BcryptResultOutput{}, options).(BcryptResultOutput), nil
		}).(BcryptResultOutput)
}

type BcryptOutputArgs struct {
	Cost  pulumi.IntPtrInput `pulumi:"cost"`
	Input pulumi.StringInput `pulumi:"input"`
}

func (BcryptOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BcryptArgs)(nil)).Elem()
}

type BcryptResultOutput struct{ *pulumi.OutputState }

func (BcryptResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BcryptResult)(nil)).Elem()
}

func (o BcryptResultOutput) ToBcryptResultOutput() BcryptResultOutput {
	return o
}

func (o BcryptResultOutput) ToBcryptResultOutputWithContext(ctx context.Context) BcryptResultOutput {
	return o
}

func (o BcryptResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v BcryptResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(BcryptResultOutput{})
}
