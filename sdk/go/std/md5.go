// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns a (conventional) hexadecimal representation of the MD5 hash of the given string.
func Md5(ctx *pulumi.Context, args *Md5Args, opts ...pulumi.InvokeOption) (*Md5Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv Md5Result
	err := ctx.Invoke("std:index:md5", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type Md5Args struct {
	Input string `pulumi:"input"`
}

type Md5Result struct {
	Result string `pulumi:"result"`
}

func Md5Output(ctx *pulumi.Context, args Md5OutputArgs, opts ...pulumi.InvokeOption) Md5ResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (Md5Result, error) {
			args := v.(Md5Args)
			r, err := Md5(ctx, &args, opts...)
			var s Md5Result
			if r != nil {
				s = *r
			}
			return s, err
		}).(Md5ResultOutput)
}

type Md5OutputArgs struct {
	Input pulumi.StringInput `pulumi:"input"`
}

func (Md5OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Md5Args)(nil)).Elem()
}

type Md5ResultOutput struct{ *pulumi.OutputState }

func (Md5ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Md5Result)(nil)).Elem()
}

func (o Md5ResultOutput) ToMd5ResultOutput() Md5ResultOutput {
	return o
}

func (o Md5ResultOutput) ToMd5ResultOutputWithContext(ctx context.Context) Md5ResultOutput {
	return o
}

func (o Md5ResultOutput) ToOutput(ctx context.Context) pulumix.Output[Md5Result] {
	return pulumix.Output[Md5Result]{
		OutputState: o.OutputState,
	}
}

func (o Md5ResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v Md5Result) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(Md5ResultOutput{})
}
