// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns all but the last element of path, typically the path's directory.
func Dirname(ctx *pulumi.Context, args *DirnameArgs, opts ...pulumi.InvokeOption) (*DirnameResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv DirnameResult
	err := ctx.Invoke("std:index:dirname", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type DirnameArgs struct {
	Input string `pulumi:"input"`
}

type DirnameResult struct {
	Result string `pulumi:"result"`
}

func DirnameOutput(ctx *pulumi.Context, args DirnameOutputArgs, opts ...pulumi.InvokeOption) DirnameResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (DirnameResult, error) {
			args := v.(DirnameArgs)
			r, err := Dirname(ctx, &args, opts...)
			var s DirnameResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(DirnameResultOutput)
}

type DirnameOutputArgs struct {
	Input pulumi.StringInput `pulumi:"input"`
}

func (DirnameOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DirnameArgs)(nil)).Elem()
}

type DirnameResultOutput struct{ *pulumi.OutputState }

func (DirnameResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DirnameResult)(nil)).Elem()
}

func (o DirnameResultOutput) ToDirnameResultOutput() DirnameResultOutput {
	return o
}

func (o DirnameResultOutput) ToDirnameResultOutputWithContext(ctx context.Context) DirnameResultOutput {
	return o
}

func (o DirnameResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v DirnameResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(DirnameResultOutput{})
}
