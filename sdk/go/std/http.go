// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Performs an HTTP request and returns the response.
func Http(ctx *pulumi.Context, args *HttpArgs, opts ...pulumi.InvokeOption) (*HttpResult, error) {
	var rv HttpResult
	err := ctx.Invoke("std:index:http", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type HttpArgs struct {
	Attempts         *int              `pulumi:"attempts"`
	CaCertPem        *string           `pulumi:"caCertPem"`
	Insecure         *bool             `pulumi:"insecure"`
	MaxDelayMs       *int              `pulumi:"maxDelayMs"`
	Method           *string           `pulumi:"method"`
	MinDelayMs       *int              `pulumi:"minDelayMs"`
	RequestBody      *string           `pulumi:"requestBody"`
	RequestHeaders   map[string]string `pulumi:"requestHeaders"`
	RequestTimeoutMs *int              `pulumi:"requestTimeoutMs"`
	Url              string            `pulumi:"url"`
}

type HttpResult struct {
	Id                 string            `pulumi:"id"`
	ResponseBody       string            `pulumi:"responseBody"`
	ResponseBodyBase64 string            `pulumi:"responseBodyBase64"`
	ResponseHeaders    map[string]string `pulumi:"responseHeaders"`
	StatusCode         int               `pulumi:"statusCode"`
}

func HttpOutput(ctx *pulumi.Context, args HttpOutputArgs, opts ...pulumi.InvokeOption) HttpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (HttpResult, error) {
			args := v.(HttpArgs)
			r, err := Http(ctx, &args, opts...)
			var s HttpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(HttpResultOutput)
}

type HttpOutputArgs struct {
	Attempts         pulumi.IntPtrInput    `pulumi:"attempts"`
	CaCertPem        pulumi.StringPtrInput `pulumi:"caCertPem"`
	Insecure         pulumi.BoolPtrInput   `pulumi:"insecure"`
	MaxDelayMs       pulumi.IntPtrInput    `pulumi:"maxDelayMs"`
	Method           pulumi.StringPtrInput `pulumi:"method"`
	MinDelayMs       pulumi.IntPtrInput    `pulumi:"minDelayMs"`
	RequestBody      pulumi.StringPtrInput `pulumi:"requestBody"`
	RequestHeaders   pulumi.StringMapInput `pulumi:"requestHeaders"`
	RequestTimeoutMs pulumi.IntPtrInput    `pulumi:"requestTimeoutMs"`
	Url              pulumi.StringInput    `pulumi:"url"`
}

func (HttpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpArgs)(nil)).Elem()
}

type HttpResultOutput struct{ *pulumi.OutputState }

func (HttpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HttpResult)(nil)).Elem()
}

func (o HttpResultOutput) ToHttpResultOutput() HttpResultOutput {
	return o
}

func (o HttpResultOutput) ToHttpResultOutputWithContext(ctx context.Context) HttpResultOutput {
	return o
}

func (o HttpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v HttpResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o HttpResultOutput) ResponseBody() pulumi.StringOutput {
	return o.ApplyT(func(v HttpResult) string { return v.ResponseBody }).(pulumi.StringOutput)
}

func (o HttpResultOutput) ResponseBodyBase64() pulumi.StringOutput {
	return o.ApplyT(func(v HttpResult) string { return v.ResponseBodyBase64 }).(pulumi.StringOutput)
}

func (o HttpResultOutput) ResponseHeaders() pulumi.StringMapOutput {
	return o.ApplyT(func(v HttpResult) map[string]string { return v.ResponseHeaders }).(pulumi.StringMapOutput)
}

func (o HttpResultOutput) StatusCode() pulumi.IntOutput {
	return o.ApplyT(func(v HttpResult) int { return v.StatusCode }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(HttpResultOutput{})
}
