// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Joins the list with the delimiter for a resultant string.
func Join(ctx *pulumi.Context, args *JoinArgs, opts ...pulumi.InvokeOption) (*JoinResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv JoinResult
	err := ctx.Invoke("std:index:join", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type JoinArgs struct {
	Input     []string `pulumi:"input"`
	Separator string   `pulumi:"separator"`
}

type JoinResult struct {
	Result string `pulumi:"result"`
}

func JoinOutput(ctx *pulumi.Context, args JoinOutputArgs, opts ...pulumi.InvokeOption) JoinResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (JoinResult, error) {
			args := v.(JoinArgs)
			r, err := Join(ctx, &args, opts...)
			var s JoinResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(JoinResultOutput)
}

type JoinOutputArgs struct {
	Input     pulumi.StringArrayInput `pulumi:"input"`
	Separator pulumi.StringInput      `pulumi:"separator"`
}

func (JoinOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinArgs)(nil)).Elem()
}

type JoinResultOutput struct{ *pulumi.OutputState }

func (JoinResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinResult)(nil)).Elem()
}

func (o JoinResultOutput) ToJoinResultOutput() JoinResultOutput {
	return o
}

func (o JoinResultOutput) ToJoinResultOutputWithContext(ctx context.Context) JoinResultOutput {
	return o
}

func (o JoinResultOutput) ToOutput(ctx context.Context) pulumix.Output[JoinResult] {
	return pulumix.Output[JoinResult]{
		OutputState: o.OutputState,
	}
}

func (o JoinResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v JoinResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(JoinResultOutput{})
}
