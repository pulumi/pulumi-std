// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Removes empty and nil string elements from a list.
func Compact(ctx *pulumi.Context, args *CompactArgs, opts ...pulumi.InvokeOption) (*CompactResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CompactResult
	err := ctx.Invoke("std:index:compact", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CompactArgs struct {
	Input []interface{} `pulumi:"input"`
}

type CompactResult struct {
	Result []string `pulumi:"result"`
}

func CompactOutput(ctx *pulumi.Context, args CompactOutputArgs, opts ...pulumi.InvokeOption) CompactResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (CompactResultOutput, error) {
			args := v.(CompactArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("std:index:compact", args, CompactResultOutput{}, options).(CompactResultOutput), nil
		}).(CompactResultOutput)
}

type CompactOutputArgs struct {
	Input pulumi.ArrayInput `pulumi:"input"`
}

func (CompactOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CompactArgs)(nil)).Elem()
}

type CompactResultOutput struct{ *pulumi.OutputState }

func (CompactResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompactResult)(nil)).Elem()
}

func (o CompactResultOutput) ToCompactResultOutput() CompactResultOutput {
	return o
}

func (o CompactResultOutput) ToCompactResultOutputWithContext(ctx context.Context) CompactResultOutput {
	return o
}

func (o CompactResultOutput) Result() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CompactResult) []string { return v.Result }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(CompactResultOutput{})
}
