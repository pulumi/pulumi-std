// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns a hexadecimal representation of the SHA-1 hash of the given string.
func Sha1(ctx *pulumi.Context, args *Sha1Args, opts ...pulumi.InvokeOption) (*Sha1Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv Sha1Result
	err := ctx.Invoke("std:index:sha1", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type Sha1Args struct {
	Input string `pulumi:"input"`
}

type Sha1Result struct {
	Result string `pulumi:"result"`
}

func Sha1Output(ctx *pulumi.Context, args Sha1OutputArgs, opts ...pulumi.InvokeOption) Sha1ResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (Sha1Result, error) {
			args := v.(Sha1Args)
			r, err := Sha1(ctx, &args, opts...)
			var s Sha1Result
			if r != nil {
				s = *r
			}
			return s, err
		}).(Sha1ResultOutput)
}

type Sha1OutputArgs struct {
	Input pulumi.StringInput `pulumi:"input"`
}

func (Sha1OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Sha1Args)(nil)).Elem()
}

type Sha1ResultOutput struct{ *pulumi.OutputState }

func (Sha1ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Sha1Result)(nil)).Elem()
}

func (o Sha1ResultOutput) ToSha1ResultOutput() Sha1ResultOutput {
	return o
}

func (o Sha1ResultOutput) ToSha1ResultOutputWithContext(ctx context.Context) Sha1ResultOutput {
	return o
}

func (o Sha1ResultOutput) ToOutput(ctx context.Context) pulumix.Output[Sha1Result] {
	return pulumix.Output[Sha1Result]{
		OutputState: o.OutputState,
	}
}

func (o Sha1ResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v Sha1Result) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(Sha1ResultOutput{})
}
