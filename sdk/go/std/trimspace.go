// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Removes any space characters from the start and end of the given string,
//
//	following the Unicode definition of \"space\" (i.e. spaces, tabs, newline, etc.).
func Trimspace(ctx *pulumi.Context, args *TrimspaceArgs, opts ...pulumi.InvokeOption) (*TrimspaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv TrimspaceResult
	err := ctx.Invoke("std:index:trimspace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TrimspaceArgs struct {
	Input string `pulumi:"input"`
}

type TrimspaceResult struct {
	Result string `pulumi:"result"`
}

func TrimspaceOutput(ctx *pulumi.Context, args TrimspaceOutputArgs, opts ...pulumi.InvokeOption) TrimspaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (TrimspaceResult, error) {
			args := v.(TrimspaceArgs)
			r, err := Trimspace(ctx, &args, opts...)
			var s TrimspaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(TrimspaceResultOutput)
}

type TrimspaceOutputArgs struct {
	Input pulumi.StringInput `pulumi:"input"`
}

func (TrimspaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrimspaceArgs)(nil)).Elem()
}

type TrimspaceResultOutput struct{ *pulumi.OutputState }

func (TrimspaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrimspaceResult)(nil)).Elem()
}

func (o TrimspaceResultOutput) ToTrimspaceResultOutput() TrimspaceResultOutput {
	return o
}

func (o TrimspaceResultOutput) ToTrimspaceResultOutputWithContext(ctx context.Context) TrimspaceResultOutput {
	return o
}

func (o TrimspaceResultOutput) ToOutput(ctx context.Context) pulumix.Output[TrimspaceResult] {
	return pulumix.Output[TrimspaceResult]{
		OutputState: o.OutputState,
	}
}

func (o TrimspaceResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v TrimspaceResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(TrimspaceResultOutput{})
}
