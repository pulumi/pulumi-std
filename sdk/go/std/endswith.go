// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Determines if the input string ends with the suffix.
func Endswith(ctx *pulumi.Context, args *EndswithArgs, opts ...pulumi.InvokeOption) (*EndswithResult, error) {
	var rv EndswithResult
	err := ctx.Invoke("std:index:endswith", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type EndswithArgs struct {
	Input  string `pulumi:"input"`
	Suffix string `pulumi:"suffix"`
}

type EndswithResult struct {
	Result bool `pulumi:"result"`
}

func EndswithOutput(ctx *pulumi.Context, args EndswithOutputArgs, opts ...pulumi.InvokeOption) EndswithResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (EndswithResult, error) {
			args := v.(EndswithArgs)
			r, err := Endswith(ctx, &args, opts...)
			var s EndswithResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(EndswithResultOutput)
}

type EndswithOutputArgs struct {
	Input  pulumi.StringInput `pulumi:"input"`
	Suffix pulumi.StringInput `pulumi:"suffix"`
}

func (EndswithOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndswithArgs)(nil)).Elem()
}

type EndswithResultOutput struct{ *pulumi.OutputState }

func (EndswithResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndswithResult)(nil)).Elem()
}

func (o EndswithResultOutput) ToEndswithResultOutput() EndswithResultOutput {
	return o
}

func (o EndswithResultOutput) ToEndswithResultOutputWithContext(ctx context.Context) EndswithResultOutput {
	return o
}

func (o EndswithResultOutput) Result() pulumi.BoolOutput {
	return o.ApplyT(func(v EndswithResult) bool { return v.Result }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(EndswithResultOutput{})
}
