// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns true if all elements in a given collection are true or \"true\".
// It also returns true if the collection is empty.
func Alltrue(ctx *pulumi.Context, args *AlltrueArgs, opts ...pulumi.InvokeOption) (*AlltrueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv AlltrueResult
	err := ctx.Invoke("std:index:alltrue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type AlltrueArgs struct {
	Input []interface{} `pulumi:"input"`
}

type AlltrueResult struct {
	Result bool `pulumi:"result"`
}

func AlltrueOutput(ctx *pulumi.Context, args AlltrueOutputArgs, opts ...pulumi.InvokeOption) AlltrueResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (AlltrueResult, error) {
			args := v.(AlltrueArgs)
			r, err := Alltrue(ctx, &args, opts...)
			var s AlltrueResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(AlltrueResultOutput)
}

type AlltrueOutputArgs struct {
	Input pulumi.ArrayInput `pulumi:"input"`
}

func (AlltrueOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlltrueArgs)(nil)).Elem()
}

type AlltrueResultOutput struct{ *pulumi.OutputState }

func (AlltrueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlltrueResult)(nil)).Elem()
}

func (o AlltrueResultOutput) ToAlltrueResultOutput() AlltrueResultOutput {
	return o
}

func (o AlltrueResultOutput) ToAlltrueResultOutputWithContext(ctx context.Context) AlltrueResultOutput {
	return o
}

func (o AlltrueResultOutput) Result() pulumi.BoolOutput {
	return o.ApplyT(func(v AlltrueResult) bool { return v.Result }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(AlltrueResultOutput{})
}
