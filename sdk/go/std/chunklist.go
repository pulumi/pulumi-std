// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Splits a single list into multiple lists where each has at most the given number of elements.
func Chunklist(ctx *pulumi.Context, args *ChunklistArgs, opts ...pulumi.InvokeOption) (*ChunklistResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ChunklistResult
	err := ctx.Invoke("std:index:chunklist", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ChunklistArgs struct {
	Input []interface{} `pulumi:"input"`
	Size  int           `pulumi:"size"`
}

type ChunklistResult struct {
	Result []interface{} `pulumi:"result"`
}

func ChunklistOutput(ctx *pulumi.Context, args ChunklistOutputArgs, opts ...pulumi.InvokeOption) ChunklistResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ChunklistResult, error) {
			args := v.(ChunklistArgs)
			r, err := Chunklist(ctx, &args, opts...)
			var s ChunklistResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ChunklistResultOutput)
}

type ChunklistOutputArgs struct {
	Input pulumi.ArrayInput `pulumi:"input"`
	Size  pulumi.IntInput   `pulumi:"size"`
}

func (ChunklistOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChunklistArgs)(nil)).Elem()
}

type ChunklistResultOutput struct{ *pulumi.OutputState }

func (ChunklistResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChunklistResult)(nil)).Elem()
}

func (o ChunklistResultOutput) ToChunklistResultOutput() ChunklistResultOutput {
	return o
}

func (o ChunklistResultOutput) ToChunklistResultOutputWithContext(ctx context.Context) ChunklistResultOutput {
	return o
}

func (o ChunklistResultOutput) ToOutput(ctx context.Context) pulumix.Output[ChunklistResult] {
	return pulumix.Output[ChunklistResult]{
		OutputState: o.OutputState,
	}
}

func (o ChunklistResultOutput) Result() pulumi.ArrayOutput {
	return o.ApplyT(func(v ChunklistResult) []interface{} { return v.Result }).(pulumi.ArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(ChunklistResultOutput{})
}
