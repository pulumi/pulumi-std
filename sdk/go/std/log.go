// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns the greatest integer value less than or equal to the argument.
func Log(ctx *pulumi.Context, args *LogArgs, opts ...pulumi.InvokeOption) (*LogResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LogResult
	err := ctx.Invoke("std:index:log", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LogArgs struct {
	Base  float64 `pulumi:"base"`
	Input float64 `pulumi:"input"`
}

type LogResult struct {
	Result float64 `pulumi:"result"`
}

func LogOutput(ctx *pulumi.Context, args LogOutputArgs, opts ...pulumi.InvokeOption) LogResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LogResult, error) {
			args := v.(LogArgs)
			r, err := Log(ctx, &args, opts...)
			var s LogResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LogResultOutput)
}

type LogOutputArgs struct {
	Base  pulumi.Float64Input `pulumi:"base"`
	Input pulumi.Float64Input `pulumi:"input"`
}

func (LogOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LogArgs)(nil)).Elem()
}

type LogResultOutput struct{ *pulumi.OutputState }

func (LogResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogResult)(nil)).Elem()
}

func (o LogResultOutput) ToLogResultOutput() LogResultOutput {
	return o
}

func (o LogResultOutput) ToLogResultOutputWithContext(ctx context.Context) LogResultOutput {
	return o
}

func (o LogResultOutput) ToOutput(ctx context.Context) pulumix.Output[LogResult] {
	return pulumix.Output[LogResult]{
		OutputState: o.OutputState,
	}
}

func (o LogResultOutput) Result() pulumi.Float64Output {
	return o.ApplyT(func(v LogResult) float64 { return v.Result }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterOutputType(LogResultOutput{})
}
