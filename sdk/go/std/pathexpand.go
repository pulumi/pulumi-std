// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a filepath string with ~ expanded to the home directory.
func Pathexpand(ctx *pulumi.Context, args *PathexpandArgs, opts ...pulumi.InvokeOption) (*PathexpandResult, error) {
	var rv PathexpandResult
	err := ctx.Invoke("std:index:pathexpand", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type PathexpandArgs struct {
	Input string `pulumi:"input"`
}

type PathexpandResult struct {
	Result string `pulumi:"result"`
}

func PathexpandOutput(ctx *pulumi.Context, args PathexpandOutputArgs, opts ...pulumi.InvokeOption) PathexpandResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (PathexpandResult, error) {
			args := v.(PathexpandArgs)
			r, err := Pathexpand(ctx, &args, opts...)
			var s PathexpandResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(PathexpandResultOutput)
}

type PathexpandOutputArgs struct {
	Input pulumi.StringInput `pulumi:"input"`
}

func (PathexpandOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PathexpandArgs)(nil)).Elem()
}

type PathexpandResultOutput struct{ *pulumi.OutputState }

func (PathexpandResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathexpandResult)(nil)).Elem()
}

func (o PathexpandResultOutput) ToPathexpandResultOutput() PathexpandResultOutput {
	return o
}

func (o PathexpandResultOutput) ToPathexpandResultOutputWithContext(ctx context.Context) PathexpandResultOutput {
	return o
}

func (o PathexpandResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v PathexpandResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(PathexpandResultOutput{})
}
