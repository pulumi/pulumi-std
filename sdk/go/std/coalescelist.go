// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns the first non-empty list from the given list of lists.
func Coalescelist(ctx *pulumi.Context, args *CoalescelistArgs, opts ...pulumi.InvokeOption) (*CoalescelistResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CoalescelistResult
	err := ctx.Invoke("std:index:coalescelist", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CoalescelistArgs struct {
	Input [][]interface{} `pulumi:"input"`
}

type CoalescelistResult struct {
	Result []interface{} `pulumi:"result"`
}

func CoalescelistOutput(ctx *pulumi.Context, args CoalescelistOutputArgs, opts ...pulumi.InvokeOption) CoalescelistResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (CoalescelistResult, error) {
			args := v.(CoalescelistArgs)
			r, err := Coalescelist(ctx, &args, opts...)
			var s CoalescelistResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(CoalescelistResultOutput)
}

type CoalescelistOutputArgs struct {
	Input pulumi.ArrayArrayInput `pulumi:"input"`
}

func (CoalescelistOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CoalescelistArgs)(nil)).Elem()
}

type CoalescelistResultOutput struct{ *pulumi.OutputState }

func (CoalescelistResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoalescelistResult)(nil)).Elem()
}

func (o CoalescelistResultOutput) ToCoalescelistResultOutput() CoalescelistResultOutput {
	return o
}

func (o CoalescelistResultOutput) ToCoalescelistResultOutputWithContext(ctx context.Context) CoalescelistResultOutput {
	return o
}

func (o CoalescelistResultOutput) ToOutput(ctx context.Context) pulumix.Output[CoalescelistResult] {
	return pulumix.Output[CoalescelistResult]{
		OutputState: o.OutputState,
	}
}

func (o CoalescelistResultOutput) Result() pulumi.ArrayOutput {
	return o.ApplyT(func(v CoalescelistResult) []interface{} { return v.Result }).(pulumi.ArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(CoalescelistResultOutput{})
}
