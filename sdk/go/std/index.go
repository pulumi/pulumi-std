// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Finds the index of a given element in a list.
func Index(ctx *pulumi.Context, args *IndexArgs, opts ...pulumi.InvokeOption) (*IndexResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv IndexResult
	err := ctx.Invoke("std:index:index", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type IndexArgs struct {
	Element interface{}   `pulumi:"element"`
	Input   []interface{} `pulumi:"input"`
}

type IndexResult struct {
	Result int `pulumi:"result"`
}

func IndexOutput(ctx *pulumi.Context, args IndexOutputArgs, opts ...pulumi.InvokeOption) IndexResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (IndexResult, error) {
			args := v.(IndexArgs)
			r, err := Index(ctx, &args, opts...)
			var s IndexResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(IndexResultOutput)
}

type IndexOutputArgs struct {
	Element pulumi.Input      `pulumi:"element"`
	Input   pulumi.ArrayInput `pulumi:"input"`
}

func (IndexOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexArgs)(nil)).Elem()
}

type IndexResultOutput struct{ *pulumi.OutputState }

func (IndexResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexResult)(nil)).Elem()
}

func (o IndexResultOutput) ToIndexResultOutput() IndexResultOutput {
	return o
}

func (o IndexResultOutput) ToIndexResultOutputWithContext(ctx context.Context) IndexResultOutput {
	return o
}

func (o IndexResultOutput) ToOutput(ctx context.Context) pulumix.Output[IndexResult] {
	return pulumix.Output[IndexResult]{
		OutputState: o.OutputState,
	}
}

func (o IndexResultOutput) Result() pulumi.IntOutput {
	return o.ApplyT(func(v IndexResult) int { return v.Result }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(IndexResultOutput{})
}
