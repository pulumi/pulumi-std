// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Removes duplicate items from a list.
func Distinct(ctx *pulumi.Context, args *DistinctArgs, opts ...pulumi.InvokeOption) (*DistinctResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv DistinctResult
	err := ctx.Invoke("std:index:distinct", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type DistinctArgs struct {
	Input []interface{} `pulumi:"input"`
}

type DistinctResult struct {
	Result []interface{} `pulumi:"result"`
}

func DistinctOutput(ctx *pulumi.Context, args DistinctOutputArgs, opts ...pulumi.InvokeOption) DistinctResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (DistinctResult, error) {
			args := v.(DistinctArgs)
			r, err := Distinct(ctx, &args, opts...)
			var s DistinctResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(DistinctResultOutput)
}

type DistinctOutputArgs struct {
	Input pulumi.ArrayInput `pulumi:"input"`
}

func (DistinctOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DistinctArgs)(nil)).Elem()
}

type DistinctResultOutput struct{ *pulumi.OutputState }

func (DistinctResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistinctResult)(nil)).Elem()
}

func (o DistinctResultOutput) ToDistinctResultOutput() DistinctResultOutput {
	return o
}

func (o DistinctResultOutput) ToDistinctResultOutputWithContext(ctx context.Context) DistinctResultOutput {
	return o
}

func (o DistinctResultOutput) Result() pulumi.ArrayOutput {
	return o.ApplyT(func(v DistinctResult) []interface{} { return v.Result }).(pulumi.ArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(DistinctResultOutput{})
}
