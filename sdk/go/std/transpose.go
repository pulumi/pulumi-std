// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Takes a map of lists of strings and swaps the keys and values to return a new map of lists of strings.
func Transpose(ctx *pulumi.Context, args *TransposeArgs, opts ...pulumi.InvokeOption) (*TransposeResult, error) {
	var rv TransposeResult
	err := ctx.Invoke("std:index:transpose", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TransposeArgs struct {
	Input map[string][]string `pulumi:"input"`
}

type TransposeResult struct {
	Result map[string][]string `pulumi:"result"`
}

func TransposeOutput(ctx *pulumi.Context, args TransposeOutputArgs, opts ...pulumi.InvokeOption) TransposeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (TransposeResult, error) {
			args := v.(TransposeArgs)
			r, err := Transpose(ctx, &args, opts...)
			var s TransposeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(TransposeResultOutput)
}

type TransposeOutputArgs struct {
	Input pulumi.StringArrayMapInput `pulumi:"input"`
}

func (TransposeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TransposeArgs)(nil)).Elem()
}

type TransposeResultOutput struct{ *pulumi.OutputState }

func (TransposeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TransposeResult)(nil)).Elem()
}

func (o TransposeResultOutput) ToTransposeResultOutput() TransposeResultOutput {
	return o
}

func (o TransposeResultOutput) ToTransposeResultOutputWithContext(ctx context.Context) TransposeResultOutput {
	return o
}

func (o TransposeResultOutput) Result() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v TransposeResult) map[string][]string { return v.Result }).(pulumi.StringArrayMapOutput)
}

func init() {
	pulumi.RegisterOutputType(TransposeResultOutput{})
}
