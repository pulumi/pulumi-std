// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Performs a dynamic lookup into a map variable.
func Lookup(ctx *pulumi.Context, args *LookupArgs, opts ...pulumi.InvokeOption) (*LookupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResult
	err := ctx.Invoke("std:index:lookup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupArgs struct {
	Default interface{}            `pulumi:"default"`
	Key     string                 `pulumi:"key"`
	Map     map[string]interface{} `pulumi:"map"`
}

type LookupResult struct {
	Result interface{} `pulumi:"result"`
}

func LookupOutput(ctx *pulumi.Context, args LookupOutputArgs, opts ...pulumi.InvokeOption) LookupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupResult, error) {
			args := v.(LookupArgs)
			r, err := Lookup(ctx, &args, opts...)
			var s LookupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupResultOutput)
}

type LookupOutputArgs struct {
	Default pulumi.Input       `pulumi:"default"`
	Key     pulumi.StringInput `pulumi:"key"`
	Map     pulumi.MapInput    `pulumi:"map"`
}

func (LookupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupArgs)(nil)).Elem()
}

type LookupResultOutput struct{ *pulumi.OutputState }

func (LookupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResult)(nil)).Elem()
}

func (o LookupResultOutput) ToLookupResultOutput() LookupResultOutput {
	return o
}

func (o LookupResultOutput) ToLookupResultOutputWithContext(ctx context.Context) LookupResultOutput {
	return o
}

func (o LookupResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupResult] {
	return pulumix.Output[LookupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupResultOutput) Result() pulumi.AnyOutput {
	return o.ApplyT(func(v LookupResult) interface{} { return v.Result }).(pulumi.AnyOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupResultOutput{})
}
