// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Determines the length of a given list, map, or string.
func Length(ctx *pulumi.Context, args *LengthArgs, opts ...pulumi.InvokeOption) (*LengthResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LengthResult
	err := ctx.Invoke("std:index:length", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LengthArgs struct {
	Input interface{} `pulumi:"input"`
}

type LengthResult struct {
	Result int `pulumi:"result"`
}

func LengthOutput(ctx *pulumi.Context, args LengthOutputArgs, opts ...pulumi.InvokeOption) LengthResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LengthResult, error) {
			args := v.(LengthArgs)
			r, err := Length(ctx, &args, opts...)
			var s LengthResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LengthResultOutput)
}

type LengthOutputArgs struct {
	Input pulumi.Input `pulumi:"input"`
}

func (LengthOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LengthArgs)(nil)).Elem()
}

type LengthResultOutput struct{ *pulumi.OutputState }

func (LengthResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LengthResult)(nil)).Elem()
}

func (o LengthResultOutput) ToLengthResultOutput() LengthResultOutput {
	return o
}

func (o LengthResultOutput) ToLengthResultOutputWithContext(ctx context.Context) LengthResultOutput {
	return o
}

func (o LengthResultOutput) Result() pulumi.IntOutput {
	return o.ApplyT(func(v LengthResult) int { return v.Result }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LengthResultOutput{})
}
