// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a lexically sorted list of the map keys.
func Keys(ctx *pulumi.Context, args *KeysArgs, opts ...pulumi.InvokeOption) (*KeysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv KeysResult
	err := ctx.Invoke("std:index:keys", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type KeysArgs struct {
	Input map[string]interface{} `pulumi:"input"`
}

type KeysResult struct {
	Result []string `pulumi:"result"`
}

func KeysOutput(ctx *pulumi.Context, args KeysOutputArgs, opts ...pulumi.InvokeOption) KeysResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (KeysResultOutput, error) {
			args := v.(KeysArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("std:index:keys", args, KeysResultOutput{}, options).(KeysResultOutput), nil
		}).(KeysResultOutput)
}

type KeysOutputArgs struct {
	Input pulumi.MapInput `pulumi:"input"`
}

func (KeysOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysArgs)(nil)).Elem()
}

type KeysResultOutput struct{ *pulumi.OutputState }

func (KeysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysResult)(nil)).Elem()
}

func (o KeysResultOutput) ToKeysResultOutput() KeysResultOutput {
	return o
}

func (o KeysResultOutput) ToKeysResultOutputWithContext(ctx context.Context) KeysResultOutput {
	return o
}

func (o KeysResultOutput) Result() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KeysResult) []string { return v.Result }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(KeysResultOutput{})
}
