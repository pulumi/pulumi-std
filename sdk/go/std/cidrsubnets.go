// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Takes an IP address prefix in CIDR notation (like 10.0.0.0/8) and creates a series of consecutive IP address ranges within that CIDR prefix. See https://opentofu.org/docs/language/functions/cidrsubnets/ for additional information
func Cidrsubnets(ctx *pulumi.Context, args *CidrsubnetsArgs, opts ...pulumi.InvokeOption) (*CidrsubnetsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CidrsubnetsResult
	err := ctx.Invoke("std:index:cidrsubnets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CidrsubnetsArgs struct {
	Input   string `pulumi:"input"`
	Newbits []int  `pulumi:"newbits"`
}

type CidrsubnetsResult struct {
	Result []string `pulumi:"result"`
}

func CidrsubnetsOutput(ctx *pulumi.Context, args CidrsubnetsOutputArgs, opts ...pulumi.InvokeOption) CidrsubnetsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (CidrsubnetsResultOutput, error) {
			args := v.(CidrsubnetsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("std:index:cidrsubnets", args, CidrsubnetsResultOutput{}, options).(CidrsubnetsResultOutput), nil
		}).(CidrsubnetsResultOutput)
}

type CidrsubnetsOutputArgs struct {
	Input   pulumi.StringInput   `pulumi:"input"`
	Newbits pulumi.IntArrayInput `pulumi:"newbits"`
}

func (CidrsubnetsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrsubnetsArgs)(nil)).Elem()
}

type CidrsubnetsResultOutput struct{ *pulumi.OutputState }

func (CidrsubnetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrsubnetsResult)(nil)).Elem()
}

func (o CidrsubnetsResultOutput) ToCidrsubnetsResultOutput() CidrsubnetsResultOutput {
	return o
}

func (o CidrsubnetsResultOutput) ToCidrsubnetsResultOutputWithContext(ctx context.Context) CidrsubnetsResultOutput {
	return o
}

func (o CidrsubnetsResultOutput) Result() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CidrsubnetsResult) []string { return v.Result }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(CidrsubnetsResultOutput{})
}
