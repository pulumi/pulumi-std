// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Converts its argument to a string value. Only primitive types (string, number, bool)
//
//	and null can be converted to string. All other values will result in an error.
func Tostring(ctx *pulumi.Context, args *TostringArgs, opts ...pulumi.InvokeOption) (*TostringResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv TostringResult
	err := ctx.Invoke("std:index:tostring", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TostringArgs struct {
	Input interface{} `pulumi:"input"`
}

type TostringResult struct {
	Result *string `pulumi:"result"`
}

func TostringOutput(ctx *pulumi.Context, args TostringOutputArgs, opts ...pulumi.InvokeOption) TostringResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (TostringResult, error) {
			args := v.(TostringArgs)
			r, err := Tostring(ctx, &args, opts...)
			var s TostringResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(TostringResultOutput)
}

type TostringOutputArgs struct {
	Input pulumi.Input `pulumi:"input"`
}

func (TostringOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TostringArgs)(nil)).Elem()
}

type TostringResultOutput struct{ *pulumi.OutputState }

func (TostringResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TostringResult)(nil)).Elem()
}

func (o TostringResultOutput) ToTostringResultOutput() TostringResultOutput {
	return o
}

func (o TostringResultOutput) ToTostringResultOutputWithContext(ctx context.Context) TostringResultOutput {
	return o
}

func (o TostringResultOutput) ToOutput(ctx context.Context) pulumix.Output[TostringResult] {
	return pulumix.Output[TostringResult]{
		OutputState: o.OutputState,
	}
}

func (o TostringResultOutput) Result() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TostringResult) *string { return v.Result }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(TostringResultOutput{})
}
