// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Formats a string according to the given format. The syntax for the format is standard sprintf syntax.
func Format(ctx *pulumi.Context, args *FormatArgs, opts ...pulumi.InvokeOption) (*FormatResult, error) {
	var rv FormatResult
	err := ctx.Invoke("std:index:format", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FormatArgs struct {
	Args  []interface{} `pulumi:"args"`
	Input string        `pulumi:"input"`
}

type FormatResult struct {
	Result string `pulumi:"result"`
}

func FormatOutput(ctx *pulumi.Context, args FormatOutputArgs, opts ...pulumi.InvokeOption) FormatResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FormatResult, error) {
			args := v.(FormatArgs)
			r, err := Format(ctx, &args, opts...)
			var s FormatResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(FormatResultOutput)
}

type FormatOutputArgs struct {
	Args  pulumi.ArrayInput  `pulumi:"args"`
	Input pulumi.StringInput `pulumi:"input"`
}

func (FormatOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatArgs)(nil)).Elem()
}

type FormatResultOutput struct{ *pulumi.OutputState }

func (FormatResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatResult)(nil)).Elem()
}

func (o FormatResultOutput) ToFormatResultOutput() FormatResultOutput {
	return o
}

func (o FormatResultOutput) ToFormatResultOutputWithContext(ctx context.Context) FormatResultOutput {
	return o
}

func (o FormatResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v FormatResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(FormatResultOutput{})
}
