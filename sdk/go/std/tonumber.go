// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Converts its argument to a number value. Only number values, null, and strings
//
//	containing decimal representations of numbers can be converted to number. All other values will result in an error
func Tonumber(ctx *pulumi.Context, args *TonumberArgs, opts ...pulumi.InvokeOption) (*TonumberResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv TonumberResult
	err := ctx.Invoke("std:index:tonumber", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TonumberArgs struct {
	Input interface{} `pulumi:"input"`
}

type TonumberResult struct {
	Result *float64 `pulumi:"result"`
}

func TonumberOutput(ctx *pulumi.Context, args TonumberOutputArgs, opts ...pulumi.InvokeOption) TonumberResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (TonumberResult, error) {
			args := v.(TonumberArgs)
			r, err := Tonumber(ctx, &args, opts...)
			var s TonumberResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(TonumberResultOutput)
}

type TonumberOutputArgs struct {
	Input pulumi.Input `pulumi:"input"`
}

func (TonumberOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TonumberArgs)(nil)).Elem()
}

type TonumberResultOutput struct{ *pulumi.OutputState }

func (TonumberResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TonumberResult)(nil)).Elem()
}

func (o TonumberResultOutput) ToTonumberResultOutput() TonumberResultOutput {
	return o
}

func (o TonumberResultOutput) ToTonumberResultOutputWithContext(ctx context.Context) TonumberResultOutput {
	return o
}

func (o TonumberResultOutput) Result() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v TonumberResult) *float64 { return v.Result }).(pulumi.Float64PtrOutput)
}

func init() {
	pulumi.RegisterOutputType(TonumberResultOutput{})
}
