// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns true if a list contains the given element and returns false otherwise.
func Contains(ctx *pulumi.Context, args *ContainsArgs, opts ...pulumi.InvokeOption) (*ContainsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ContainsResult
	err := ctx.Invoke("std:index:contains", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ContainsArgs struct {
	Element interface{}   `pulumi:"element"`
	Input   []interface{} `pulumi:"input"`
}

type ContainsResult struct {
	Result bool `pulumi:"result"`
}

func ContainsOutput(ctx *pulumi.Context, args ContainsOutputArgs, opts ...pulumi.InvokeOption) ContainsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ContainsResult, error) {
			args := v.(ContainsArgs)
			r, err := Contains(ctx, &args, opts...)
			var s ContainsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ContainsResultOutput)
}

type ContainsOutputArgs struct {
	Element pulumi.Input      `pulumi:"element"`
	Input   pulumi.ArrayInput `pulumi:"input"`
}

func (ContainsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainsArgs)(nil)).Elem()
}

type ContainsResultOutput struct{ *pulumi.OutputState }

func (ContainsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContainsResult)(nil)).Elem()
}

func (o ContainsResultOutput) ToContainsResultOutput() ContainsResultOutput {
	return o
}

func (o ContainsResultOutput) ToContainsResultOutputWithContext(ctx context.Context) ContainsResultOutput {
	return o
}

func (o ContainsResultOutput) ToOutput(ctx context.Context) pulumix.Output[ContainsResult] {
	return pulumix.Output[ContainsResult]{
		OutputState: o.OutputState,
	}
}

func (o ContainsResultOutput) Result() pulumi.BoolOutput {
	return o.ApplyT(func(v ContainsResult) bool { return v.Result }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(ContainsResultOutput{})
}
