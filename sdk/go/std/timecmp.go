// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Compares two timestamps and returns a number that represents the ordering
//
//	of the instants those timestamps represent.
//	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
//	Both timestamps must be strings adhering this syntax, i.e. "2017-11-22T00:00:00Z".
//	If 'timestamp_a' is before 'timestamp_b', -1 is returned.
//	If 'timestamp_a' is equal to 'timestamp_b', 0 is returned.
//	If 'timestamp_a' is after 'timestamp_b', 1 is returned.
func Timecmp(ctx *pulumi.Context, args *TimecmpArgs, opts ...pulumi.InvokeOption) (*TimecmpResult, error) {
	var rv TimecmpResult
	err := ctx.Invoke("std:index:timecmp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TimecmpArgs struct {
	Timestampa string `pulumi:"timestampa"`
	Timestampb string `pulumi:"timestampb"`
}

type TimecmpResult struct {
	Result int `pulumi:"result"`
}

func TimecmpOutput(ctx *pulumi.Context, args TimecmpOutputArgs, opts ...pulumi.InvokeOption) TimecmpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (TimecmpResult, error) {
			args := v.(TimecmpArgs)
			r, err := Timecmp(ctx, &args, opts...)
			var s TimecmpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(TimecmpResultOutput)
}

type TimecmpOutputArgs struct {
	Timestampa pulumi.StringInput `pulumi:"timestampa"`
	Timestampb pulumi.StringInput `pulumi:"timestampb"`
}

func (TimecmpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimecmpArgs)(nil)).Elem()
}

type TimecmpResultOutput struct{ *pulumi.OutputState }

func (TimecmpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimecmpResult)(nil)).Elem()
}

func (o TimecmpResultOutput) ToTimecmpResultOutput() TimecmpResultOutput {
	return o
}

func (o TimecmpResultOutput) ToTimecmpResultOutputWithContext(ctx context.Context) TimecmpResultOutput {
	return o
}

func (o TimecmpResultOutput) Result() pulumi.IntOutput {
	return o.ApplyT(func(v TimecmpResult) int { return v.Result }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(TimecmpResultOutput{})
}
