// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns a map consisting of the key/value pairs specified as arguments.
func Map(ctx *pulumi.Context, args *MapArgs, opts ...pulumi.InvokeOption) (*MapResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv MapResult
	err := ctx.Invoke("std:index:map", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type MapArgs struct {
	Args []interface{} `pulumi:"args"`
}

type MapResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

func MapOutput(ctx *pulumi.Context, args MapOutputArgs, opts ...pulumi.InvokeOption) MapResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (MapResult, error) {
			args := v.(MapArgs)
			r, err := Map(ctx, &args, opts...)
			var s MapResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(MapResultOutput)
}

type MapOutputArgs struct {
	Args pulumi.ArrayInput `pulumi:"args"`
}

func (MapOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MapArgs)(nil)).Elem()
}

type MapResultOutput struct{ *pulumi.OutputState }

func (MapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MapResult)(nil)).Elem()
}

func (o MapResultOutput) ToMapResultOutput() MapResultOutput {
	return o
}

func (o MapResultOutput) ToMapResultOutputWithContext(ctx context.Context) MapResultOutput {
	return o
}

func (o MapResultOutput) ToOutput(ctx context.Context) pulumix.Output[MapResult] {
	return pulumix.Output[MapResult]{
		OutputState: o.OutputState,
	}
}

func (o MapResultOutput) Result() pulumi.MapOutput {
	return o.ApplyT(func(v MapResult) map[string]interface{} { return v.Result }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterOutputType(MapResultOutput{})
}
