// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Decodes a string containing CSV-formatted data and produces a list of maps representing that data.
//
//	The first line of the CSV data is interpreted as a "header" row: the values given
//	are used as the keys in the resulting maps.
//	Each subsequent line becomes a single map in the resulting list,
//	matching the keys from the header row with the given values by index.
//	All lines in the file must contain the same number of fields,
//	or this function will produce an error.
//	Follows the format defined in RFC 4180.
func Csvdecode(ctx *pulumi.Context, args *CsvdecodeArgs, opts ...pulumi.InvokeOption) (*CsvdecodeResult, error) {
	var rv CsvdecodeResult
	err := ctx.Invoke("std:index:csvdecode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CsvdecodeArgs struct {
	Input string `pulumi:"input"`
}

type CsvdecodeResult struct {
	Result []map[string]string `pulumi:"result"`
}

func CsvdecodeOutput(ctx *pulumi.Context, args CsvdecodeOutputArgs, opts ...pulumi.InvokeOption) CsvdecodeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (CsvdecodeResult, error) {
			args := v.(CsvdecodeArgs)
			r, err := Csvdecode(ctx, &args, opts...)
			var s CsvdecodeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(CsvdecodeResultOutput)
}

type CsvdecodeOutputArgs struct {
	Input pulumi.StringInput `pulumi:"input"`
}

func (CsvdecodeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvdecodeArgs)(nil)).Elem()
}

type CsvdecodeResultOutput struct{ *pulumi.OutputState }

func (CsvdecodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvdecodeResult)(nil)).Elem()
}

func (o CsvdecodeResultOutput) ToCsvdecodeResultOutput() CsvdecodeResultOutput {
	return o
}

func (o CsvdecodeResultOutput) ToCsvdecodeResultOutputWithContext(ctx context.Context) CsvdecodeResultOutput {
	return o
}

func (o CsvdecodeResultOutput) Result() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v CsvdecodeResult) []map[string]string { return v.Result }).(pulumi.StringMapArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(CsvdecodeResultOutput{})
}
