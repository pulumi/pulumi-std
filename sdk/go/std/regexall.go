// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a list of all matches of a regular expression in a string (including named or indexed groups).
func Regexall(ctx *pulumi.Context, args *RegexallArgs, opts ...pulumi.InvokeOption) (*RegexallResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv RegexallResult
	err := ctx.Invoke("std:index:regexall", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type RegexallArgs struct {
	Pattern string `pulumi:"pattern"`
	String  string `pulumi:"string"`
}

type RegexallResult struct {
	Result []interface{} `pulumi:"result"`
}

func RegexallOutput(ctx *pulumi.Context, args RegexallOutputArgs, opts ...pulumi.InvokeOption) RegexallResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (RegexallResultOutput, error) {
			args := v.(RegexallArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("std:index:regexall", args, RegexallResultOutput{}, options).(RegexallResultOutput), nil
		}).(RegexallResultOutput)
}

type RegexallOutputArgs struct {
	Pattern pulumi.StringInput `pulumi:"pattern"`
	String  pulumi.StringInput `pulumi:"string"`
}

func (RegexallOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegexallArgs)(nil)).Elem()
}

type RegexallResultOutput struct{ *pulumi.OutputState }

func (RegexallResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegexallResult)(nil)).Elem()
}

func (o RegexallResultOutput) ToRegexallResultOutput() RegexallResultOutput {
	return o
}

func (o RegexallResultOutput) ToRegexallResultOutputWithContext(ctx context.Context) RegexallResultOutput {
	return o
}

func (o RegexallResultOutput) Result() pulumi.ArrayOutput {
	return o.ApplyT(func(v RegexallResult) []interface{} { return v.Result }).(pulumi.ArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(RegexallResultOutput{})
}
