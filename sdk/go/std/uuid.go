// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns a unique identifier string, generated and formatted as required by RFC 4122.
func Uuid(ctx *pulumi.Context, args *UuidArgs, opts ...pulumi.InvokeOption) (*UuidResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv UuidResult
	err := ctx.Invoke("std:index:uuid", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type UuidArgs struct {
}

type UuidResult struct {
	Result string `pulumi:"result"`
}

func UuidOutput(ctx *pulumi.Context, args UuidOutputArgs, opts ...pulumi.InvokeOption) UuidResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (UuidResult, error) {
			args := v.(UuidArgs)
			r, err := Uuid(ctx, &args, opts...)
			var s UuidResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(UuidResultOutput)
}

type UuidOutputArgs struct {
}

func (UuidOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UuidArgs)(nil)).Elem()
}

type UuidResultOutput struct{ *pulumi.OutputState }

func (UuidResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UuidResult)(nil)).Elem()
}

func (o UuidResultOutput) ToUuidResultOutput() UuidResultOutput {
	return o
}

func (o UuidResultOutput) ToUuidResultOutputWithContext(ctx context.Context) UuidResultOutput {
	return o
}

func (o UuidResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v UuidResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(UuidResultOutput{})
}
