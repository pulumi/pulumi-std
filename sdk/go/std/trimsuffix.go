// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Removes the specified suffix from the end of the given string, if present.
func Trimsuffix(ctx *pulumi.Context, args *TrimsuffixArgs, opts ...pulumi.InvokeOption) (*TrimsuffixResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv TrimsuffixResult
	err := ctx.Invoke("std:index:trimsuffix", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TrimsuffixArgs struct {
	Input  string `pulumi:"input"`
	Suffix string `pulumi:"suffix"`
}

type TrimsuffixResult struct {
	Result string `pulumi:"result"`
}

func TrimsuffixOutput(ctx *pulumi.Context, args TrimsuffixOutputArgs, opts ...pulumi.InvokeOption) TrimsuffixResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (TrimsuffixResult, error) {
			args := v.(TrimsuffixArgs)
			r, err := Trimsuffix(ctx, &args, opts...)
			var s TrimsuffixResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(TrimsuffixResultOutput)
}

type TrimsuffixOutputArgs struct {
	Input  pulumi.StringInput `pulumi:"input"`
	Suffix pulumi.StringInput `pulumi:"suffix"`
}

func (TrimsuffixOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TrimsuffixArgs)(nil)).Elem()
}

type TrimsuffixResultOutput struct{ *pulumi.OutputState }

func (TrimsuffixResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrimsuffixResult)(nil)).Elem()
}

func (o TrimsuffixResultOutput) ToTrimsuffixResultOutput() TrimsuffixResultOutput {
	return o
}

func (o TrimsuffixResultOutput) ToTrimsuffixResultOutputWithContext(ctx context.Context) TrimsuffixResultOutput {
	return o
}

func (o TrimsuffixResultOutput) ToOutput(ctx context.Context) pulumix.Output[TrimsuffixResult] {
	return pulumix.Output[TrimsuffixResult]{
		OutputState: o.OutputState,
	}
}

func (o TrimsuffixResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v TrimsuffixResult) string { return v.Result }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(TrimsuffixResultOutput{})
}
