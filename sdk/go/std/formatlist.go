// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Formats a list of strings according to the given format. Argument values which are lists are "zipped" together to produce a list of results.
func Formatlist(ctx *pulumi.Context, args *FormatlistArgs, opts ...pulumi.InvokeOption) (*FormatlistResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FormatlistResult
	err := ctx.Invoke("std:index:formatlist", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FormatlistArgs struct {
	Args  []interface{} `pulumi:"args"`
	Input string        `pulumi:"input"`
}

type FormatlistResult struct {
	Result []string `pulumi:"result"`
}

func FormatlistOutput(ctx *pulumi.Context, args FormatlistOutputArgs, opts ...pulumi.InvokeOption) FormatlistResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (FormatlistResultOutput, error) {
			args := v.(FormatlistArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("std:index:formatlist", args, FormatlistResultOutput{}, options).(FormatlistResultOutput), nil
		}).(FormatlistResultOutput)
}

type FormatlistOutputArgs struct {
	Args  pulumi.ArrayInput  `pulumi:"args"`
	Input pulumi.StringInput `pulumi:"input"`
}

func (FormatlistOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatlistArgs)(nil)).Elem()
}

type FormatlistResultOutput struct{ *pulumi.OutputState }

func (FormatlistResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatlistResult)(nil)).Elem()
}

func (o FormatlistResultOutput) ToFormatlistResultOutput() FormatlistResultOutput {
	return o
}

func (o FormatlistResultOutput) ToFormatlistResultOutputWithContext(ctx context.Context) FormatlistResultOutput {
	return o
}

func (o FormatlistResultOutput) Result() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FormatlistResult) []string { return v.Result }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(FormatlistResultOutput{})
}
