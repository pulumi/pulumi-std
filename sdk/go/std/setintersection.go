// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the set of elements that all the input sets have in common.
func Setintersection(ctx *pulumi.Context, args *SetintersectionArgs, opts ...pulumi.InvokeOption) (*SetintersectionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv SetintersectionResult
	err := ctx.Invoke("std:index:setintersection", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type SetintersectionArgs struct {
	Input [][]interface{} `pulumi:"input"`
}

type SetintersectionResult struct {
	Result []interface{} `pulumi:"result"`
}

func SetintersectionOutput(ctx *pulumi.Context, args SetintersectionOutputArgs, opts ...pulumi.InvokeOption) SetintersectionResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (SetintersectionResultOutput, error) {
			args := v.(SetintersectionArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("std:index:setintersection", args, SetintersectionResultOutput{}, options).(SetintersectionResultOutput), nil
		}).(SetintersectionResultOutput)
}

type SetintersectionOutputArgs struct {
	Input pulumi.ArrayArrayInput `pulumi:"input"`
}

func (SetintersectionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SetintersectionArgs)(nil)).Elem()
}

type SetintersectionResultOutput struct{ *pulumi.OutputState }

func (SetintersectionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SetintersectionResult)(nil)).Elem()
}

func (o SetintersectionResultOutput) ToSetintersectionResultOutput() SetintersectionResultOutput {
	return o
}

func (o SetintersectionResultOutput) ToSetintersectionResultOutputWithContext(ctx context.Context) SetintersectionResultOutput {
	return o
}

func (o SetintersectionResultOutput) Result() pulumi.ArrayOutput {
	return o.ApplyT(func(v SetintersectionResult) []interface{} { return v.Result }).(pulumi.ArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(SetintersectionResultOutput{})
}
