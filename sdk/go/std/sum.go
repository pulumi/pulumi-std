// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Returns the total sum of the elements of the input list.
func Sum(ctx *pulumi.Context, args *SumArgs, opts ...pulumi.InvokeOption) (*SumResult, error) {
	var rv SumResult
	err := ctx.Invoke("std:index:sum", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type SumArgs struct {
	Input []float64 `pulumi:"input"`
}

type SumResult struct {
	Result float64 `pulumi:"result"`
}

func SumOutput(ctx *pulumi.Context, args SumOutputArgs, opts ...pulumi.InvokeOption) SumResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (SumResult, error) {
			args := v.(SumArgs)
			r, err := Sum(ctx, &args, opts...)
			var s SumResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(SumResultOutput)
}

type SumOutputArgs struct {
	Input pulumi.Float64ArrayInput `pulumi:"input"`
}

func (SumOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SumArgs)(nil)).Elem()
}

type SumResultOutput struct{ *pulumi.OutputState }

func (SumResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SumResult)(nil)).Elem()
}

func (o SumResultOutput) ToSumResultOutput() SumResultOutput {
	return o
}

func (o SumResultOutput) ToSumResultOutputWithContext(ctx context.Context) SumResultOutput {
	return o
}

func (o SumResultOutput) Result() pulumi.Float64Output {
	return o.ApplyT(func(v SumResult) float64 { return v.Result }).(pulumi.Float64Output)
}

func init() {
	pulumi.RegisterOutputType(SumResultOutput{})
}
