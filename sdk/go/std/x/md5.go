// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns a (conventional) hexadecimal representation of the MD5 hash of the given string.
func Md5(ctx *pulumi.Context, args *Md5Args, opts ...pulumi.InvokeOption) (*Md5Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv Md5Result
	err := ctx.Invoke("std:index:md5", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type Md5Args struct {
	Input string `pulumi:"input"`
}

type Md5Result struct {
	Result string `pulumi:"result"`
}

func Md5Output(ctx *pulumi.Context, args Md5OutputArgs, opts ...pulumi.InvokeOption) Md5ResultOutput {
	outputResult := pulumix.ApplyErr[*Md5Args](args.ToOutput(), func(plainArgs *Md5Args) (*Md5Result, error) {
		return Md5(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[Md5ResultOutput, *Md5Result](outputResult)
}

type Md5OutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args Md5OutputArgs) ToOutput() pulumix.Output[*Md5Args] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *Md5Args {
		return &Md5Args{
			Input: resolvedArgs[0].(string),
		}
	})
}

type Md5ResultOutput struct{ *pulumi.OutputState }

func (Md5ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Md5Result)(nil)).Elem()
}

func (o Md5ResultOutput) ToOutput(context.Context) pulumix.Output[*Md5Result] {
	return pulumix.Output[*Md5Result]{
		OutputState: o.OutputState,
	}
}

func (o Md5ResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*Md5Result](o, func(v *Md5Result) string { return v.Result })
}
