// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns a list of strings sorted lexicographically.
func Sort(ctx *pulumi.Context, args *SortArgs, opts ...pulumi.InvokeOption) (*SortResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv SortResult
	err := ctx.Invoke("std:index:sort", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type SortArgs struct {
	Input []string `pulumi:"input"`
}

type SortResult struct {
	Result []string `pulumi:"result"`
}

func SortOutput(ctx *pulumi.Context, args SortOutputArgs, opts ...pulumi.InvokeOption) SortResultOutput {
	outputResult := pulumix.ApplyErr[*SortArgs](args.ToOutput(), func(plainArgs *SortArgs) (*SortResult, error) {
		return Sort(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[SortResultOutput, *SortResult](outputResult)
}

type SortOutputArgs struct {
	Input pulumix.Input[[]string] `pulumi:"input"`
}

func (args SortOutputArgs) ToOutput() pulumix.Output[*SortArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *SortArgs {
		return &SortArgs{
			Input: resolvedArgs[0].([]string),
		}
	})
}

type SortResultOutput struct{ *pulumi.OutputState }

func (SortResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SortResult)(nil)).Elem()
}

func (o SortResultOutput) ToOutput(context.Context) pulumix.Output[*SortResult] {
	return pulumix.Output[*SortResult]{
		OutputState: o.OutputState,
	}
}

func (o SortResultOutput) Result() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*SortResult](o, func(v *SortResult) []string { return v.Result })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
