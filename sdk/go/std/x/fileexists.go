// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Determines whether a file exists at a given path.
func Fileexists(ctx *pulumi.Context, args *FileexistsArgs, opts ...pulumi.InvokeOption) (*FileexistsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FileexistsResult
	err := ctx.Invoke("std:index:fileexists", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FileexistsArgs struct {
	Input string `pulumi:"input"`
}

type FileexistsResult struct {
	Result bool `pulumi:"result"`
}

func FileexistsOutput(ctx *pulumi.Context, args FileexistsOutputArgs, opts ...pulumi.InvokeOption) FileexistsResultOutput {
	outputResult := pulumix.ApplyErr[*FileexistsArgs](args.ToOutput(), func(plainArgs *FileexistsArgs) (*FileexistsResult, error) {
		return Fileexists(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[FileexistsResultOutput, *FileexistsResult](outputResult)
}

type FileexistsOutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args FileexistsOutputArgs) ToOutput() pulumix.Output[*FileexistsArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *FileexistsArgs {
		return &FileexistsArgs{
			Input: resolvedArgs[0].(string),
		}
	})
}

type FileexistsResultOutput struct{ *pulumi.OutputState }

func (FileexistsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileexistsResult)(nil)).Elem()
}

func (o FileexistsResultOutput) ToOutput(context.Context) pulumix.Output[*FileexistsResult] {
	return pulumix.Output[*FileexistsResult]{
		OutputState: o.OutputState,
	}
}

func (o FileexistsResultOutput) Result() pulumix.Output[bool] {
	return pulumix.Apply[*FileexistsResult](o, func(v *FileexistsResult) bool { return v.Result })
}
