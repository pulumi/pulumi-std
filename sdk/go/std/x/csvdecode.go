// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Decodes a string containing CSV-formatted data and produces a list of maps representing that data.
//
//	The first line of the CSV data is interpreted as a "header" row: the values given
//	are used as the keys in the resulting maps.
//	Each subsequent line becomes a single map in the resulting list,
//	matching the keys from the header row with the given values by index.
//	All lines in the file must contain the same number of fields,
//	or this function will produce an error.
//	Follows the format defined in RFC 4180.
func Csvdecode(ctx *pulumi.Context, args *CsvdecodeArgs, opts ...pulumi.InvokeOption) (*CsvdecodeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CsvdecodeResult
	err := ctx.Invoke("std:index:csvdecode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CsvdecodeArgs struct {
	Input string `pulumi:"input"`
}

type CsvdecodeResult struct {
	Result []map[string]string `pulumi:"result"`
}

func CsvdecodeOutput(ctx *pulumi.Context, args CsvdecodeOutputArgs, opts ...pulumi.InvokeOption) CsvdecodeResultOutput {
	outputResult := pulumix.ApplyErr[*CsvdecodeArgs](args.ToOutput(), func(plainArgs *CsvdecodeArgs) (*CsvdecodeResult, error) {
		return Csvdecode(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[CsvdecodeResultOutput, *CsvdecodeResult](outputResult)
}

type CsvdecodeOutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args CsvdecodeOutputArgs) ToOutput() pulumix.Output[*CsvdecodeArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *CsvdecodeArgs {
		return &CsvdecodeArgs{
			Input: resolvedArgs[0].(string),
		}
	})
}

type CsvdecodeResultOutput struct{ *pulumi.OutputState }

func (CsvdecodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CsvdecodeResult)(nil)).Elem()
}

func (o CsvdecodeResultOutput) ToOutput(context.Context) pulumix.Output[*CsvdecodeResult] {
	return pulumix.Output[*CsvdecodeResult]{
		OutputState: o.OutputState,
	}
}

func (o CsvdecodeResultOutput) Result() pulumix.GArrayOutput[map[string]string, map[string]stringOutput] {
	value := pulumix.Apply[*CsvdecodeResult](o, func(v *CsvdecodeResult) []map[string]string { return v.Result })
	return pulumix.GArrayOutput[map[string]string, map[string]stringOutput]{
		OutputState: value.OutputState,
	}
}
