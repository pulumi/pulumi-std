// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Converts its argument to a boolean value. Only boolean values, null, and the exact strings
//
//	"true" and "false" can be converted to boolean. All other values will result in an error.
func Tobool(ctx *pulumi.Context, args *ToboolArgs, opts ...pulumi.InvokeOption) (*ToboolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ToboolResult
	err := ctx.Invoke("std:index:tobool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ToboolArgs struct {
	Input interface{} `pulumi:"input"`
}

type ToboolResult struct {
	Result *bool `pulumi:"result"`
}

func ToboolOutput(ctx *pulumi.Context, args ToboolOutputArgs, opts ...pulumi.InvokeOption) ToboolResultOutput {
	outputResult := pulumix.ApplyErr[*ToboolArgs](args.ToOutput(), func(plainArgs *ToboolArgs) (*ToboolResult, error) {
		return Tobool(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[ToboolResultOutput, *ToboolResult](outputResult)
}

type ToboolOutputArgs struct {
	Input pulumix.Input[interface{}] `pulumi:"input"`
}

func (args ToboolOutputArgs) ToOutput() pulumix.Output[*ToboolArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *ToboolArgs {
		return &ToboolArgs{
			Input: resolvedArgs[0].(interface{}),
		}
	})
}

type ToboolResultOutput struct{ *pulumi.OutputState }

func (ToboolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ToboolResult)(nil)).Elem()
}

func (o ToboolResultOutput) ToOutput(context.Context) pulumix.Output[*ToboolResult] {
	return pulumix.Output[*ToboolResult]{
		OutputState: o.OutputState,
	}
}

func (o ToboolResultOutput) Result() pulumix.Output[*bool] {
	return pulumix.Apply[*ToboolResult](o, func(v *ToboolResult) *bool { return v.Result })
}
