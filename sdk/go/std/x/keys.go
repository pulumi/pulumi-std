// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns a lexically sorted list of the map keys.
func Keys(ctx *pulumi.Context, args *KeysArgs, opts ...pulumi.InvokeOption) (*KeysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv KeysResult
	err := ctx.Invoke("std:index:keys", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type KeysArgs struct {
	Input map[string]interface{} `pulumi:"input"`
}

type KeysResult struct {
	Result []string `pulumi:"result"`
}

func KeysOutput(ctx *pulumi.Context, args KeysOutputArgs, opts ...pulumi.InvokeOption) KeysResultOutput {
	outputResult := pulumix.ApplyErr[*KeysArgs](args.ToOutput(), func(plainArgs *KeysArgs) (*KeysResult, error) {
		return Keys(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[KeysResultOutput, *KeysResult](outputResult)
}

type KeysOutputArgs struct {
	Input pulumix.Input[map[string]interface{}] `pulumi:"input"`
}

func (args KeysOutputArgs) ToOutput() pulumix.Output[*KeysArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *KeysArgs {
		return &KeysArgs{
			Input: resolvedArgs[0].(map[string]interface{}),
		}
	})
}

type KeysResultOutput struct{ *pulumi.OutputState }

func (KeysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysResult)(nil)).Elem()
}

func (o KeysResultOutput) ToOutput(context.Context) pulumix.Output[*KeysResult] {
	return pulumix.Output[*KeysResult]{
		OutputState: o.OutputState,
	}
}

func (o KeysResultOutput) Result() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*KeysResult](o, func(v *KeysResult) []string { return v.Result })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
