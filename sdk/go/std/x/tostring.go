// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Converts its argument to a string value. Only primitive types (string, number, bool)
//
//	and null can be converted to string. All other values will result in an error.
func Tostring(ctx *pulumi.Context, args *TostringArgs, opts ...pulumi.InvokeOption) (*TostringResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv TostringResult
	err := ctx.Invoke("std:index:tostring", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TostringArgs struct {
	Input interface{} `pulumi:"input"`
}

type TostringResult struct {
	Result *string `pulumi:"result"`
}

func TostringOutput(ctx *pulumi.Context, args TostringOutputArgs, opts ...pulumi.InvokeOption) TostringResultOutput {
	outputResult := pulumix.ApplyErr[*TostringArgs](args.ToOutput(), func(plainArgs *TostringArgs) (*TostringResult, error) {
		return Tostring(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[TostringResultOutput, *TostringResult](outputResult)
}

type TostringOutputArgs struct {
	Input pulumix.Input[interface{}] `pulumi:"input"`
}

func (args TostringOutputArgs) ToOutput() pulumix.Output[*TostringArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *TostringArgs {
		return &TostringArgs{
			Input: resolvedArgs[0].(interface{}),
		}
	})
}

type TostringResultOutput struct{ *pulumi.OutputState }

func (TostringResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TostringResult)(nil)).Elem()
}

func (o TostringResultOutput) ToOutput(context.Context) pulumix.Output[*TostringResult] {
	return pulumix.Output[*TostringResult]{
		OutputState: o.OutputState,
	}
}

func (o TostringResultOutput) Result() pulumix.Output[*string] {
	return pulumix.Apply[*TostringResult](o, func(v *TostringResult) *string { return v.Result })
}
