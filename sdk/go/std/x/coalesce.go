// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns the first non-empty value from the given arguments.
func Coalesce(ctx *pulumi.Context, args *CoalesceArgs, opts ...pulumi.InvokeOption) (*CoalesceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CoalesceResult
	err := ctx.Invoke("std:index:coalesce", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CoalesceArgs struct {
	Input []string `pulumi:"input"`
}

type CoalesceResult struct {
	Result string `pulumi:"result"`
}

func CoalesceOutput(ctx *pulumi.Context, args CoalesceOutputArgs, opts ...pulumi.InvokeOption) CoalesceResultOutput {
	outputResult := pulumix.ApplyErr[*CoalesceArgs](args.ToOutput(), func(plainArgs *CoalesceArgs) (*CoalesceResult, error) {
		return Coalesce(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[CoalesceResultOutput, *CoalesceResult](outputResult)
}

type CoalesceOutputArgs struct {
	Input pulumix.Input[[]string] `pulumi:"input"`
}

func (args CoalesceOutputArgs) ToOutput() pulumix.Output[*CoalesceArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *CoalesceArgs {
		return &CoalesceArgs{
			Input: resolvedArgs[0].([]string),
		}
	})
}

type CoalesceResultOutput struct{ *pulumi.OutputState }

func (CoalesceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoalesceResult)(nil)).Elem()
}

func (o CoalesceResultOutput) ToOutput(context.Context) pulumix.Output[*CoalesceResult] {
	return pulumix.Output[*CoalesceResult]{
		OutputState: o.OutputState,
	}
}

func (o CoalesceResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*CoalesceResult](o, func(v *CoalesceResult) string { return v.Result })
}
