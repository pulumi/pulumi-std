// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Extracts a substring from the given string.
func Substr(ctx *pulumi.Context, args *SubstrArgs, opts ...pulumi.InvokeOption) (*SubstrResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv SubstrResult
	err := ctx.Invoke("std:index:substr", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type SubstrArgs struct {
	Input  string `pulumi:"input"`
	Length int    `pulumi:"length"`
	Offset int    `pulumi:"offset"`
}

type SubstrResult struct {
	Result string `pulumi:"result"`
}

func SubstrOutput(ctx *pulumi.Context, args SubstrOutputArgs, opts ...pulumi.InvokeOption) SubstrResultOutput {
	outputResult := pulumix.ApplyErr[*SubstrArgs](args.ToOutput(), func(plainArgs *SubstrArgs) (*SubstrResult, error) {
		return Substr(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[SubstrResultOutput, *SubstrResult](outputResult)
}

type SubstrOutputArgs struct {
	Input  pulumix.Input[string] `pulumi:"input"`
	Length pulumix.Input[int]    `pulumi:"length"`
	Offset pulumix.Input[int]    `pulumi:"offset"`
}

func (args SubstrOutputArgs) ToOutput() pulumix.Output[*SubstrArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny(),
		args.Length.ToOutput(context.Background()).AsAny(),
		args.Offset.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *SubstrArgs {
		return &SubstrArgs{
			Input:  resolvedArgs[0].(string),
			Length: resolvedArgs[1].(int),
			Offset: resolvedArgs[2].(int),
		}
	})
}

type SubstrResultOutput struct{ *pulumi.OutputState }

func (SubstrResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SubstrResult)(nil)).Elem()
}

func (o SubstrResultOutput) ToOutput(context.Context) pulumix.Output[*SubstrResult] {
	return pulumix.Output[*SubstrResult]{
		OutputState: o.OutputState,
	}
}

func (o SubstrResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*SubstrResult](o, func(v *SubstrResult) string { return v.Result })
}
