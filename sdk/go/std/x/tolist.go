// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Converts its argument to a list value.
func Tolist(ctx *pulumi.Context, args *TolistArgs, opts ...pulumi.InvokeOption) (*TolistResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv TolistResult
	err := ctx.Invoke("std:index:tolist", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TolistArgs struct {
	Input []interface{} `pulumi:"input"`
}

type TolistResult struct {
	Result []interface{} `pulumi:"result"`
}

func TolistOutput(ctx *pulumi.Context, args TolistOutputArgs, opts ...pulumi.InvokeOption) TolistResultOutput {
	outputResult := pulumix.ApplyErr[*TolistArgs](args.ToOutput(), func(plainArgs *TolistArgs) (*TolistResult, error) {
		return Tolist(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[TolistResultOutput, *TolistResult](outputResult)
}

type TolistOutputArgs struct {
	Input pulumix.Input[[]interface{}] `pulumi:"input"`
}

func (args TolistOutputArgs) ToOutput() pulumix.Output[*TolistArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *TolistArgs {
		return &TolistArgs{
			Input: resolvedArgs[0].([]interface{}),
		}
	})
}

type TolistResultOutput struct{ *pulumi.OutputState }

func (TolistResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TolistResult)(nil)).Elem()
}

func (o TolistResultOutput) ToOutput(context.Context) pulumix.Output[*TolistResult] {
	return pulumix.Output[*TolistResult]{
		OutputState: o.OutputState,
	}
}

func (o TolistResultOutput) Result() pulumix.ArrayOutput[interface{}] {
	value := pulumix.Apply[*TolistResult](o, func(v *TolistResult) []interface{} { return v.Result })
	return pulumix.ArrayOutput[interface{}]{
		OutputState: value.OutputState,
	}
}
