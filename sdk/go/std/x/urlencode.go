// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Applies URL encoding to a given string.
func Urlencode(ctx *pulumi.Context, args *UrlencodeArgs, opts ...pulumi.InvokeOption) (*UrlencodeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv UrlencodeResult
	err := ctx.Invoke("std:index:urlencode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type UrlencodeArgs struct {
	Input string `pulumi:"input"`
}

type UrlencodeResult struct {
	Result string `pulumi:"result"`
}

func UrlencodeOutput(ctx *pulumi.Context, args UrlencodeOutputArgs, opts ...pulumi.InvokeOption) UrlencodeResultOutput {
	outputResult := pulumix.ApplyErr[*UrlencodeArgs](args.ToOutput(), func(plainArgs *UrlencodeArgs) (*UrlencodeResult, error) {
		return Urlencode(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[UrlencodeResultOutput, *UrlencodeResult](outputResult)
}

type UrlencodeOutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args UrlencodeOutputArgs) ToOutput() pulumix.Output[*UrlencodeArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *UrlencodeArgs {
		return &UrlencodeArgs{
			Input: resolvedArgs[0].(string),
		}
	})
}

type UrlencodeResultOutput struct{ *pulumi.OutputState }

func (UrlencodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UrlencodeResult)(nil)).Elem()
}

func (o UrlencodeResultOutput) ToOutput(context.Context) pulumix.Output[*UrlencodeResult] {
	return pulumix.Output[*UrlencodeResult]{
		OutputState: o.OutputState,
	}
}

func (o UrlencodeResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*UrlencodeResult](o, func(v *UrlencodeResult) string { return v.Result })
}
