// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Flattens lists of lists down to a flat list of primitive values,
// eliminating any nested lists recursively.
func Flatten(ctx *pulumi.Context, args *FlattenArgs, opts ...pulumi.InvokeOption) (*FlattenResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FlattenResult
	err := ctx.Invoke("std:index:flatten", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FlattenArgs struct {
	Input []interface{} `pulumi:"input"`
}

type FlattenResult struct {
	Result []interface{} `pulumi:"result"`
}

func FlattenOutput(ctx *pulumi.Context, args FlattenOutputArgs, opts ...pulumi.InvokeOption) FlattenResultOutput {
	outputResult := pulumix.ApplyErr[*FlattenArgs](args.ToOutput(), func(plainArgs *FlattenArgs) (*FlattenResult, error) {
		return Flatten(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[FlattenResultOutput, *FlattenResult](outputResult)
}

type FlattenOutputArgs struct {
	Input pulumix.Input[[]interface{}] `pulumi:"input"`
}

func (args FlattenOutputArgs) ToOutput() pulumix.Output[*FlattenArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *FlattenArgs {
		return &FlattenArgs{
			Input: resolvedArgs[0].([]interface{}),
		}
	})
}

type FlattenResultOutput struct{ *pulumi.OutputState }

func (FlattenResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlattenResult)(nil)).Elem()
}

func (o FlattenResultOutput) ToOutput(context.Context) pulumix.Output[*FlattenResult] {
	return pulumix.Output[*FlattenResult]{
		OutputState: o.OutputState,
	}
}

func (o FlattenResultOutput) Result() pulumix.ArrayOutput[interface{}] {
	value := pulumix.Apply[*FlattenResult](o, func(v *FlattenResult) []interface{} { return v.Result })
	return pulumix.ArrayOutput[interface{}]{
		OutputState: value.OutputState,
	}
}
