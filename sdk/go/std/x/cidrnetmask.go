// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Takes an IP address range in CIDR notation and returns the address-formatted subnet mask format
// that some systems expect for IPv4 interfaces.
// For example, cidrnetmask("10.0.0.0/8") returns 255.0.0.0.
// Not applicable to IPv6 networks since CIDR notation is the only valid notation for IPv6.
func Cidrnetmask(ctx *pulumi.Context, args *CidrnetmaskArgs, opts ...pulumi.InvokeOption) (*CidrnetmaskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CidrnetmaskResult
	err := ctx.Invoke("std:index:cidrnetmask", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CidrnetmaskArgs struct {
	Input string `pulumi:"input"`
}

type CidrnetmaskResult struct {
	Result string `pulumi:"result"`
}

func CidrnetmaskOutput(ctx *pulumi.Context, args CidrnetmaskOutputArgs, opts ...pulumi.InvokeOption) CidrnetmaskResultOutput {
	outputResult := pulumix.ApplyErr[*CidrnetmaskArgs](args.ToOutput(), func(plainArgs *CidrnetmaskArgs) (*CidrnetmaskResult, error) {
		return Cidrnetmask(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[CidrnetmaskResultOutput, *CidrnetmaskResult](outputResult)
}

type CidrnetmaskOutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args CidrnetmaskOutputArgs) ToOutput() pulumix.Output[*CidrnetmaskArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *CidrnetmaskArgs {
		return &CidrnetmaskArgs{
			Input: resolvedArgs[0].(string),
		}
	})
}

type CidrnetmaskResultOutput struct{ *pulumi.OutputState }

func (CidrnetmaskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrnetmaskResult)(nil)).Elem()
}

func (o CidrnetmaskResultOutput) ToOutput(context.Context) pulumix.Output[*CidrnetmaskResult] {
	return pulumix.Output[*CidrnetmaskResult]{
		OutputState: o.OutputState,
	}
}

func (o CidrnetmaskResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*CidrnetmaskResult](o, func(v *CidrnetmaskResult) string { return v.Result })
}
