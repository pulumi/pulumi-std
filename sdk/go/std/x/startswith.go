// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Determines if the input string starts with the suffix.
func Startswith(ctx *pulumi.Context, args *StartswithArgs, opts ...pulumi.InvokeOption) (*StartswithResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv StartswithResult
	err := ctx.Invoke("std:index:startswith", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type StartswithArgs struct {
	Input  string `pulumi:"input"`
	Prefix string `pulumi:"prefix"`
}

type StartswithResult struct {
	Result bool `pulumi:"result"`
}

func StartswithOutput(ctx *pulumi.Context, args StartswithOutputArgs, opts ...pulumi.InvokeOption) StartswithResultOutput {
	outputResult := pulumix.ApplyErr[*StartswithArgs](args.ToOutput(), func(plainArgs *StartswithArgs) (*StartswithResult, error) {
		return Startswith(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[StartswithResultOutput, *StartswithResult](outputResult)
}

type StartswithOutputArgs struct {
	Input  pulumix.Input[string] `pulumi:"input"`
	Prefix pulumix.Input[string] `pulumi:"prefix"`
}

func (args StartswithOutputArgs) ToOutput() pulumix.Output[*StartswithArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny(),
		args.Prefix.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *StartswithArgs {
		return &StartswithArgs{
			Input:  resolvedArgs[0].(string),
			Prefix: resolvedArgs[1].(string),
		}
	})
}

type StartswithResultOutput struct{ *pulumi.OutputState }

func (StartswithResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StartswithResult)(nil)).Elem()
}

func (o StartswithResultOutput) ToOutput(context.Context) pulumix.Output[*StartswithResult] {
	return pulumix.Output[*StartswithResult]{
		OutputState: o.OutputState,
	}
}

func (o StartswithResultOutput) Result() pulumix.Output[bool] {
	return pulumix.Apply[*StartswithResult](o, func(v *StartswithResult) bool { return v.Result })
}
