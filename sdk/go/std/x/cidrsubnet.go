// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Takes an IP address range in CIDR notation (like 10.0.0.0/8) and extends its prefix
// to include an additional subnet number. For example, cidrsubnet("10.0.0.0/8", 8, 2) returns 10.2.0.0/16;
// cidrsubnet("2607:f298:6051:516c::/64", 8, 2) returns 2607:f298:6051:516c:200::/72.
func Cidrsubnet(ctx *pulumi.Context, args *CidrsubnetArgs, opts ...pulumi.InvokeOption) (*CidrsubnetResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CidrsubnetResult
	err := ctx.Invoke("std:index:cidrsubnet", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CidrsubnetArgs struct {
	Input   string `pulumi:"input"`
	Netnum  int    `pulumi:"netnum"`
	Newbits int    `pulumi:"newbits"`
}

type CidrsubnetResult struct {
	Result string `pulumi:"result"`
}

func CidrsubnetOutput(ctx *pulumi.Context, args CidrsubnetOutputArgs, opts ...pulumi.InvokeOption) CidrsubnetResultOutput {
	outputResult := pulumix.ApplyErr[*CidrsubnetArgs](args.ToOutput(), func(plainArgs *CidrsubnetArgs) (*CidrsubnetResult, error) {
		return Cidrsubnet(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[CidrsubnetResultOutput, *CidrsubnetResult](outputResult)
}

type CidrsubnetOutputArgs struct {
	Input   pulumix.Input[string] `pulumi:"input"`
	Netnum  pulumix.Input[int]    `pulumi:"netnum"`
	Newbits pulumix.Input[int]    `pulumi:"newbits"`
}

func (args CidrsubnetOutputArgs) ToOutput() pulumix.Output[*CidrsubnetArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny(),
		args.Netnum.ToOutput(context.Background()).AsAny(),
		args.Newbits.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *CidrsubnetArgs {
		return &CidrsubnetArgs{
			Input:   resolvedArgs[0].(string),
			Netnum:  resolvedArgs[1].(int),
			Newbits: resolvedArgs[2].(int),
		}
	})
}

type CidrsubnetResultOutput struct{ *pulumi.OutputState }

func (CidrsubnetResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrsubnetResult)(nil)).Elem()
}

func (o CidrsubnetResultOutput) ToOutput(context.Context) pulumix.Output[*CidrsubnetResult] {
	return pulumix.Output[*CidrsubnetResult]{
		OutputState: o.OutputState,
	}
}

func (o CidrsubnetResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*CidrsubnetResult](o, func(v *CidrsubnetResult) string { return v.Result })
}
