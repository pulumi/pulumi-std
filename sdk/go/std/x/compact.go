// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Removes empty string elements from a list.
func Compact(ctx *pulumi.Context, args *CompactArgs, opts ...pulumi.InvokeOption) (*CompactResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CompactResult
	err := ctx.Invoke("std:index:compact", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CompactArgs struct {
	Input []string `pulumi:"input"`
}

type CompactResult struct {
	Result []string `pulumi:"result"`
}

func CompactOutput(ctx *pulumi.Context, args CompactOutputArgs, opts ...pulumi.InvokeOption) CompactResultOutput {
	outputResult := pulumix.ApplyErr[*CompactArgs](args.ToOutput(), func(plainArgs *CompactArgs) (*CompactResult, error) {
		return Compact(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[CompactResultOutput, *CompactResult](outputResult)
}

type CompactOutputArgs struct {
	Input pulumix.Input[[]string] `pulumi:"input"`
}

func (args CompactOutputArgs) ToOutput() pulumix.Output[*CompactArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *CompactArgs {
		return &CompactArgs{
			Input: resolvedArgs[0].([]string),
		}
	})
}

type CompactResultOutput struct{ *pulumi.OutputState }

func (CompactResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CompactResult)(nil)).Elem()
}

func (o CompactResultOutput) ToOutput(context.Context) pulumix.Output[*CompactResult] {
	return pulumix.Output[*CompactResult]{
		OutputState: o.OutputState,
	}
}

func (o CompactResultOutput) Result() pulumix.ArrayOutput[string] {
	value := pulumix.Apply[*CompactResult](o, func(v *CompactResult) []string { return v.Result })
	return pulumix.ArrayOutput[string]{
		OutputState: value.OutputState,
	}
}
