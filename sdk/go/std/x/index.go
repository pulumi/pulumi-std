// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Finds the index of a given element in a list.
func Index(ctx *pulumi.Context, args *IndexArgs, opts ...pulumi.InvokeOption) (*IndexResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv IndexResult
	err := ctx.Invoke("std:index:index", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type IndexArgs struct {
	Element interface{}   `pulumi:"element"`
	Input   []interface{} `pulumi:"input"`
}

type IndexResult struct {
	Result int `pulumi:"result"`
}

func IndexOutput(ctx *pulumi.Context, args IndexOutputArgs, opts ...pulumi.InvokeOption) IndexResultOutput {
	outputResult := pulumix.ApplyErr[*IndexArgs](args.ToOutput(), func(plainArgs *IndexArgs) (*IndexResult, error) {
		return Index(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[IndexResultOutput, *IndexResult](outputResult)
}

type IndexOutputArgs struct {
	Element pulumix.Input[interface{}]   `pulumi:"element"`
	Input   pulumix.Input[[]interface{}] `pulumi:"input"`
}

func (args IndexOutputArgs) ToOutput() pulumix.Output[*IndexArgs] {
	allArgs := pulumix.All(
		args.Element.ToOutput(context.Background()).AsAny(),
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *IndexArgs {
		return &IndexArgs{
			Element: resolvedArgs[0].(interface{}),
			Input:   resolvedArgs[1].([]interface{}),
		}
	})
}

type IndexResultOutput struct{ *pulumi.OutputState }

func (IndexResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndexResult)(nil)).Elem()
}

func (o IndexResultOutput) ToOutput(context.Context) pulumix.Output[*IndexResult] {
	return pulumix.Output[*IndexResult]{
		OutputState: o.OutputState,
	}
}

func (o IndexResultOutput) Result() pulumix.Output[int] {
	return pulumix.Apply[*IndexResult](o, func(v *IndexResult) int { return v.Result })
}
