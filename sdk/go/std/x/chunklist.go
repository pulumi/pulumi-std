// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Splits a single list into multiple lists where each has at most the given number of elements.
func Chunklist(ctx *pulumi.Context, args *ChunklistArgs, opts ...pulumi.InvokeOption) (*ChunklistResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ChunklistResult
	err := ctx.Invoke("std:index:chunklist", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ChunklistArgs struct {
	Input []interface{} `pulumi:"input"`
	Size  int           `pulumi:"size"`
}

type ChunklistResult struct {
	Result []interface{} `pulumi:"result"`
}

func ChunklistOutput(ctx *pulumi.Context, args ChunklistOutputArgs, opts ...pulumi.InvokeOption) ChunklistResultOutput {
	outputResult := pulumix.ApplyErr[*ChunklistArgs](args.ToOutput(), func(plainArgs *ChunklistArgs) (*ChunklistResult, error) {
		return Chunklist(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[ChunklistResultOutput, *ChunklistResult](outputResult)
}

type ChunklistOutputArgs struct {
	Input pulumix.Input[[]interface{}] `pulumi:"input"`
	Size  pulumix.Input[int]           `pulumi:"size"`
}

func (args ChunklistOutputArgs) ToOutput() pulumix.Output[*ChunklistArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny(),
		args.Size.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *ChunklistArgs {
		return &ChunklistArgs{
			Input: resolvedArgs[0].([]interface{}),
			Size:  resolvedArgs[1].(int),
		}
	})
}

type ChunklistResultOutput struct{ *pulumi.OutputState }

func (ChunklistResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChunklistResult)(nil)).Elem()
}

func (o ChunklistResultOutput) ToOutput(context.Context) pulumix.Output[*ChunklistResult] {
	return pulumix.Output[*ChunklistResult]{
		OutputState: o.OutputState,
	}
}

func (o ChunklistResultOutput) Result() pulumix.ArrayOutput[interface{}] {
	value := pulumix.Apply[*ChunklistResult](o, func(v *ChunklistResult) []interface{} { return v.Result })
	return pulumix.ArrayOutput[interface{}]{
		OutputState: value.OutputState,
	}
}
