// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Removes the specified set of characters from the start and end of the given string.
func Trim(ctx *pulumi.Context, args *TrimArgs, opts ...pulumi.InvokeOption) (*TrimResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv TrimResult
	err := ctx.Invoke("std:index:trim", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TrimArgs struct {
	Cutset string `pulumi:"cutset"`
	Input  string `pulumi:"input"`
}

type TrimResult struct {
	Result string `pulumi:"result"`
}

func TrimOutput(ctx *pulumi.Context, args TrimOutputArgs, opts ...pulumi.InvokeOption) TrimResultOutput {
	outputResult := pulumix.ApplyErr[*TrimArgs](args.ToOutput(), func(plainArgs *TrimArgs) (*TrimResult, error) {
		return Trim(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[TrimResultOutput, *TrimResult](outputResult)
}

type TrimOutputArgs struct {
	Cutset pulumix.Input[string] `pulumi:"cutset"`
	Input  pulumix.Input[string] `pulumi:"input"`
}

func (args TrimOutputArgs) ToOutput() pulumix.Output[*TrimArgs] {
	allArgs := pulumix.All(
		args.Cutset.ToOutput(context.Background()).AsAny(),
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *TrimArgs {
		return &TrimArgs{
			Cutset: resolvedArgs[0].(string),
			Input:  resolvedArgs[1].(string),
		}
	})
}

type TrimResultOutput struct{ *pulumi.OutputState }

func (TrimResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrimResult)(nil)).Elem()
}

func (o TrimResultOutput) ToOutput(context.Context) pulumix.Output[*TrimResult] {
	return pulumix.Output[*TrimResult]{
		OutputState: o.OutputState,
	}
}

func (o TrimResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*TrimResult](o, func(v *TrimResult) string { return v.Result })
}
