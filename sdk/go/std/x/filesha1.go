// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Reads the contents of a file into a string and returns the SHA1 hash of it.
func Filesha1(ctx *pulumi.Context, args *Filesha1Args, opts ...pulumi.InvokeOption) (*Filesha1Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv Filesha1Result
	err := ctx.Invoke("std:index:filesha1", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type Filesha1Args struct {
	Input string `pulumi:"input"`
}

type Filesha1Result struct {
	Result string `pulumi:"result"`
}

func Filesha1Output(ctx *pulumi.Context, args Filesha1OutputArgs, opts ...pulumi.InvokeOption) Filesha1ResultOutput {
	outputResult := pulumix.ApplyErr[*Filesha1Args](args.ToOutput(), func(plainArgs *Filesha1Args) (*Filesha1Result, error) {
		return Filesha1(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[Filesha1ResultOutput, *Filesha1Result](outputResult)
}

type Filesha1OutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args Filesha1OutputArgs) ToOutput() pulumix.Output[*Filesha1Args] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *Filesha1Args {
		return &Filesha1Args{
			Input: resolvedArgs[0].(string),
		}
	})
}

type Filesha1ResultOutput struct{ *pulumi.OutputState }

func (Filesha1ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Filesha1Result)(nil)).Elem()
}

func (o Filesha1ResultOutput) ToOutput(context.Context) pulumix.Output[*Filesha1Result] {
	return pulumix.Output[*Filesha1Result]{
		OutputState: o.OutputState,
	}
}

func (o Filesha1ResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*Filesha1Result](o, func(v *Filesha1Result) string { return v.Result })
}
