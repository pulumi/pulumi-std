// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Constructs a map from a list of keys and a corresponding list of values.
func Zipmap(ctx *pulumi.Context, args *ZipmapArgs, opts ...pulumi.InvokeOption) (*ZipmapResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ZipmapResult
	err := ctx.Invoke("std:index:zipmap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ZipmapArgs struct {
	Keys   []string      `pulumi:"keys"`
	Values []interface{} `pulumi:"values"`
}

type ZipmapResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

func ZipmapOutput(ctx *pulumi.Context, args ZipmapOutputArgs, opts ...pulumi.InvokeOption) ZipmapResultOutput {
	outputResult := pulumix.ApplyErr[*ZipmapArgs](args.ToOutput(), func(plainArgs *ZipmapArgs) (*ZipmapResult, error) {
		return Zipmap(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[ZipmapResultOutput, *ZipmapResult](outputResult)
}

type ZipmapOutputArgs struct {
	Keys   pulumix.Input[[]string]      `pulumi:"keys"`
	Values pulumix.Input[[]interface{}] `pulumi:"values"`
}

func (args ZipmapOutputArgs) ToOutput() pulumix.Output[*ZipmapArgs] {
	allArgs := pulumix.All(
		args.Keys.ToOutput(context.Background()).AsAny(),
		args.Values.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *ZipmapArgs {
		return &ZipmapArgs{
			Keys:   resolvedArgs[0].([]string),
			Values: resolvedArgs[1].([]interface{}),
		}
	})
}

type ZipmapResultOutput struct{ *pulumi.OutputState }

func (ZipmapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZipmapResult)(nil)).Elem()
}

func (o ZipmapResultOutput) ToOutput(context.Context) pulumix.Output[*ZipmapResult] {
	return pulumix.Output[*ZipmapResult]{
		OutputState: o.OutputState,
	}
}

func (o ZipmapResultOutput) Result() pulumix.MapOutput[interface{}] {
	value := pulumix.Apply[*ZipmapResult](o, func(v *ZipmapResult) map[string]interface{} { return v.Result })
	return pulumix.MapOutput[interface{}]{
		OutputState: value.OutputState,
	}
}
