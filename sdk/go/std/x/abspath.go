// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns an absolute representation of the specified path.
// If the path is not absolute it will be joined with the current working directory to turn it into an absolute path.
func Abspath(ctx *pulumi.Context, args *AbspathArgs, opts ...pulumi.InvokeOption) (*AbspathResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv AbspathResult
	err := ctx.Invoke("std:index:abspath", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type AbspathArgs struct {
	Input string `pulumi:"input"`
}

type AbspathResult struct {
	Result string `pulumi:"result"`
}

func AbspathOutput(ctx *pulumi.Context, args AbspathOutputArgs, opts ...pulumi.InvokeOption) AbspathResultOutput {
	outputResult := pulumix.ApplyErr[*AbspathArgs](args.ToOutput(), func(plainArgs *AbspathArgs) (*AbspathResult, error) {
		return Abspath(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[AbspathResultOutput, *AbspathResult](outputResult)
}

type AbspathOutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args AbspathOutputArgs) ToOutput() pulumix.Output[*AbspathArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *AbspathArgs {
		return &AbspathArgs{
			Input: resolvedArgs[0].(string),
		}
	})
}

type AbspathResultOutput struct{ *pulumi.OutputState }

func (AbspathResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AbspathResult)(nil)).Elem()
}

func (o AbspathResultOutput) ToOutput(context.Context) pulumix.Output[*AbspathResult] {
	return pulumix.Output[*AbspathResult]{
		OutputState: o.OutputState,
	}
}

func (o AbspathResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*AbspathResult](o, func(v *AbspathResult) string { return v.Result })
}
