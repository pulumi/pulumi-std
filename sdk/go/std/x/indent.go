// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Adds a given number of spaces after each newline character in the given string.
func Indent(ctx *pulumi.Context, args *IndentArgs, opts ...pulumi.InvokeOption) (*IndentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv IndentResult
	err := ctx.Invoke("std:index:indent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type IndentArgs struct {
	Input  string `pulumi:"input"`
	Spaces int    `pulumi:"spaces"`
}

type IndentResult struct {
	Result string `pulumi:"result"`
}

func IndentOutput(ctx *pulumi.Context, args IndentOutputArgs, opts ...pulumi.InvokeOption) IndentResultOutput {
	outputResult := pulumix.ApplyErr[*IndentArgs](args.ToOutput(), func(plainArgs *IndentArgs) (*IndentResult, error) {
		return Indent(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[IndentResultOutput, *IndentResult](outputResult)
}

type IndentOutputArgs struct {
	Input  pulumix.Input[string] `pulumi:"input"`
	Spaces pulumix.Input[int]    `pulumi:"spaces"`
}

func (args IndentOutputArgs) ToOutput() pulumix.Output[*IndentArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny(),
		args.Spaces.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *IndentArgs {
		return &IndentArgs{
			Input:  resolvedArgs[0].(string),
			Spaces: resolvedArgs[1].(int),
		}
	})
}

type IndentResultOutput struct{ *pulumi.OutputState }

func (IndentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IndentResult)(nil)).Elem()
}

func (o IndentResultOutput) ToOutput(context.Context) pulumix.Output[*IndentResult] {
	return pulumix.Output[*IndentResult]{
		OutputState: o.OutputState,
	}
}

func (o IndentResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*IndentResult](o, func(v *IndentResult) string { return v.Result })
}
