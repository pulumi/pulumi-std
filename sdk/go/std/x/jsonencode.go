// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns a JSON-encoded representation of the given value,
// which can contain arbitrarily-nested lists and maps.
// Note that if the value is a string then its value will be placed in quotes.
func Jsonencode(ctx *pulumi.Context, args *JsonencodeArgs, opts ...pulumi.InvokeOption) (*JsonencodeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv JsonencodeResult
	err := ctx.Invoke("std:index:jsonencode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type JsonencodeArgs struct {
	Input interface{} `pulumi:"input"`
}

type JsonencodeResult struct {
	Result string `pulumi:"result"`
}

func JsonencodeOutput(ctx *pulumi.Context, args JsonencodeOutputArgs, opts ...pulumi.InvokeOption) JsonencodeResultOutput {
	outputResult := pulumix.ApplyErr[*JsonencodeArgs](args.ToOutput(), func(plainArgs *JsonencodeArgs) (*JsonencodeResult, error) {
		return Jsonencode(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[JsonencodeResultOutput, *JsonencodeResult](outputResult)
}

type JsonencodeOutputArgs struct {
	Input pulumix.Input[interface{}] `pulumi:"input"`
}

func (args JsonencodeOutputArgs) ToOutput() pulumix.Output[*JsonencodeArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *JsonencodeArgs {
		return &JsonencodeArgs{
			Input: resolvedArgs[0].(interface{}),
		}
	})
}

type JsonencodeResultOutput struct{ *pulumi.OutputState }

func (JsonencodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsonencodeResult)(nil)).Elem()
}

func (o JsonencodeResultOutput) ToOutput(context.Context) pulumix.Output[*JsonencodeResult] {
	return pulumix.Output[*JsonencodeResult]{
		OutputState: o.OutputState,
	}
}

func (o JsonencodeResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*JsonencodeResult](o, func(v *JsonencodeResult) string { return v.Result })
}
