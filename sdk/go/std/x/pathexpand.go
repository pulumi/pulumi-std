// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns a filepath string with ~ expanded to the home directory.
func Pathexpand(ctx *pulumi.Context, args *PathexpandArgs, opts ...pulumi.InvokeOption) (*PathexpandResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv PathexpandResult
	err := ctx.Invoke("std:index:pathexpand", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type PathexpandArgs struct {
	Input string `pulumi:"input"`
}

type PathexpandResult struct {
	Result string `pulumi:"result"`
}

func PathexpandOutput(ctx *pulumi.Context, args PathexpandOutputArgs, opts ...pulumi.InvokeOption) PathexpandResultOutput {
	outputResult := pulumix.ApplyErr[*PathexpandArgs](args.ToOutput(), func(plainArgs *PathexpandArgs) (*PathexpandResult, error) {
		return Pathexpand(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[PathexpandResultOutput, *PathexpandResult](outputResult)
}

type PathexpandOutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args PathexpandOutputArgs) ToOutput() pulumix.Output[*PathexpandArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *PathexpandArgs {
		return &PathexpandArgs{
			Input: resolvedArgs[0].(string),
		}
	})
}

type PathexpandResultOutput struct{ *pulumi.OutputState }

func (PathexpandResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PathexpandResult)(nil)).Elem()
}

func (o PathexpandResultOutput) ToOutput(context.Context) pulumix.Output[*PathexpandResult] {
	return pulumix.Output[*PathexpandResult]{
		OutputState: o.OutputState,
	}
}

func (o PathexpandResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*PathexpandResult](o, func(v *PathexpandResult) string { return v.Result })
}
