// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns the smallest of the floats.
func Min(ctx *pulumi.Context, args *MinArgs, opts ...pulumi.InvokeOption) (*MinResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv MinResult
	err := ctx.Invoke("std:index:min", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type MinArgs struct {
	Input []float64 `pulumi:"input"`
}

type MinResult struct {
	Result float64 `pulumi:"result"`
}

func MinOutput(ctx *pulumi.Context, args MinOutputArgs, opts ...pulumi.InvokeOption) MinResultOutput {
	outputResult := pulumix.ApplyErr[*MinArgs](args.ToOutput(), func(plainArgs *MinArgs) (*MinResult, error) {
		return Min(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[MinResultOutput, *MinResult](outputResult)
}

type MinOutputArgs struct {
	Input pulumix.Input[[]float64] `pulumi:"input"`
}

func (args MinOutputArgs) ToOutput() pulumix.Output[*MinArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *MinArgs {
		return &MinArgs{
			Input: resolvedArgs[0].([]float64),
		}
	})
}

type MinResultOutput struct{ *pulumi.OutputState }

func (MinResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MinResult)(nil)).Elem()
}

func (o MinResultOutput) ToOutput(context.Context) pulumix.Output[*MinResult] {
	return pulumix.Output[*MinResult]{
		OutputState: o.OutputState,
	}
}

func (o MinResultOutput) Result() pulumix.Output[float64] {
	return pulumix.Apply[*MinResult](o, func(v *MinResult) float64 { return v.Result })
}
