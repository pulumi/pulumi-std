// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Interprets a given string as JSON and returns a represetation
//
//	of the result of decoding that string.
//	If input is not valid JSON, the result will be the input unchanged.
func Jsondecode(ctx *pulumi.Context, args *JsondecodeArgs, opts ...pulumi.InvokeOption) (*JsondecodeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv JsondecodeResult
	err := ctx.Invoke("std:index:jsondecode", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type JsondecodeArgs struct {
	Input string `pulumi:"input"`
}

type JsondecodeResult struct {
	Result interface{} `pulumi:"result"`
}

func JsondecodeOutput(ctx *pulumi.Context, args JsondecodeOutputArgs, opts ...pulumi.InvokeOption) JsondecodeResultOutput {
	outputResult := pulumix.ApplyErr[*JsondecodeArgs](args.ToOutput(), func(plainArgs *JsondecodeArgs) (*JsondecodeResult, error) {
		return Jsondecode(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[JsondecodeResultOutput, *JsondecodeResult](outputResult)
}

type JsondecodeOutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args JsondecodeOutputArgs) ToOutput() pulumix.Output[*JsondecodeArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *JsondecodeArgs {
		return &JsondecodeArgs{
			Input: resolvedArgs[0].(string),
		}
	})
}

type JsondecodeResultOutput struct{ *pulumi.OutputState }

func (JsondecodeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JsondecodeResult)(nil)).Elem()
}

func (o JsondecodeResultOutput) ToOutput(context.Context) pulumix.Output[*JsondecodeResult] {
	return pulumix.Output[*JsondecodeResult]{
		OutputState: o.OutputState,
	}
}

func (o JsondecodeResultOutput) Result() pulumix.Output[interface{}] {
	return pulumix.Apply[*JsondecodeResult](o, func(v *JsondecodeResult) interface{} { return v.Result })
}
