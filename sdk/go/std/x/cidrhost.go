// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Takes an IP address range in CIDR notation as input
// and creates an IP address with the given host number.
// If given host number is negative, the count starts from the end of the range.
// For example, cidrhost("10.0.0.0/8", 2) returns 10.0.0.2 and cidrhost("10.0.0.0/8", -2) returns 10.255.255.254.
func Cidrhost(ctx *pulumi.Context, args *CidrhostArgs, opts ...pulumi.InvokeOption) (*CidrhostResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CidrhostResult
	err := ctx.Invoke("std:index:cidrhost", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type CidrhostArgs struct {
	Host  int    `pulumi:"host"`
	Input string `pulumi:"input"`
}

type CidrhostResult struct {
	Result string `pulumi:"result"`
}

func CidrhostOutput(ctx *pulumi.Context, args CidrhostOutputArgs, opts ...pulumi.InvokeOption) CidrhostResultOutput {
	outputResult := pulumix.ApplyErr[*CidrhostArgs](args.ToOutput(), func(plainArgs *CidrhostArgs) (*CidrhostResult, error) {
		return Cidrhost(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[CidrhostResultOutput, *CidrhostResult](outputResult)
}

type CidrhostOutputArgs struct {
	Host  pulumix.Input[int]    `pulumi:"host"`
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args CidrhostOutputArgs) ToOutput() pulumix.Output[*CidrhostArgs] {
	allArgs := pulumix.All(
		args.Host.ToOutput(context.Background()).AsAny(),
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *CidrhostArgs {
		return &CidrhostArgs{
			Host:  resolvedArgs[0].(int),
			Input: resolvedArgs[1].(string),
		}
	})
}

type CidrhostResultOutput struct{ *pulumi.OutputState }

func (CidrhostResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CidrhostResult)(nil)).Elem()
}

func (o CidrhostResultOutput) ToOutput(context.Context) pulumix.Output[*CidrhostResult] {
	return pulumix.Output[*CidrhostResult]{
		OutputState: o.OutputState,
	}
}

func (o CidrhostResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*CidrhostResult](o, func(v *CidrhostResult) string { return v.Result })
}
