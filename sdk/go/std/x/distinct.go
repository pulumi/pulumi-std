// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Removes duplicate items from a list.
func Distinct(ctx *pulumi.Context, args *DistinctArgs, opts ...pulumi.InvokeOption) (*DistinctResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv DistinctResult
	err := ctx.Invoke("std:index:distinct", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type DistinctArgs struct {
	Input []interface{} `pulumi:"input"`
}

type DistinctResult struct {
	Result []interface{} `pulumi:"result"`
}

func DistinctOutput(ctx *pulumi.Context, args DistinctOutputArgs, opts ...pulumi.InvokeOption) DistinctResultOutput {
	outputResult := pulumix.ApplyErr[*DistinctArgs](args.ToOutput(), func(plainArgs *DistinctArgs) (*DistinctResult, error) {
		return Distinct(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[DistinctResultOutput, *DistinctResult](outputResult)
}

type DistinctOutputArgs struct {
	Input pulumix.Input[[]interface{}] `pulumi:"input"`
}

func (args DistinctOutputArgs) ToOutput() pulumix.Output[*DistinctArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *DistinctArgs {
		return &DistinctArgs{
			Input: resolvedArgs[0].([]interface{}),
		}
	})
}

type DistinctResultOutput struct{ *pulumi.OutputState }

func (DistinctResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DistinctResult)(nil)).Elem()
}

func (o DistinctResultOutput) ToOutput(context.Context) pulumix.Output[*DistinctResult] {
	return pulumix.Output[*DistinctResult]{
		OutputState: o.OutputState,
	}
}

func (o DistinctResultOutput) Result() pulumix.ArrayOutput[interface{}] {
	value := pulumix.Apply[*DistinctResult](o, func(v *DistinctResult) []interface{} { return v.Result })
	return pulumix.ArrayOutput[interface{}]{
		OutputState: value.OutputState,
	}
}
