// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Removes any space characters from the start and end of the given string,
//
//	following the Unicode definition of \"space\" (i.e. spaces, tabs, newline, etc.).
func Trimspace(ctx *pulumi.Context, args *TrimspaceArgs, opts ...pulumi.InvokeOption) (*TrimspaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv TrimspaceResult
	err := ctx.Invoke("std:index:trimspace", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TrimspaceArgs struct {
	Input string `pulumi:"input"`
}

type TrimspaceResult struct {
	Result string `pulumi:"result"`
}

func TrimspaceOutput(ctx *pulumi.Context, args TrimspaceOutputArgs, opts ...pulumi.InvokeOption) TrimspaceResultOutput {
	outputResult := pulumix.ApplyErr[*TrimspaceArgs](args.ToOutput(), func(plainArgs *TrimspaceArgs) (*TrimspaceResult, error) {
		return Trimspace(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[TrimspaceResultOutput, *TrimspaceResult](outputResult)
}

type TrimspaceOutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args TrimspaceOutputArgs) ToOutput() pulumix.Output[*TrimspaceArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *TrimspaceArgs {
		return &TrimspaceArgs{
			Input: resolvedArgs[0].(string),
		}
	})
}

type TrimspaceResultOutput struct{ *pulumi.OutputState }

func (TrimspaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TrimspaceResult)(nil)).Elem()
}

func (o TrimspaceResultOutput) ToOutput(context.Context) pulumix.Output[*TrimspaceResult] {
	return pulumix.Output[*TrimspaceResult]{
		OutputState: o.OutputState,
	}
}

func (o TrimspaceResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*TrimspaceResult](o, func(v *TrimspaceResult) string { return v.Result })
}
