// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Joins the list with the delimiter for a resultant string.
func Join(ctx *pulumi.Context, args *JoinArgs, opts ...pulumi.InvokeOption) (*JoinResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv JoinResult
	err := ctx.Invoke("std:index:join", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type JoinArgs struct {
	Input     []string `pulumi:"input"`
	Separator string   `pulumi:"separator"`
}

type JoinResult struct {
	Result string `pulumi:"result"`
}

func JoinOutput(ctx *pulumi.Context, args JoinOutputArgs, opts ...pulumi.InvokeOption) JoinResultOutput {
	outputResult := pulumix.ApplyErr[*JoinArgs](args.ToOutput(), func(plainArgs *JoinArgs) (*JoinResult, error) {
		return Join(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[JoinResultOutput, *JoinResult](outputResult)
}

type JoinOutputArgs struct {
	Input     pulumix.Input[[]string] `pulumi:"input"`
	Separator pulumix.Input[string]   `pulumi:"separator"`
}

func (args JoinOutputArgs) ToOutput() pulumix.Output[*JoinArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny(),
		args.Separator.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *JoinArgs {
		return &JoinArgs{
			Input:     resolvedArgs[0].([]string),
			Separator: resolvedArgs[1].(string),
		}
	})
}

type JoinResultOutput struct{ *pulumi.OutputState }

func (JoinResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*JoinResult)(nil)).Elem()
}

func (o JoinResultOutput) ToOutput(context.Context) pulumix.Output[*JoinResult] {
	return pulumix.Output[*JoinResult]{
		OutputState: o.OutputState,
	}
}

func (o JoinResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*JoinResult](o, func(v *JoinResult) string { return v.Result })
}
