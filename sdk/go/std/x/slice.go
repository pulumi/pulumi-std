// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns the portion of list between from (inclusive) and to (exclusive).
func Slice(ctx *pulumi.Context, args *SliceArgs, opts ...pulumi.InvokeOption) (*SliceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv SliceResult
	err := ctx.Invoke("std:index:slice", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type SliceArgs struct {
	From *int          `pulumi:"from"`
	List []interface{} `pulumi:"list"`
	To   *int          `pulumi:"to"`
}

type SliceResult struct {
	Result []interface{} `pulumi:"result"`
}

func SliceOutput(ctx *pulumi.Context, args SliceOutputArgs, opts ...pulumi.InvokeOption) SliceResultOutput {
	outputResult := pulumix.ApplyErr[*SliceArgs](args.ToOutput(), func(plainArgs *SliceArgs) (*SliceResult, error) {
		return Slice(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[SliceResultOutput, *SliceResult](outputResult)
}

type SliceOutputArgs struct {
	From pulumix.Input[*int]          `pulumi:"from"`
	List pulumix.Input[[]interface{}] `pulumi:"list"`
	To   pulumix.Input[*int]          `pulumi:"to"`
}

func (args SliceOutputArgs) ToOutput() pulumix.Output[*SliceArgs] {
	allArgs := pulumix.All(
		args.From.ToOutput(context.Background()).AsAny(),
		args.List.ToOutput(context.Background()).AsAny(),
		args.To.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *SliceArgs {
		return &SliceArgs{
			From: resolvedArgs[0].(*int),
			List: resolvedArgs[1].([]interface{}),
			To:   resolvedArgs[2].(*int),
		}
	})
}

type SliceResultOutput struct{ *pulumi.OutputState }

func (SliceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SliceResult)(nil)).Elem()
}

func (o SliceResultOutput) ToOutput(context.Context) pulumix.Output[*SliceResult] {
	return pulumix.Output[*SliceResult]{
		OutputState: o.OutputState,
	}
}

func (o SliceResultOutput) Result() pulumix.ArrayOutput[interface{}] {
	value := pulumix.Apply[*SliceResult](o, func(v *SliceResult) []interface{} { return v.Result })
	return pulumix.ArrayOutput[interface{}]{
		OutputState: value.OutputState,
	}
}
