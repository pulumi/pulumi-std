// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns the total sum of the elements of the input list.
func Sum(ctx *pulumi.Context, args *SumArgs, opts ...pulumi.InvokeOption) (*SumResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv SumResult
	err := ctx.Invoke("std:index:sum", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type SumArgs struct {
	Input []float64 `pulumi:"input"`
}

type SumResult struct {
	Result float64 `pulumi:"result"`
}

func SumOutput(ctx *pulumi.Context, args SumOutputArgs, opts ...pulumi.InvokeOption) SumResultOutput {
	outputResult := pulumix.ApplyErr[*SumArgs](args.ToOutput(), func(plainArgs *SumArgs) (*SumResult, error) {
		return Sum(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[SumResultOutput, *SumResult](outputResult)
}

type SumOutputArgs struct {
	Input pulumix.Input[[]float64] `pulumi:"input"`
}

func (args SumOutputArgs) ToOutput() pulumix.Output[*SumArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *SumArgs {
		return &SumArgs{
			Input: resolvedArgs[0].([]float64),
		}
	})
}

type SumResultOutput struct{ *pulumi.OutputState }

func (SumResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SumResult)(nil)).Elem()
}

func (o SumResultOutput) ToOutput(context.Context) pulumix.Output[*SumResult] {
	return pulumix.Output[*SumResult]{
		OutputState: o.OutputState,
	}
}

func (o SumResultOutput) Result() pulumix.Output[float64] {
	return pulumix.Apply[*SumResult](o, func(v *SumResult) float64 { return v.Result })
}
