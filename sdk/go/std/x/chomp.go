// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Removes one or more newline characters from the end of the given string.
func Chomp(ctx *pulumi.Context, args *ChompArgs, opts ...pulumi.InvokeOption) (*ChompResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ChompResult
	err := ctx.Invoke("std:index:chomp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ChompArgs struct {
	Input string `pulumi:"input"`
}

type ChompResult struct {
	Result string `pulumi:"result"`
}

func ChompOutput(ctx *pulumi.Context, args ChompOutputArgs, opts ...pulumi.InvokeOption) ChompResultOutput {
	outputResult := pulumix.ApplyErr[*ChompArgs](args.ToOutput(), func(plainArgs *ChompArgs) (*ChompResult, error) {
		return Chomp(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[ChompResultOutput, *ChompResult](outputResult)
}

type ChompOutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args ChompOutputArgs) ToOutput() pulumix.Output[*ChompArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *ChompArgs {
		return &ChompArgs{
			Input: resolvedArgs[0].(string),
		}
	})
}

type ChompResultOutput struct{ *pulumi.OutputState }

func (ChompResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChompResult)(nil)).Elem()
}

func (o ChompResultOutput) ToOutput(context.Context) pulumix.Output[*ChompResult] {
	return pulumix.Output[*ChompResult]{
		OutputState: o.OutputState,
	}
}

func (o ChompResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*ChompResult](o, func(v *ChompResult) string { return v.Result })
}
