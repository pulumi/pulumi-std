// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Converts all cased letters in the given string to uppercase.
func Upper(ctx *pulumi.Context, args *UpperArgs, opts ...pulumi.InvokeOption) (*UpperResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv UpperResult
	err := ctx.Invoke("std:index:upper", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type UpperArgs struct {
	Input string `pulumi:"input"`
}

type UpperResult struct {
	Result string `pulumi:"result"`
}

func UpperOutput(ctx *pulumi.Context, args UpperOutputArgs, opts ...pulumi.InvokeOption) UpperResultOutput {
	outputResult := pulumix.ApplyErr[*UpperArgs](args.ToOutput(), func(plainArgs *UpperArgs) (*UpperResult, error) {
		return Upper(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[UpperResultOutput, *UpperResult](outputResult)
}

type UpperOutputArgs struct {
	Input pulumix.Input[string] `pulumi:"input"`
}

func (args UpperOutputArgs) ToOutput() pulumix.Output[*UpperArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *UpperArgs {
		return &UpperArgs{
			Input: resolvedArgs[0].(string),
		}
	})
}

type UpperResultOutput struct{ *pulumi.OutputState }

func (UpperResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpperResult)(nil)).Elem()
}

func (o UpperResultOutput) ToOutput(context.Context) pulumix.Output[*UpperResult] {
	return pulumix.Output[*UpperResult]{
		OutputState: o.OutputState,
	}
}

func (o UpperResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*UpperResult](o, func(v *UpperResult) string { return v.Result })
}
