// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Determines if the input string ends with the suffix.
func Endswith(ctx *pulumi.Context, args *EndswithArgs, opts ...pulumi.InvokeOption) (*EndswithResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv EndswithResult
	err := ctx.Invoke("std:index:endswith", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type EndswithArgs struct {
	Input  string `pulumi:"input"`
	Suffix string `pulumi:"suffix"`
}

type EndswithResult struct {
	Result bool `pulumi:"result"`
}

func EndswithOutput(ctx *pulumi.Context, args EndswithOutputArgs, opts ...pulumi.InvokeOption) EndswithResultOutput {
	outputResult := pulumix.ApplyErr[*EndswithArgs](args.ToOutput(), func(plainArgs *EndswithArgs) (*EndswithResult, error) {
		return Endswith(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[EndswithResultOutput, *EndswithResult](outputResult)
}

type EndswithOutputArgs struct {
	Input  pulumix.Input[string] `pulumi:"input"`
	Suffix pulumix.Input[string] `pulumi:"suffix"`
}

func (args EndswithOutputArgs) ToOutput() pulumix.Output[*EndswithArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny(),
		args.Suffix.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *EndswithArgs {
		return &EndswithArgs{
			Input:  resolvedArgs[0].(string),
			Suffix: resolvedArgs[1].(string),
		}
	})
}

type EndswithResultOutput struct{ *pulumi.OutputState }

func (EndswithResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndswithResult)(nil)).Elem()
}

func (o EndswithResultOutput) ToOutput(context.Context) pulumix.Output[*EndswithResult] {
	return pulumix.Output[*EndswithResult]{
		OutputState: o.OutputState,
	}
}

func (o EndswithResultOutput) Result() pulumix.Output[bool] {
	return pulumix.Apply[*EndswithResult](o, func(v *EndswithResult) bool { return v.Result })
}
