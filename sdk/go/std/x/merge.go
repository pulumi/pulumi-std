// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns the union of 2 or more maps. The maps are consumed in the order provided,
// and duplicate keys overwrite previous entries.
func Merge(ctx *pulumi.Context, args *MergeArgs, opts ...pulumi.InvokeOption) (*MergeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv MergeResult
	err := ctx.Invoke("std:index:merge", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type MergeArgs struct {
	Input []map[string]interface{} `pulumi:"input"`
}

type MergeResult struct {
	Result map[string]interface{} `pulumi:"result"`
}

func MergeOutput(ctx *pulumi.Context, args MergeOutputArgs, opts ...pulumi.InvokeOption) MergeResultOutput {
	outputResult := pulumix.ApplyErr[*MergeArgs](args.ToOutput(), func(plainArgs *MergeArgs) (*MergeResult, error) {
		return Merge(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[MergeResultOutput, *MergeResult](outputResult)
}

type MergeOutputArgs struct {
	Input pulumix.Input[[]map[string]interface{}] `pulumi:"input"`
}

func (args MergeOutputArgs) ToOutput() pulumix.Output[*MergeArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *MergeArgs {
		return &MergeArgs{
			Input: resolvedArgs[0].([]map[string]interface{}),
		}
	})
}

type MergeResultOutput struct{ *pulumi.OutputState }

func (MergeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MergeResult)(nil)).Elem()
}

func (o MergeResultOutput) ToOutput(context.Context) pulumix.Output[*MergeResult] {
	return pulumix.Output[*MergeResult]{
		OutputState: o.OutputState,
	}
}

func (o MergeResultOutput) Result() pulumix.MapOutput[interface{}] {
	value := pulumix.Apply[*MergeResult](o, func(v *MergeResult) map[string]interface{} { return v.Result })
	return pulumix.MapOutput[interface{}]{
		OutputState: value.OutputState,
	}
}
