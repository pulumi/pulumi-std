// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Formats a string according to the given format. The syntax for the format is standard sprintf syntax.
func Format(ctx *pulumi.Context, args *FormatArgs, opts ...pulumi.InvokeOption) (*FormatResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FormatResult
	err := ctx.Invoke("std:index:format", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FormatArgs struct {
	Args  []interface{} `pulumi:"args"`
	Input string        `pulumi:"input"`
}

type FormatResult struct {
	Result string `pulumi:"result"`
}

func FormatOutput(ctx *pulumi.Context, args FormatOutputArgs, opts ...pulumi.InvokeOption) FormatResultOutput {
	outputResult := pulumix.ApplyErr[*FormatArgs](args.ToOutput(), func(plainArgs *FormatArgs) (*FormatResult, error) {
		return Format(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[FormatResultOutput, *FormatResult](outputResult)
}

type FormatOutputArgs struct {
	Args  pulumix.Input[[]interface{}] `pulumi:"args"`
	Input pulumix.Input[string]        `pulumi:"input"`
}

func (args FormatOutputArgs) ToOutput() pulumix.Output[*FormatArgs] {
	allArgs := pulumix.All(
		args.Args.ToOutput(context.Background()).AsAny(),
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *FormatArgs {
		return &FormatArgs{
			Args:  resolvedArgs[0].([]interface{}),
			Input: resolvedArgs[1].(string),
		}
	})
}

type FormatResultOutput struct{ *pulumi.OutputState }

func (FormatResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FormatResult)(nil)).Elem()
}

func (o FormatResultOutput) ToOutput(context.Context) pulumix.Output[*FormatResult] {
	return pulumix.Output[*FormatResult]{
		OutputState: o.OutputState,
	}
}

func (o FormatResultOutput) Result() pulumix.Output[string] {
	return pulumix.Apply[*FormatResult](o, func(v *FormatResult) string { return v.Result })
}
