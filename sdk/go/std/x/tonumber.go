// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Converts its argument to a number value. Only number values, null, and strings
//
//	containing decimal representations of numbers can be converted to number. All other values will result in an error
func Tonumber(ctx *pulumi.Context, args *TonumberArgs, opts ...pulumi.InvokeOption) (*TonumberResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv TonumberResult
	err := ctx.Invoke("std:index:tonumber", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type TonumberArgs struct {
	Input interface{} `pulumi:"input"`
}

type TonumberResult struct {
	Result *float64 `pulumi:"result"`
}

func TonumberOutput(ctx *pulumi.Context, args TonumberOutputArgs, opts ...pulumi.InvokeOption) TonumberResultOutput {
	outputResult := pulumix.ApplyErr[*TonumberArgs](args.ToOutput(), func(plainArgs *TonumberArgs) (*TonumberResult, error) {
		return Tonumber(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[TonumberResultOutput, *TonumberResult](outputResult)
}

type TonumberOutputArgs struct {
	Input pulumix.Input[interface{}] `pulumi:"input"`
}

func (args TonumberOutputArgs) ToOutput() pulumix.Output[*TonumberArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *TonumberArgs {
		return &TonumberArgs{
			Input: resolvedArgs[0].(interface{}),
		}
	})
}

type TonumberResultOutput struct{ *pulumi.OutputState }

func (TonumberResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TonumberResult)(nil)).Elem()
}

func (o TonumberResultOutput) ToOutput(context.Context) pulumix.Output[*TonumberResult] {
	return pulumix.Output[*TonumberResult]{
		OutputState: o.OutputState,
	}
}

func (o TonumberResultOutput) Result() pulumix.Output[*float64] {
	return pulumix.Apply[*TonumberResult](o, func(v *TonumberResult) *float64 { return v.Result })
}
