// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Determines the length of a given list, map, or string.
func Length(ctx *pulumi.Context, args *LengthArgs, opts ...pulumi.InvokeOption) (*LengthResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LengthResult
	err := ctx.Invoke("std:index:length", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LengthArgs struct {
	Input interface{} `pulumi:"input"`
}

type LengthResult struct {
	Result int `pulumi:"result"`
}

func LengthOutput(ctx *pulumi.Context, args LengthOutputArgs, opts ...pulumi.InvokeOption) LengthResultOutput {
	outputResult := pulumix.ApplyErr[*LengthArgs](args.ToOutput(), func(plainArgs *LengthArgs) (*LengthResult, error) {
		return Length(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LengthResultOutput, *LengthResult](outputResult)
}

type LengthOutputArgs struct {
	Input pulumix.Input[interface{}] `pulumi:"input"`
}

func (args LengthOutputArgs) ToOutput() pulumix.Output[*LengthArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LengthArgs {
		return &LengthArgs{
			Input: resolvedArgs[0].(interface{}),
		}
	})
}

type LengthResultOutput struct{ *pulumi.OutputState }

func (LengthResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LengthResult)(nil)).Elem()
}

func (o LengthResultOutput) ToOutput(context.Context) pulumix.Output[*LengthResult] {
	return pulumix.Output[*LengthResult]{
		OutputState: o.OutputState,
	}
}

func (o LengthResultOutput) Result() pulumix.Output[int] {
	return pulumix.Apply[*LengthResult](o, func(v *LengthResult) int { return v.Result })
}
