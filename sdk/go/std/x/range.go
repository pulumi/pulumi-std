// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Generates a list of numbers using a start value, a limit value, and a step value.
// Start and step may be omitted, in which case start defaults to zero and step defaults to either one or negative one
// depending on whether limit is greater than or less than start.
func Range(ctx *pulumi.Context, args *RangeArgs, opts ...pulumi.InvokeOption) (*RangeResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv RangeResult
	err := ctx.Invoke("std:index:range", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type RangeArgs struct {
	Limit float64  `pulumi:"limit"`
	Start *float64 `pulumi:"start"`
	Step  *float64 `pulumi:"step"`
}

type RangeResult struct {
	Result []float64 `pulumi:"result"`
}

func RangeOutput(ctx *pulumi.Context, args RangeOutputArgs, opts ...pulumi.InvokeOption) RangeResultOutput {
	outputResult := pulumix.ApplyErr[*RangeArgs](args.ToOutput(), func(plainArgs *RangeArgs) (*RangeResult, error) {
		return Range(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[RangeResultOutput, *RangeResult](outputResult)
}

type RangeOutputArgs struct {
	Limit pulumix.Input[float64]  `pulumi:"limit"`
	Start pulumix.Input[*float64] `pulumi:"start"`
	Step  pulumix.Input[*float64] `pulumi:"step"`
}

func (args RangeOutputArgs) ToOutput() pulumix.Output[*RangeArgs] {
	allArgs := pulumix.All(
		args.Limit.ToOutput(context.Background()).AsAny(),
		args.Start.ToOutput(context.Background()).AsAny(),
		args.Step.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *RangeArgs {
		return &RangeArgs{
			Limit: resolvedArgs[0].(float64),
			Start: resolvedArgs[1].(*float64),
			Step:  resolvedArgs[2].(*float64),
		}
	})
}

type RangeResultOutput struct{ *pulumi.OutputState }

func (RangeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RangeResult)(nil)).Elem()
}

func (o RangeResultOutput) ToOutput(context.Context) pulumix.Output[*RangeResult] {
	return pulumix.Output[*RangeResult]{
		OutputState: o.OutputState,
	}
}

func (o RangeResultOutput) Result() pulumix.ArrayOutput[float64] {
	value := pulumix.Apply[*RangeResult](o, func(v *RangeResult) []float64 { return v.Result })
	return pulumix.ArrayOutput[float64]{
		OutputState: value.OutputState,
	}
}
