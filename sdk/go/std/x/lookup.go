// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Performs a dynamic lookup into a map variable.
func Lookup(ctx *pulumi.Context, args *LookupArgs, opts ...pulumi.InvokeOption) (*LookupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupResult
	err := ctx.Invoke("std:index:lookup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type LookupArgs struct {
	Default interface{}            `pulumi:"default"`
	Key     string                 `pulumi:"key"`
	Map     map[string]interface{} `pulumi:"map"`
}

type LookupResult struct {
	Result interface{} `pulumi:"result"`
}

func LookupOutput(ctx *pulumi.Context, args LookupOutputArgs, opts ...pulumi.InvokeOption) LookupResultOutput {
	outputResult := pulumix.ApplyErr[*LookupArgs](args.ToOutput(), func(plainArgs *LookupArgs) (*LookupResult, error) {
		return Lookup(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[LookupResultOutput, *LookupResult](outputResult)
}

type LookupOutputArgs struct {
	Default pulumix.Input[*interface{}]           `pulumi:"default"`
	Key     pulumix.Input[string]                 `pulumi:"key"`
	Map     pulumix.Input[map[string]interface{}] `pulumi:"map"`
}

func (args LookupOutputArgs) ToOutput() pulumix.Output[*LookupArgs] {
	allArgs := pulumix.All(
		args.Default.ToOutput(context.Background()).AsAny(),
		args.Key.ToOutput(context.Background()).AsAny(),
		args.Map.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *LookupArgs {
		return &LookupArgs{
			Default: resolvedArgs[0].(interface{}),
			Key:     resolvedArgs[1].(string),
			Map:     resolvedArgs[2].(map[string]interface{}),
		}
	})
}

type LookupResultOutput struct{ *pulumi.OutputState }

func (LookupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupResult)(nil)).Elem()
}

func (o LookupResultOutput) ToOutput(context.Context) pulumix.Output[*LookupResult] {
	return pulumix.Output[*LookupResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupResultOutput) Result() pulumix.Output[interface{}] {
	return pulumix.Apply[*LookupResult](o, func(v *LookupResult) interface{} { return v.Result })
}
