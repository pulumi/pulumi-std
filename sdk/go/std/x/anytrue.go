// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns true if any of the elements in a given collection are true or \"true\".
// It also returns false if the collection is empty.
func Anytrue(ctx *pulumi.Context, args *AnytrueArgs, opts ...pulumi.InvokeOption) (*AnytrueResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv AnytrueResult
	err := ctx.Invoke("std:index:anytrue", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type AnytrueArgs struct {
	Input []interface{} `pulumi:"input"`
}

type AnytrueResult struct {
	Result bool `pulumi:"result"`
}

func AnytrueOutput(ctx *pulumi.Context, args AnytrueOutputArgs, opts ...pulumi.InvokeOption) AnytrueResultOutput {
	outputResult := pulumix.ApplyErr[*AnytrueArgs](args.ToOutput(), func(plainArgs *AnytrueArgs) (*AnytrueResult, error) {
		return Anytrue(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[AnytrueResultOutput, *AnytrueResult](outputResult)
}

type AnytrueOutputArgs struct {
	Input pulumix.Input[[]interface{}] `pulumi:"input"`
}

func (args AnytrueOutputArgs) ToOutput() pulumix.Output[*AnytrueArgs] {
	allArgs := pulumix.All(
		args.Input.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *AnytrueArgs {
		return &AnytrueArgs{
			Input: resolvedArgs[0].([]interface{}),
		}
	})
}

type AnytrueResultOutput struct{ *pulumi.OutputState }

func (AnytrueResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnytrueResult)(nil)).Elem()
}

func (o AnytrueResultOutput) ToOutput(context.Context) pulumix.Output[*AnytrueResult] {
	return pulumix.Output[*AnytrueResult]{
		OutputState: o.OutputState,
	}
}

func (o AnytrueResultOutput) Result() pulumix.Output[bool] {
	return pulumix.Apply[*AnytrueResult](o, func(v *AnytrueResult) bool { return v.Result })
}
