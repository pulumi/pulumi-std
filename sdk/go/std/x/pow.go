// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package std

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-std/sdk/go/std/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Returns the base input raised to the power of the exponent.
func Pow(ctx *pulumi.Context, args *PowArgs, opts ...pulumi.InvokeOption) (*PowResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv PowResult
	err := ctx.Invoke("std:index:pow", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type PowArgs struct {
	Base     float64 `pulumi:"base"`
	Exponent float64 `pulumi:"exponent"`
}

type PowResult struct {
	Result float64 `pulumi:"result"`
}

func PowOutput(ctx *pulumi.Context, args PowOutputArgs, opts ...pulumi.InvokeOption) PowResultOutput {
	outputResult := pulumix.ApplyErr[*PowArgs](args.ToOutput(), func(plainArgs *PowArgs) (*PowResult, error) {
		return Pow(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[PowResultOutput, *PowResult](outputResult)
}

type PowOutputArgs struct {
	Base     pulumix.Input[float64] `pulumi:"base"`
	Exponent pulumix.Input[float64] `pulumi:"exponent"`
}

func (args PowOutputArgs) ToOutput() pulumix.Output[*PowArgs] {
	allArgs := pulumix.All(
		args.Base.ToOutput(context.Background()).AsAny(),
		args.Exponent.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *PowArgs {
		return &PowArgs{
			Base:     resolvedArgs[0].(float64),
			Exponent: resolvedArgs[1].(float64),
		}
	})
}

type PowResultOutput struct{ *pulumi.OutputState }

func (PowResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PowResult)(nil)).Elem()
}

func (o PowResultOutput) ToOutput(context.Context) pulumix.Output[*PowResult] {
	return pulumix.Output[*PowResult]{
		OutputState: o.OutputState,
	}
}

func (o PowResultOutput) Result() pulumix.Output[float64] {
	return pulumix.Apply[*PowResult](o, func(v *PowResult) float64 { return v.Result })
}
