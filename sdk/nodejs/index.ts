// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AbsArgs, AbsResult, AbsOutputArgs } from "./abs";
export const abs: typeof import("./abs").abs = null as any;
export const absOutput: typeof import("./abs").absOutput = null as any;
utilities.lazyLoad(exports, ["abs","absOutput"], () => require("./abs"));

export { AbspathArgs, AbspathResult, AbspathOutputArgs } from "./abspath";
export const abspath: typeof import("./abspath").abspath = null as any;
export const abspathOutput: typeof import("./abspath").abspathOutput = null as any;
utilities.lazyLoad(exports, ["abspath","abspathOutput"], () => require("./abspath"));

export { AlltrueArgs, AlltrueResult, AlltrueOutputArgs } from "./alltrue";
export const alltrue: typeof import("./alltrue").alltrue = null as any;
export const alltrueOutput: typeof import("./alltrue").alltrueOutput = null as any;
utilities.lazyLoad(exports, ["alltrue","alltrueOutput"], () => require("./alltrue"));

export { AnytrueArgs, AnytrueResult, AnytrueOutputArgs } from "./anytrue";
export const anytrue: typeof import("./anytrue").anytrue = null as any;
export const anytrueOutput: typeof import("./anytrue").anytrueOutput = null as any;
utilities.lazyLoad(exports, ["anytrue","anytrueOutput"], () => require("./anytrue"));

export { Base64decodeArgs, Base64decodeResult, Base64decodeOutputArgs } from "./base64decode";
export const base64decode: typeof import("./base64decode").base64decode = null as any;
export const base64decodeOutput: typeof import("./base64decode").base64decodeOutput = null as any;
utilities.lazyLoad(exports, ["base64decode","base64decodeOutput"], () => require("./base64decode"));

export { Base64encodeArgs, Base64encodeResult, Base64encodeOutputArgs } from "./base64encode";
export const base64encode: typeof import("./base64encode").base64encode = null as any;
export const base64encodeOutput: typeof import("./base64encode").base64encodeOutput = null as any;
utilities.lazyLoad(exports, ["base64encode","base64encodeOutput"], () => require("./base64encode"));

export { Base64gzipArgs, Base64gzipResult, Base64gzipOutputArgs } from "./base64gzip";
export const base64gzip: typeof import("./base64gzip").base64gzip = null as any;
export const base64gzipOutput: typeof import("./base64gzip").base64gzipOutput = null as any;
utilities.lazyLoad(exports, ["base64gzip","base64gzipOutput"], () => require("./base64gzip"));

export { Base64sha256Args, Base64sha256Result, Base64sha256OutputArgs } from "./base64sha256";
export const base64sha256: typeof import("./base64sha256").base64sha256 = null as any;
export const base64sha256Output: typeof import("./base64sha256").base64sha256Output = null as any;
utilities.lazyLoad(exports, ["base64sha256","base64sha256Output"], () => require("./base64sha256"));

export { Base64sha512Args, Base64sha512Result, Base64sha512OutputArgs } from "./base64sha512";
export const base64sha512: typeof import("./base64sha512").base64sha512 = null as any;
export const base64sha512Output: typeof import("./base64sha512").base64sha512Output = null as any;
utilities.lazyLoad(exports, ["base64sha512","base64sha512Output"], () => require("./base64sha512"));

export { BasenameArgs, BasenameResult, BasenameOutputArgs } from "./basename";
export const basename: typeof import("./basename").basename = null as any;
export const basenameOutput: typeof import("./basename").basenameOutput = null as any;
utilities.lazyLoad(exports, ["basename","basenameOutput"], () => require("./basename"));

export { BcryptArgs, BcryptResult, BcryptOutputArgs } from "./bcrypt";
export const bcrypt: typeof import("./bcrypt").bcrypt = null as any;
export const bcryptOutput: typeof import("./bcrypt").bcryptOutput = null as any;
utilities.lazyLoad(exports, ["bcrypt","bcryptOutput"], () => require("./bcrypt"));

export { CeilArgs, CeilResult, CeilOutputArgs } from "./ceil";
export const ceil: typeof import("./ceil").ceil = null as any;
export const ceilOutput: typeof import("./ceil").ceilOutput = null as any;
utilities.lazyLoad(exports, ["ceil","ceilOutput"], () => require("./ceil"));

export { ChompArgs, ChompResult, ChompOutputArgs } from "./chomp";
export const chomp: typeof import("./chomp").chomp = null as any;
export const chompOutput: typeof import("./chomp").chompOutput = null as any;
utilities.lazyLoad(exports, ["chomp","chompOutput"], () => require("./chomp"));

export { ChunklistArgs, ChunklistResult, ChunklistOutputArgs } from "./chunklist";
export const chunklist: typeof import("./chunklist").chunklist = null as any;
export const chunklistOutput: typeof import("./chunklist").chunklistOutput = null as any;
utilities.lazyLoad(exports, ["chunklist","chunklistOutput"], () => require("./chunklist"));

export { CidrhostArgs, CidrhostResult, CidrhostOutputArgs } from "./cidrhost";
export const cidrhost: typeof import("./cidrhost").cidrhost = null as any;
export const cidrhostOutput: typeof import("./cidrhost").cidrhostOutput = null as any;
utilities.lazyLoad(exports, ["cidrhost","cidrhostOutput"], () => require("./cidrhost"));

export { CidrnetmaskArgs, CidrnetmaskResult, CidrnetmaskOutputArgs } from "./cidrnetmask";
export const cidrnetmask: typeof import("./cidrnetmask").cidrnetmask = null as any;
export const cidrnetmaskOutput: typeof import("./cidrnetmask").cidrnetmaskOutput = null as any;
utilities.lazyLoad(exports, ["cidrnetmask","cidrnetmaskOutput"], () => require("./cidrnetmask"));

export { CidrsubnetArgs, CidrsubnetResult, CidrsubnetOutputArgs } from "./cidrsubnet";
export const cidrsubnet: typeof import("./cidrsubnet").cidrsubnet = null as any;
export const cidrsubnetOutput: typeof import("./cidrsubnet").cidrsubnetOutput = null as any;
utilities.lazyLoad(exports, ["cidrsubnet","cidrsubnetOutput"], () => require("./cidrsubnet"));

export { CoalesceArgs, CoalesceResult, CoalesceOutputArgs } from "./coalesce";
export const coalesce: typeof import("./coalesce").coalesce = null as any;
export const coalesceOutput: typeof import("./coalesce").coalesceOutput = null as any;
utilities.lazyLoad(exports, ["coalesce","coalesceOutput"], () => require("./coalesce"));

export { CoalescelistArgs, CoalescelistResult, CoalescelistOutputArgs } from "./coalescelist";
export const coalescelist: typeof import("./coalescelist").coalescelist = null as any;
export const coalescelistOutput: typeof import("./coalescelist").coalescelistOutput = null as any;
utilities.lazyLoad(exports, ["coalescelist","coalescelistOutput"], () => require("./coalescelist"));

export { CompactArgs, CompactResult, CompactOutputArgs } from "./compact";
export const compact: typeof import("./compact").compact = null as any;
export const compactOutput: typeof import("./compact").compactOutput = null as any;
utilities.lazyLoad(exports, ["compact","compactOutput"], () => require("./compact"));

export { ConcatArgs, ConcatResult, ConcatOutputArgs } from "./concat";
export const concat: typeof import("./concat").concat = null as any;
export const concatOutput: typeof import("./concat").concatOutput = null as any;
utilities.lazyLoad(exports, ["concat","concatOutput"], () => require("./concat"));

export { ContainsArgs, ContainsResult, ContainsOutputArgs } from "./contains";
export const contains: typeof import("./contains").contains = null as any;
export const containsOutput: typeof import("./contains").containsOutput = null as any;
utilities.lazyLoad(exports, ["contains","containsOutput"], () => require("./contains"));

export { CsvdecodeArgs, CsvdecodeResult, CsvdecodeOutputArgs } from "./csvdecode";
export const csvdecode: typeof import("./csvdecode").csvdecode = null as any;
export const csvdecodeOutput: typeof import("./csvdecode").csvdecodeOutput = null as any;
utilities.lazyLoad(exports, ["csvdecode","csvdecodeOutput"], () => require("./csvdecode"));

export { DirnameArgs, DirnameResult, DirnameOutputArgs } from "./dirname";
export const dirname: typeof import("./dirname").dirname = null as any;
export const dirnameOutput: typeof import("./dirname").dirnameOutput = null as any;
utilities.lazyLoad(exports, ["dirname","dirnameOutput"], () => require("./dirname"));

export { DistinctArgs, DistinctResult, DistinctOutputArgs } from "./distinct";
export const distinct: typeof import("./distinct").distinct = null as any;
export const distinctOutput: typeof import("./distinct").distinctOutput = null as any;
utilities.lazyLoad(exports, ["distinct","distinctOutput"], () => require("./distinct"));

export { ElementArgs, ElementResult, ElementOutputArgs } from "./element";
export const element: typeof import("./element").element = null as any;
export const elementOutput: typeof import("./element").elementOutput = null as any;
utilities.lazyLoad(exports, ["element","elementOutput"], () => require("./element"));

export { EndswithArgs, EndswithResult, EndswithOutputArgs } from "./endswith";
export const endswith: typeof import("./endswith").endswith = null as any;
export const endswithOutput: typeof import("./endswith").endswithOutput = null as any;
utilities.lazyLoad(exports, ["endswith","endswithOutput"], () => require("./endswith"));

export { FileArgs, FileResult, FileOutputArgs } from "./file";
export const file: typeof import("./file").file = null as any;
export const fileOutput: typeof import("./file").fileOutput = null as any;
utilities.lazyLoad(exports, ["file","fileOutput"], () => require("./file"));

export { Filebase64Args, Filebase64Result, Filebase64OutputArgs } from "./filebase64";
export const filebase64: typeof import("./filebase64").filebase64 = null as any;
export const filebase64Output: typeof import("./filebase64").filebase64Output = null as any;
utilities.lazyLoad(exports, ["filebase64","filebase64Output"], () => require("./filebase64"));

export { Filebase64sha256Args, Filebase64sha256Result, Filebase64sha256OutputArgs } from "./filebase64sha256";
export const filebase64sha256: typeof import("./filebase64sha256").filebase64sha256 = null as any;
export const filebase64sha256Output: typeof import("./filebase64sha256").filebase64sha256Output = null as any;
utilities.lazyLoad(exports, ["filebase64sha256","filebase64sha256Output"], () => require("./filebase64sha256"));

export { Filebase64sha512Args, Filebase64sha512Result, Filebase64sha512OutputArgs } from "./filebase64sha512";
export const filebase64sha512: typeof import("./filebase64sha512").filebase64sha512 = null as any;
export const filebase64sha512Output: typeof import("./filebase64sha512").filebase64sha512Output = null as any;
utilities.lazyLoad(exports, ["filebase64sha512","filebase64sha512Output"], () => require("./filebase64sha512"));

export { FileexistsArgs, FileexistsResult, FileexistsOutputArgs } from "./fileexists";
export const fileexists: typeof import("./fileexists").fileexists = null as any;
export const fileexistsOutput: typeof import("./fileexists").fileexistsOutput = null as any;
utilities.lazyLoad(exports, ["fileexists","fileexistsOutput"], () => require("./fileexists"));

export { Filemd5Args, Filemd5Result, Filemd5OutputArgs } from "./filemd5";
export const filemd5: typeof import("./filemd5").filemd5 = null as any;
export const filemd5Output: typeof import("./filemd5").filemd5Output = null as any;
utilities.lazyLoad(exports, ["filemd5","filemd5Output"], () => require("./filemd5"));

export { Filesha1Args, Filesha1Result, Filesha1OutputArgs } from "./filesha1";
export const filesha1: typeof import("./filesha1").filesha1 = null as any;
export const filesha1Output: typeof import("./filesha1").filesha1Output = null as any;
utilities.lazyLoad(exports, ["filesha1","filesha1Output"], () => require("./filesha1"));

export { Filesha256Args, Filesha256Result, Filesha256OutputArgs } from "./filesha256";
export const filesha256: typeof import("./filesha256").filesha256 = null as any;
export const filesha256Output: typeof import("./filesha256").filesha256Output = null as any;
utilities.lazyLoad(exports, ["filesha256","filesha256Output"], () => require("./filesha256"));

export { Filesha512Args, Filesha512Result, Filesha512OutputArgs } from "./filesha512";
export const filesha512: typeof import("./filesha512").filesha512 = null as any;
export const filesha512Output: typeof import("./filesha512").filesha512Output = null as any;
utilities.lazyLoad(exports, ["filesha512","filesha512Output"], () => require("./filesha512"));

export { FlattenArgs, FlattenResult, FlattenOutputArgs } from "./flatten";
export const flatten: typeof import("./flatten").flatten = null as any;
export const flattenOutput: typeof import("./flatten").flattenOutput = null as any;
utilities.lazyLoad(exports, ["flatten","flattenOutput"], () => require("./flatten"));

export { FloorArgs, FloorResult, FloorOutputArgs } from "./floor";
export const floor: typeof import("./floor").floor = null as any;
export const floorOutput: typeof import("./floor").floorOutput = null as any;
utilities.lazyLoad(exports, ["floor","floorOutput"], () => require("./floor"));

export { FormatArgs, FormatResult, FormatOutputArgs } from "./format";
export const format: typeof import("./format").format = null as any;
export const formatOutput: typeof import("./format").formatOutput = null as any;
utilities.lazyLoad(exports, ["format","formatOutput"], () => require("./format"));

export { IndentArgs, IndentResult, IndentOutputArgs } from "./indent";
export const indent: typeof import("./indent").indent = null as any;
export const indentOutput: typeof import("./indent").indentOutput = null as any;
utilities.lazyLoad(exports, ["indent","indentOutput"], () => require("./indent"));

export { IndexArgs, IndexResult, IndexOutputArgs } from "./index_";
export const index: typeof import("./index_").index = null as any;
export const indexOutput: typeof import("./index_").indexOutput = null as any;
utilities.lazyLoad(exports, ["index","indexOutput"], () => require("./index_"));

export { JoinArgs, JoinResult, JoinOutputArgs } from "./join";
export const join: typeof import("./join").join = null as any;
export const joinOutput: typeof import("./join").joinOutput = null as any;
utilities.lazyLoad(exports, ["join","joinOutput"], () => require("./join"));

export { JsondecodeArgs, JsondecodeResult, JsondecodeOutputArgs } from "./jsondecode";
export const jsondecode: typeof import("./jsondecode").jsondecode = null as any;
export const jsondecodeOutput: typeof import("./jsondecode").jsondecodeOutput = null as any;
utilities.lazyLoad(exports, ["jsondecode","jsondecodeOutput"], () => require("./jsondecode"));

export { JsonencodeArgs, JsonencodeResult, JsonencodeOutputArgs } from "./jsonencode";
export const jsonencode: typeof import("./jsonencode").jsonencode = null as any;
export const jsonencodeOutput: typeof import("./jsonencode").jsonencodeOutput = null as any;
utilities.lazyLoad(exports, ["jsonencode","jsonencodeOutput"], () => require("./jsonencode"));

export { KeysArgs, KeysResult, KeysOutputArgs } from "./keys";
export const keys: typeof import("./keys").keys = null as any;
export const keysOutput: typeof import("./keys").keysOutput = null as any;
utilities.lazyLoad(exports, ["keys","keysOutput"], () => require("./keys"));

export { LengthArgs, LengthResult, LengthOutputArgs } from "./length";
export const length: typeof import("./length").length = null as any;
export const lengthOutput: typeof import("./length").lengthOutput = null as any;
utilities.lazyLoad(exports, ["length","lengthOutput"], () => require("./length"));

export { LogArgs, LogResult, LogOutputArgs } from "./log";
export const log: typeof import("./log").log = null as any;
export const logOutput: typeof import("./log").logOutput = null as any;
utilities.lazyLoad(exports, ["log","logOutput"], () => require("./log"));

export { LookupArgs, LookupResult, LookupOutputArgs } from "./lookup";
export const lookup: typeof import("./lookup").lookup = null as any;
export const lookupOutput: typeof import("./lookup").lookupOutput = null as any;
utilities.lazyLoad(exports, ["lookup","lookupOutput"], () => require("./lookup"));

export { LowerArgs, LowerResult, LowerOutputArgs } from "./lower";
export const lower: typeof import("./lower").lower = null as any;
export const lowerOutput: typeof import("./lower").lowerOutput = null as any;
utilities.lazyLoad(exports, ["lower","lowerOutput"], () => require("./lower"));

export { MapArgs, MapResult, MapOutputArgs } from "./map";
export const map: typeof import("./map").map = null as any;
export const mapOutput: typeof import("./map").mapOutput = null as any;
utilities.lazyLoad(exports, ["map","mapOutput"], () => require("./map"));

export { MatchkeysArgs, MatchkeysResult, MatchkeysOutputArgs } from "./matchkeys";
export const matchkeys: typeof import("./matchkeys").matchkeys = null as any;
export const matchkeysOutput: typeof import("./matchkeys").matchkeysOutput = null as any;
utilities.lazyLoad(exports, ["matchkeys","matchkeysOutput"], () => require("./matchkeys"));

export { MaxArgs, MaxResult, MaxOutputArgs } from "./max";
export const max: typeof import("./max").max = null as any;
export const maxOutput: typeof import("./max").maxOutput = null as any;
utilities.lazyLoad(exports, ["max","maxOutput"], () => require("./max"));

export { Md5Args, Md5Result, Md5OutputArgs } from "./md5";
export const md5: typeof import("./md5").md5 = null as any;
export const md5Output: typeof import("./md5").md5Output = null as any;
utilities.lazyLoad(exports, ["md5","md5Output"], () => require("./md5"));

export { MergeArgs, MergeResult, MergeOutputArgs } from "./merge";
export const merge: typeof import("./merge").merge = null as any;
export const mergeOutput: typeof import("./merge").mergeOutput = null as any;
utilities.lazyLoad(exports, ["merge","mergeOutput"], () => require("./merge"));

export { MinArgs, MinResult, MinOutputArgs } from "./min";
export const min: typeof import("./min").min = null as any;
export const minOutput: typeof import("./min").minOutput = null as any;
utilities.lazyLoad(exports, ["min","minOutput"], () => require("./min"));

export { ParseintArgs, ParseintResult, ParseintOutputArgs } from "./parseint";
export const parseint: typeof import("./parseint").parseint = null as any;
export const parseintOutput: typeof import("./parseint").parseintOutput = null as any;
utilities.lazyLoad(exports, ["parseint","parseintOutput"], () => require("./parseint"));

export { PathexpandArgs, PathexpandResult, PathexpandOutputArgs } from "./pathexpand";
export const pathexpand: typeof import("./pathexpand").pathexpand = null as any;
export const pathexpandOutput: typeof import("./pathexpand").pathexpandOutput = null as any;
utilities.lazyLoad(exports, ["pathexpand","pathexpandOutput"], () => require("./pathexpand"));

export { PowArgs, PowResult, PowOutputArgs } from "./pow";
export const pow: typeof import("./pow").pow = null as any;
export const powOutput: typeof import("./pow").powOutput = null as any;
utilities.lazyLoad(exports, ["pow","powOutput"], () => require("./pow"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RangeArgs, RangeResult, RangeOutputArgs } from "./range";
export const range: typeof import("./range").range = null as any;
export const rangeOutput: typeof import("./range").rangeOutput = null as any;
utilities.lazyLoad(exports, ["range","rangeOutput"], () => require("./range"));

export { ReplaceArgs, ReplaceResult, ReplaceOutputArgs } from "./replace";
export const replace: typeof import("./replace").replace = null as any;
export const replaceOutput: typeof import("./replace").replaceOutput = null as any;
utilities.lazyLoad(exports, ["replace","replaceOutput"], () => require("./replace"));

export { ReverseArgs, ReverseResult, ReverseOutputArgs } from "./reverse";
export const reverse: typeof import("./reverse").reverse = null as any;
export const reverseOutput: typeof import("./reverse").reverseOutput = null as any;
utilities.lazyLoad(exports, ["reverse","reverseOutput"], () => require("./reverse"));

export { Rfc3339tounixArgs, Rfc3339tounixResult, Rfc3339tounixOutputArgs } from "./rfc3339tounix";
export const rfc3339tounix: typeof import("./rfc3339tounix").rfc3339tounix = null as any;
export const rfc3339tounixOutput: typeof import("./rfc3339tounix").rfc3339tounixOutput = null as any;
utilities.lazyLoad(exports, ["rfc3339tounix","rfc3339tounixOutput"], () => require("./rfc3339tounix"));

export { RsadecryptArgs, RsadecryptResult, RsadecryptOutputArgs } from "./rsadecrypt";
export const rsadecrypt: typeof import("./rsadecrypt").rsadecrypt = null as any;
export const rsadecryptOutput: typeof import("./rsadecrypt").rsadecryptOutput = null as any;
utilities.lazyLoad(exports, ["rsadecrypt","rsadecryptOutput"], () => require("./rsadecrypt"));

export { Sha1Args, Sha1Result, Sha1OutputArgs } from "./sha1";
export const sha1: typeof import("./sha1").sha1 = null as any;
export const sha1Output: typeof import("./sha1").sha1Output = null as any;
utilities.lazyLoad(exports, ["sha1","sha1Output"], () => require("./sha1"));

export { Sha256Args, Sha256Result, Sha256OutputArgs } from "./sha256";
export const sha256: typeof import("./sha256").sha256 = null as any;
export const sha256Output: typeof import("./sha256").sha256Output = null as any;
utilities.lazyLoad(exports, ["sha256","sha256Output"], () => require("./sha256"));

export { Sha512Args, Sha512Result, Sha512OutputArgs } from "./sha512";
export const sha512: typeof import("./sha512").sha512 = null as any;
export const sha512Output: typeof import("./sha512").sha512Output = null as any;
utilities.lazyLoad(exports, ["sha512","sha512Output"], () => require("./sha512"));

export { SignumArgs, SignumResult, SignumOutputArgs } from "./signum";
export const signum: typeof import("./signum").signum = null as any;
export const signumOutput: typeof import("./signum").signumOutput = null as any;
utilities.lazyLoad(exports, ["signum","signumOutput"], () => require("./signum"));

export { SliceArgs, SliceResult, SliceOutputArgs } from "./slice";
export const slice: typeof import("./slice").slice = null as any;
export const sliceOutput: typeof import("./slice").sliceOutput = null as any;
utilities.lazyLoad(exports, ["slice","sliceOutput"], () => require("./slice"));

export { SortArgs, SortResult, SortOutputArgs } from "./sort";
export const sort: typeof import("./sort").sort = null as any;
export const sortOutput: typeof import("./sort").sortOutput = null as any;
utilities.lazyLoad(exports, ["sort","sortOutput"], () => require("./sort"));

export { SplitArgs, SplitResult, SplitOutputArgs } from "./split";
export const split: typeof import("./split").split = null as any;
export const splitOutput: typeof import("./split").splitOutput = null as any;
utilities.lazyLoad(exports, ["split","splitOutput"], () => require("./split"));

export { StartswithArgs, StartswithResult, StartswithOutputArgs } from "./startswith";
export const startswith: typeof import("./startswith").startswith = null as any;
export const startswithOutput: typeof import("./startswith").startswithOutput = null as any;
utilities.lazyLoad(exports, ["startswith","startswithOutput"], () => require("./startswith"));

export { StrrevArgs, StrrevResult, StrrevOutputArgs } from "./strrev";
export const strrev: typeof import("./strrev").strrev = null as any;
export const strrevOutput: typeof import("./strrev").strrevOutput = null as any;
utilities.lazyLoad(exports, ["strrev","strrevOutput"], () => require("./strrev"));

export { SubstrArgs, SubstrResult, SubstrOutputArgs } from "./substr";
export const substr: typeof import("./substr").substr = null as any;
export const substrOutput: typeof import("./substr").substrOutput = null as any;
utilities.lazyLoad(exports, ["substr","substrOutput"], () => require("./substr"));

export { SumArgs, SumResult, SumOutputArgs } from "./sum";
export const sum: typeof import("./sum").sum = null as any;
export const sumOutput: typeof import("./sum").sumOutput = null as any;
utilities.lazyLoad(exports, ["sum","sumOutput"], () => require("./sum"));

export { TimeaddArgs, TimeaddResult, TimeaddOutputArgs } from "./timeadd";
export const timeadd: typeof import("./timeadd").timeadd = null as any;
export const timeaddOutput: typeof import("./timeadd").timeaddOutput = null as any;
utilities.lazyLoad(exports, ["timeadd","timeaddOutput"], () => require("./timeadd"));

export { TimecmpArgs, TimecmpResult, TimecmpOutputArgs } from "./timecmp";
export const timecmp: typeof import("./timecmp").timecmp = null as any;
export const timecmpOutput: typeof import("./timecmp").timecmpOutput = null as any;
utilities.lazyLoad(exports, ["timecmp","timecmpOutput"], () => require("./timecmp"));

export { TimestampArgs, TimestampResult } from "./timestamp";
export const timestamp: typeof import("./timestamp").timestamp = null as any;
export const timestampOutput: typeof import("./timestamp").timestampOutput = null as any;
utilities.lazyLoad(exports, ["timestamp","timestampOutput"], () => require("./timestamp"));

export { TitleArgs, TitleResult, TitleOutputArgs } from "./title";
export const title: typeof import("./title").title = null as any;
export const titleOutput: typeof import("./title").titleOutput = null as any;
utilities.lazyLoad(exports, ["title","titleOutput"], () => require("./title"));

export { ToboolArgs, ToboolResult, ToboolOutputArgs } from "./tobool";
export const tobool: typeof import("./tobool").tobool = null as any;
export const toboolOutput: typeof import("./tobool").toboolOutput = null as any;
utilities.lazyLoad(exports, ["tobool","toboolOutput"], () => require("./tobool"));

export { TolistArgs, TolistResult, TolistOutputArgs } from "./tolist";
export const tolist: typeof import("./tolist").tolist = null as any;
export const tolistOutput: typeof import("./tolist").tolistOutput = null as any;
utilities.lazyLoad(exports, ["tolist","tolistOutput"], () => require("./tolist"));

export { TonumberArgs, TonumberResult, TonumberOutputArgs } from "./tonumber";
export const tonumber: typeof import("./tonumber").tonumber = null as any;
export const tonumberOutput: typeof import("./tonumber").tonumberOutput = null as any;
utilities.lazyLoad(exports, ["tonumber","tonumberOutput"], () => require("./tonumber"));

export { TosetArgs, TosetResult, TosetOutputArgs } from "./toset";
export const toset: typeof import("./toset").toset = null as any;
export const tosetOutput: typeof import("./toset").tosetOutput = null as any;
utilities.lazyLoad(exports, ["toset","tosetOutput"], () => require("./toset"));

export { TostringArgs, TostringResult, TostringOutputArgs } from "./tostring";
export const tostring: typeof import("./tostring").tostring = null as any;
export const tostringOutput: typeof import("./tostring").tostringOutput = null as any;
utilities.lazyLoad(exports, ["tostring","tostringOutput"], () => require("./tostring"));

export { TransposeArgs, TransposeResult, TransposeOutputArgs } from "./transpose";
export const transpose: typeof import("./transpose").transpose = null as any;
export const transposeOutput: typeof import("./transpose").transposeOutput = null as any;
utilities.lazyLoad(exports, ["transpose","transposeOutput"], () => require("./transpose"));

export { TrimArgs, TrimResult, TrimOutputArgs } from "./trim";
export const trim: typeof import("./trim").trim = null as any;
export const trimOutput: typeof import("./trim").trimOutput = null as any;
utilities.lazyLoad(exports, ["trim","trimOutput"], () => require("./trim"));

export { TrimprefixArgs, TrimprefixResult, TrimprefixOutputArgs } from "./trimprefix";
export const trimprefix: typeof import("./trimprefix").trimprefix = null as any;
export const trimprefixOutput: typeof import("./trimprefix").trimprefixOutput = null as any;
utilities.lazyLoad(exports, ["trimprefix","trimprefixOutput"], () => require("./trimprefix"));

export { TrimspaceArgs, TrimspaceResult, TrimspaceOutputArgs } from "./trimspace";
export const trimspace: typeof import("./trimspace").trimspace = null as any;
export const trimspaceOutput: typeof import("./trimspace").trimspaceOutput = null as any;
utilities.lazyLoad(exports, ["trimspace","trimspaceOutput"], () => require("./trimspace"));

export { TrimsuffixArgs, TrimsuffixResult, TrimsuffixOutputArgs } from "./trimsuffix";
export const trimsuffix: typeof import("./trimsuffix").trimsuffix = null as any;
export const trimsuffixOutput: typeof import("./trimsuffix").trimsuffixOutput = null as any;
utilities.lazyLoad(exports, ["trimsuffix","trimsuffixOutput"], () => require("./trimsuffix"));

export { Unixtorfc3999Args, Unixtorfc3999Result, Unixtorfc3999OutputArgs } from "./unixtorfc3999";
export const unixtorfc3999: typeof import("./unixtorfc3999").unixtorfc3999 = null as any;
export const unixtorfc3999Output: typeof import("./unixtorfc3999").unixtorfc3999Output = null as any;
utilities.lazyLoad(exports, ["unixtorfc3999","unixtorfc3999Output"], () => require("./unixtorfc3999"));

export { UpperArgs, UpperResult, UpperOutputArgs } from "./upper";
export const upper: typeof import("./upper").upper = null as any;
export const upperOutput: typeof import("./upper").upperOutput = null as any;
utilities.lazyLoad(exports, ["upper","upperOutput"], () => require("./upper"));

export { UrlencodeArgs, UrlencodeResult, UrlencodeOutputArgs } from "./urlencode";
export const urlencode: typeof import("./urlencode").urlencode = null as any;
export const urlencodeOutput: typeof import("./urlencode").urlencodeOutput = null as any;
utilities.lazyLoad(exports, ["urlencode","urlencodeOutput"], () => require("./urlencode"));

export { UuidArgs, UuidResult } from "./uuid";
export const uuid: typeof import("./uuid").uuid = null as any;
export const uuidOutput: typeof import("./uuid").uuidOutput = null as any;
utilities.lazyLoad(exports, ["uuid","uuidOutput"], () => require("./uuid"));

export { ValuesArgs, ValuesResult, ValuesOutputArgs } from "./values";
export const values: typeof import("./values").values = null as any;
export const valuesOutput: typeof import("./values").valuesOutput = null as any;
utilities.lazyLoad(exports, ["values","valuesOutput"], () => require("./values"));

export { ZipmapArgs, ZipmapResult, ZipmapOutputArgs } from "./zipmap";
export const zipmap: typeof import("./zipmap").zipmap = null as any;
export const zipmapOutput: typeof import("./zipmap").zipmapOutput = null as any;
utilities.lazyLoad(exports, ["zipmap","zipmapOutput"], () => require("./zipmap"));

pulumi.runtime.registerResourcePackage("std", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:std") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
