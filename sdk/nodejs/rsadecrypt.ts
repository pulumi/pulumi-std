// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Decrypts an RSA-encrypted ciphertext.
 * The cipher text must be base64-encoded and the key must be in PEM format.
 */
export function rsadecrypt(args: RsadecryptArgs, opts?: pulumi.InvokeOptions): Promise<RsadecryptResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:rsadecrypt", {
        "cipherText": args.cipherText,
        "key": args.key,
    }, opts);
}

export interface RsadecryptArgs {
    cipherText: string;
    key: string;
}

export interface RsadecryptResult {
    readonly result: string;
}
/**
 * Decrypts an RSA-encrypted ciphertext.
 * The cipher text must be base64-encoded and the key must be in PEM format.
 */
export function rsadecryptOutput(args: RsadecryptOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<RsadecryptResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:rsadecrypt", {
        "cipherText": args.cipherText,
        "key": args.key,
    }, opts);
}

export interface RsadecryptOutputArgs {
    cipherText: pulumi.Input<string>;
    key: pulumi.Input<string>;
}
