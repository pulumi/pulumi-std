// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Returns a JSON-encoded representation of the given value,
 * which can contain arbitrarily-nested lists and maps.
 * Note that if the value is a string then its value will be placed in quotes.
 */
export function jsonencode(args: JsonencodeArgs, opts?: pulumi.InvokeOptions): Promise<JsonencodeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:jsonencode", {
        "input": args.input,
    }, opts);
}

export interface JsonencodeArgs {
    input: any;
}

export interface JsonencodeResult {
    readonly result: string;
}
/**
 * Returns a JSON-encoded representation of the given value,
 * which can contain arbitrarily-nested lists and maps.
 * Note that if the value is a string then its value will be placed in quotes.
 */
export function jsonencodeOutput(args: JsonencodeOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<JsonencodeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:jsonencode", {
        "input": args.input,
    }, opts);
}

export interface JsonencodeOutputArgs {
    input: any;
}
