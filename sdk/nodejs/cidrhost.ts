// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Takes an IP address range in CIDR notation as input
 * and creates an IP address with the given host number.
 * If given host number is negative, the count starts from the end of the range.
 * For example, cidrhost("10.0.0.0/8", 2) returns 10.0.0.2 and cidrhost("10.0.0.0/8", -2) returns 10.255.255.254.
 */
export function cidrhost(args: CidrhostArgs, opts?: pulumi.InvokeOptions): Promise<CidrhostResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:cidrhost", {
        "host": args.host,
        "input": args.input,
    }, opts);
}

export interface CidrhostArgs {
    host: number;
    input: string;
}

export interface CidrhostResult {
    readonly result: string;
}
/**
 * Takes an IP address range in CIDR notation as input
 * and creates an IP address with the given host number.
 * If given host number is negative, the count starts from the end of the range.
 * For example, cidrhost("10.0.0.0/8", 2) returns 10.0.0.2 and cidrhost("10.0.0.0/8", -2) returns 10.255.255.254.
 */
export function cidrhostOutput(args: CidrhostOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<CidrhostResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:cidrhost", {
        "host": args.host,
        "input": args.input,
    }, opts);
}

export interface CidrhostOutputArgs {
    host: pulumi.Input<number>;
    input: pulumi.Input<string>;
}
