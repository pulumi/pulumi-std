// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Adds a duration to a timestamp, returning a new timestamp.
 * 	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
 * 	'timestamp' must be a string adhering this syntax, i.e. "2017-11-22T00:00:00Z".
 * 	'duration' is a string representation of a time difference, comprised of sequences of
 * 	numbers and unit pairs, i.e. "3.5h" or "2h15m".
 * 	Accepted units are "ns", "us" or "µs", "ms", "s", "m", and "h". The first number may be negative
 * 	to provide a negative duration, i.e. "-2h15m".
 */
export function timeadd(args: TimeaddArgs, opts?: pulumi.InvokeOptions): Promise<TimeaddResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:timeadd", {
        "duration": args.duration,
        "timestamp": args.timestamp,
    }, opts);
}

export interface TimeaddArgs {
    duration: string;
    timestamp: string;
}

export interface TimeaddResult {
    readonly result: string;
}
/**
 * Adds a duration to a timestamp, returning a new timestamp.
 * 	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
 * 	'timestamp' must be a string adhering this syntax, i.e. "2017-11-22T00:00:00Z".
 * 	'duration' is a string representation of a time difference, comprised of sequences of
 * 	numbers and unit pairs, i.e. "3.5h" or "2h15m".
 * 	Accepted units are "ns", "us" or "µs", "ms", "s", "m", and "h". The first number may be negative
 * 	to provide a negative duration, i.e. "-2h15m".
 */
export function timeaddOutput(args: TimeaddOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<TimeaddResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:timeadd", {
        "duration": args.duration,
        "timestamp": args.timestamp,
    }, opts);
}

export interface TimeaddOutputArgs {
    duration: pulumi.Input<string>;
    timestamp: pulumi.Input<string>;
}
