// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Returns the Blowfish encrypted hash of the string at the given cost.
 * A default cost of 10 will be used if not provided.
 */
export function bcrypt(args: BcryptArgs, opts?: pulumi.InvokeOptions): Promise<BcryptResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:bcrypt", {
        "cost": args.cost,
        "input": args.input,
    }, opts);
}

export interface BcryptArgs {
    cost?: number;
    input: string;
}

export interface BcryptResult {
    readonly result: string;
}
/**
 * Returns the Blowfish encrypted hash of the string at the given cost.
 * A default cost of 10 will be used if not provided.
 */
export function bcryptOutput(args: BcryptOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<BcryptResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:bcrypt", {
        "cost": args.cost,
        "input": args.input,
    }, opts);
}

export interface BcryptOutputArgs {
    cost?: pulumi.Input<number>;
    input: pulumi.Input<string>;
}
