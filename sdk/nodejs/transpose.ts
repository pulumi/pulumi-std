// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Takes a map of lists of strings and swaps the keys and values to return a new map of lists of strings.
 */
export function transpose(args: TransposeArgs, opts?: pulumi.InvokeOptions): Promise<TransposeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:transpose", {
        "input": args.input,
    }, opts);
}

export interface TransposeArgs {
    input: {[key: string]: string[]};
}

export interface TransposeResult {
    readonly result: {[key: string]: string[]};
}
/**
 * Takes a map of lists of strings and swaps the keys and values to return a new map of lists of strings.
 */
export function transposeOutput(args: TransposeOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<TransposeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:transpose", {
        "input": args.input,
    }, opts);
}

export interface TransposeOutputArgs {
    input: pulumi.Input<{[key: string]: pulumi.Input<pulumi.Input<string>[]>}>;
}
