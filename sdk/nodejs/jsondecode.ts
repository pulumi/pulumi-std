// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Interprets a given string as JSON and returns a represetation
 * 	of the result of decoding that string.
 * 	If input is not valid JSON, the result will be the input unchanged.
 */
export function jsondecode(args: JsondecodeArgs, opts?: pulumi.InvokeOptions): Promise<JsondecodeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:jsondecode", {
        "input": args.input,
    }, opts);
}

export interface JsondecodeArgs {
    input: string;
}

export interface JsondecodeResult {
    readonly result: any;
}
/**
 * Interprets a given string as JSON and returns a represetation
 * 	of the result of decoding that string.
 * 	If input is not valid JSON, the result will be the input unchanged.
 */
export function jsondecodeOutput(args: JsondecodeOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<JsondecodeResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:jsondecode", {
        "input": args.input,
    }, opts);
}

export interface JsondecodeOutputArgs {
    input: pulumi.Input<string>;
}
