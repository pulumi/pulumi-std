// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Performs a dynamic lookup into a map variable.
 */
export function lookup(args: LookupArgs, opts?: pulumi.InvokeOptions): Promise<LookupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:lookup", {
        "default": args.default,
        "key": args.key,
        "map": args.map,
    }, opts);
}

export interface LookupArgs {
    default?: any;
    key: string;
    map: {[key: string]: any};
}

export interface LookupResult {
    readonly result: any;
}
/**
 * Performs a dynamic lookup into a map variable.
 */
export function lookupOutput(args: LookupOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<LookupResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:lookup", {
        "default": args.default,
        "key": args.key,
        "map": args.map,
    }, opts);
}

export interface LookupOutputArgs {
    default?: any;
    key: pulumi.Input<string>;
    map: pulumi.Input<{[key: string]: any}>;
}
