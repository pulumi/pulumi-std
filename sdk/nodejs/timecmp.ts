// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Compares two timestamps and returns a number that represents the ordering
 * 	of the instants those timestamps represent.
 * 	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
 * 	Both timestamps must be strings adhering this syntax, i.e. "2017-11-22T00:00:00Z".
 * 	If 'timestamp_a' is before 'timestamp_b', -1 is returned.
 * 	If 'timestamp_a' is equal to 'timestamp_b', 0 is returned.
 * 	If 'timestamp_a' is after 'timestamp_b', 1 is returned.
 */
export function timecmp(args: TimecmpArgs, opts?: pulumi.InvokeOptions): Promise<TimecmpResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:timecmp", {
        "timestampa": args.timestampa,
        "timestampb": args.timestampb,
    }, opts);
}

export interface TimecmpArgs {
    timestampa: string;
    timestampb: string;
}

export interface TimecmpResult {
    readonly result: number;
}
/**
 * Compares two timestamps and returns a number that represents the ordering
 * 	of the instants those timestamps represent.
 * 	Timestamps are represented as strings using RFC 3339 "Date and time format" syntax.
 * 	Both timestamps must be strings adhering this syntax, i.e. "2017-11-22T00:00:00Z".
 * 	If 'timestamp_a' is before 'timestamp_b', -1 is returned.
 * 	If 'timestamp_a' is equal to 'timestamp_b', 0 is returned.
 * 	If 'timestamp_a' is after 'timestamp_b', 1 is returned.
 */
export function timecmpOutput(args: TimecmpOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<TimecmpResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:timecmp", {
        "timestampa": args.timestampa,
        "timestampb": args.timestampb,
    }, opts);
}

export interface TimecmpOutputArgs {
    timestampa: pulumi.Input<string>;
    timestampb: pulumi.Input<string>;
}
