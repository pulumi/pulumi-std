// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Returns the portion of list between from (inclusive) and to (exclusive).
 */
export function slice(args: SliceArgs, opts?: pulumi.InvokeOptions): Promise<SliceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:slice", {
        "from": args.from,
        "list": args.list,
        "to": args.to,
    }, opts);
}

export interface SliceArgs {
    from?: number;
    list: any[];
    to?: number;
}

export interface SliceResult {
    readonly result: any[];
}
/**
 * Returns the portion of list between from (inclusive) and to (exclusive).
 */
export function sliceOutput(args: SliceOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<SliceResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:slice", {
        "from": args.from,
        "list": args.list,
        "to": args.to,
    }, opts);
}

export interface SliceOutputArgs {
    from?: pulumi.Input<number>;
    list: pulumi.Input<any[]>;
    to?: pulumi.Input<number>;
}
