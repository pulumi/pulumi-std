// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Returns a list of all matches of a regular expression in a string (including named or indexed groups).
 */
export function regexall(args: RegexallArgs, opts?: pulumi.InvokeOptions): Promise<RegexallResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("std:index:regexall", {
        "pattern": args.pattern,
        "string": args.string,
    }, opts);
}

export interface RegexallArgs {
    pattern: string;
    string: string;
}

export interface RegexallResult {
    readonly result: any[];
}
/**
 * Returns a list of all matches of a regular expression in a string (including named or indexed groups).
 */
export function regexallOutput(args: RegexallOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<RegexallResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("std:index:regexall", {
        "pattern": args.pattern,
        "string": args.string,
    }, opts);
}

export interface RegexallOutputArgs {
    pattern: pulumi.Input<string>;
    string: pulumi.Input<string>;
}
