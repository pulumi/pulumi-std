{
  "name": "std",
  "displayName": "StandardLibrary",
  "version": "1.0.0",
  "description": "Standard library functions",
  "homepage": "https://github.com/pulumi/pulumi-std",
  "repository": "https://github.com/pulumi/pulumi-std",
  "publisher": "Pulumi",
  "meta": {
    "moduleFormat": "(.*)"
  },
  "language": {
    "csharp": {
      "packageReferences": {
        "Pulumi": "3.*"
      }
    },
    "nodejs": {
      "dependencies": {
        "@pulumi/pulumi": "^3.0.0"
      },
      "respectSchemaVersion": true
    }
  },
  "config": {},
  "provider": {
    "type": "object"
  },
  "functions": {
    "std:index:abs": {
      "description": "Returns the absolute value of a given float. \nExample: abs(1) returns 1, and abs(-1) would also return 1, whereas abs(-3.14) would return 3.14.",
      "inputs": {
        "properties": {
          "input": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:base64decode": {
      "description": "Given a base64-encoded string, decodes it and returns the original string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:base64encode": {
      "description": "Returns a base64-encoded representation of the given string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:base64gzip": {
      "description": "Compresses the given string with gzip and then encodes the result to base64.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:base64sha256": {
      "description": "Returns a base64-encoded representation of raw SHA-256 sum of the given string. \nThis is not equivalent of base64encode(sha256(string)) since sha256() returns hexadecimal representation.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:base64sha512": {
      "description": "Returns a base64-encoded representation of raw SHA-512 sum of the given string. \nThis is not equivalent of base64encode(sha512(string)) since sha512() returns hexadecimal representation.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:basename": {
      "description": "Returns the last element of the input path.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:bcrypt": {
      "description": "Returns the Blowfish encrypted hash of the string at the given cost. \nA default cost of 10 will be used if not provided.",
      "inputs": {
        "properties": {
          "cost": {
            "type": "integer"
          },
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:ceil": {
      "description": "Returns the least integer value greater than or equal to the argument.",
      "inputs": {
        "properties": {
          "input": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:chomp": {
      "description": "Removes one or more newline characters from the end of the given string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:chunklist": {
      "description": "Splits a single list into multiple lists where each has at most the given number of elements.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          },
          "size": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "input",
          "size"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:cidrhost": {
      "description": "Takes an IP address range in CIDR notation as input and creates an IP address with the given host number. \nIf given host number is negative, the count starts from the end of the range. \nFor example, cidrhost(\"10.0.0.0/8\", 2) returns 10.0.0.2 and cidrhost(\"10.0.0.0/8\", -2) returns 10.255.255.254.",
      "inputs": {
        "properties": {
          "host": {
            "type": "integer"
          },
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "host",
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:cidrnetmask": {
      "description": "Takes an IP address range in CIDR notation and returns the address-formatted subnet mask format \nthat some systems expect for IPv4 interfaces. \nFor example, cidrnetmask(\"10.0.0.0/8\") returns 255.0.0.0. \nNot applicable to IPv6 networks since CIDR notation is the only valid notation for IPv6.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:cidrsubnet": {
      "description": "Takes an IP address range in CIDR notation (like 10.0.0.0/8) and extends its prefix \nto include an additional subnet number. For example, cidrsubnet(\"10.0.0.0/8\", 8, 2) returns 10.2.0.0/16; \ncidrsubnet(\"2607:f298:6051:516c::/64\", 8, 2) returns 2607:f298:6051:516c:200::/72.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          },
          "netnum": {
            "type": "integer"
          },
          "newbits": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "input",
          "netnum",
          "newbits"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:coalesce": {
      "description": "Returns the first non-empty value from the given arguments.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:coalescelist": {
      "description": "Returns the first non-empty list from the given list of lists.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "pulumi.json#/Any"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:compact": {
      "description": "Removes empty string elements from a list.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:concat": {
      "description": "Combines two or more lists into a single list.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "pulumi.json#/Any"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:contains": {
      "description": "Returns true if a list contains the given element and returns false otherwise.",
      "inputs": {
        "properties": {
          "element": {
            "$ref": "pulumi.json#/Any"
          },
          "input": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "element",
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:dirname": {
      "description": "Returns all but the last element of path, typically the path's directory.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:distinct": {
      "description": "Removes duplicate items from a list.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:element": {
      "description": "Returns the element at the specified index.",
      "inputs": {
        "properties": {
          "index": {
            "type": "integer"
          },
          "input": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "index",
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:endswith": {
      "description": "Determines if the input string ends with the suffix.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input",
          "suffix"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:file": {
      "description": "Reads the contents of a file into the string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:flatten": {
      "description": "Flattens lists of lists down to a flat list of primitive values, \neliminating any nested lists recursively.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:floor": {
      "description": "Returns the greatest integer value less than or equal to the argument.",
      "inputs": {
        "properties": {
          "input": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:format": {
      "description": "Formats a string according to the given format. The syntax for the format is standard sprintf syntax.",
      "inputs": {
        "properties": {
          "args": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          },
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "args",
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:indent": {
      "description": "Adds a given number of spaces after each newline character in the given string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          },
          "spaces": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "input",
          "spaces"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:index": {
      "description": "Finds the index of a given element in a list.",
      "inputs": {
        "properties": {
          "element": {
            "$ref": "pulumi.json#/Any"
          },
          "input": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "element",
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:join": {
      "description": "Joins the list with the delimiter for a resultant string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "separator": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input",
          "separator"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:jsonencode": {
      "description": "Returns a JSON-encoded representation of the given value, \nwhich can contain arbitrarily-nested lists and maps. \nNote that if the value is a string then its value will be placed in quotes.",
      "inputs": {
        "properties": {
          "input": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:keys": {
      "description": "Returns a lexically sorted list of the map keys.",
      "inputs": {
        "properties": {
          "input": {
            "type": "object",
            "additionalProperties": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:length": {
      "description": "Returns a JSON-encoded representation of the given value, which can contain arbitrarily-nested lists and maps. Note that if the value is a string then its value will be placed in quotes.",
      "inputs": {
        "properties": {
          "input": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:log": {
      "description": "Returns the greatest integer value less than or equal to the argument.",
      "inputs": {
        "properties": {
          "base": {
            "type": "number"
          },
          "input": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "base",
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:lookup": {
      "description": "Performs a dynamic lookup into a map variable.",
      "inputs": {
        "properties": {
          "default": {
            "$ref": "pulumi.json#/Any"
          },
          "key": {
            "type": "string"
          },
          "map": {
            "type": "object",
            "additionalProperties": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "key",
          "map"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "$ref": "pulumi.json#/Any"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:lower": {
      "description": "Returns a copy of the string with all Unicode letters mapped to their lower case.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:map": {
      "description": "Returns a map consisting of the key/value pairs specified as arguments.",
      "inputs": {
        "properties": {
          "args": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "args"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:matchkeys": {
      "description": "For two lists values and keys of equal length, \nreturns all elements from values where the corresponding element from keys exists in the searchset list.",
      "inputs": {
        "properties": {
          "searchList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "searchList",
          "values"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:max": {
      "description": "Returns the largest of the floats.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:md5": {
      "description": "Returns a (conventional) hexadecimal representation of the MD5 hash of the given string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:merge": {
      "description": "Returns the union of 2 or more maps. The maps are consumed in the order provided, \nand duplicate keys overwrite previous entries.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "$ref": "pulumi.json#/Any"
              }
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:min": {
      "description": "Returns the smallest of the floats.",
      "inputs": {
        "properties": {
          "input": {
            "type": "array",
            "items": {
              "type": "number"
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:parseint": {
      "description": "Parses the given string as a representation of an integer in the specified base \nand returns the resulting number. The base must be between 2 and 62 inclusive.\n\t.",
      "inputs": {
        "properties": {
          "base": {
            "type": "integer"
          },
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:pathexpand": {
      "description": "Returns a filepath string with ~ expanded to the home directory.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:pow": {
      "description": "Returns the base input raised to the power of the exponent.",
      "inputs": {
        "properties": {
          "base": {
            "type": "number"
          },
          "exponent": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "base",
          "exponent"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:rsadecrypt": {
      "description": "Decrypts an RSA-encrypted ciphertext. \nThe cipher text must be base64-encoded and the key must be in PEM format.",
      "inputs": {
        "properties": {
          "cipherText": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "cipherText",
          "key"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:sha1": {
      "description": "Returns a hexadecimal representation of the SHA-1 hash of the given string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:sha256": {
      "description": "Returns a hexadecimal representation of the SHA-256 hash of the given string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:sha512": {
      "description": "Returns a hexadecimal representation of the SHA-512 hash of the given string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:signum": {
      "description": "Returns the greatest integer value less than or equal to the argument.",
      "inputs": {
        "properties": {
          "input": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "number"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:slice": {
      "description": "Returns the portion of list between from (inclusive) and to (exclusive).",
      "inputs": {
        "properties": {
          "from": {
            "type": "integer"
          },
          "list": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          },
          "to": {
            "type": "integer"
          }
        },
        "type": "object",
        "required": [
          "list"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:startswith": {
      "description": "Determines if the input string starts with the suffix.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          }
        },
        "type": "object",
        "required": [
          "input",
          "prefix"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    },
    "std:index:trim": {
      "description": "Removes the specified set of characters from the start and end of the given string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          },
          "cutset": {
            "type": "string"
          }
        },
        "required": [
          "input",
          "cutset"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "required": [
          "result"
        ]
      }
    },
    "std:index:trimprefix": {
      "description": "Removes the specified prefix from the start of the given string, if present.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          }
        },
        "required": [
          "input",
          "prefix"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "required": [
          "result"
        ]
      }
    },
    "std:index:trimsuffix": {
      "description": "Removes the specified suffix from the end of the given string, if present.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          }
        },
        "required": [
          "input",
          "suffix"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "required": [
          "result"
        ]
      }
    },
    "std:index:trimspace": {
      "description": "Removes any space characters from the start and end of the given string,\nfollowing the Unicode definition of \"space\" (i.e. spaces, tabs, newline, etc.).",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "required": [
          "result"
        ]
      }
    },
    "std:index:urlencode": {
      "description": "Applies URL encode to a given string.",
      "inputs": {
        "properties": {
          "input": {
            "type": "string"
          }
        },
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "string"
          }
        },
        "required": [
          "result"
        ]
      }
    },
    "std:index:values": {
      "description": "Returns a list of the values of the map.",
      "inputs": {
        "properties": {
          "input": {
            "type": "object",
            "additionalProperties": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "input"
        ]
      },
      "outputs": {
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "pulumi.json#/Any"
            }
          }
        },
        "type": "object",
        "required": [
          "result"
        ]
      }
    }
  }
}
