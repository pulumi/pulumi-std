name: standard-library-tests
runtime: yaml

plugins:
  providers:
    - name: std
      path: ../bin

variables:
  abs-positive:
    fn::std:abs:
      input: 42.24
  abs-negative:
    fn::std:abs:
      input: -42.24
  base64encode:
    fn::std:base64encode:
      input: ABCDE
  base64decode:
    fn::std:base64decode:
      input: QUJDREU=
  basename: 
    fn::std:basename:
      input: path/to/pulumi
  base64gzip:
    fn::std:base64gzip:
      input: abc
  base64sha256:
    fn::std:base64sha256:
      input: abc
  base64sha512:
    fn::std:base64sha512:
      input: abc
  bcrypt:
    fn::std:bcrypt:
      input: abc
  costlyBcrypt:
    fn::std:bcrypt:
      input: abc
      cost: 15
  chunklist:
    fn::std:chunklist:
      input: [1,2,3,4,5]
      size: 2
  chunklistByOne:
    fn::std:chunklist:
      input: [1,2,3,4,5]
      size: 1
  cidrhost:
    fn::std:cidrhost:
      input: "10.0.0.0/8"
      host: 2
  cidrhostV2:
    fn::std:cidrhost:
      input: "10.0.0.0/8"
      host: -2
  cidrnetmask:
    fn::std:cidrnetmask:
      input: "10.0.0.0/8"
  cidrsubnet:
    fn::std:cidrsubnet:
      input: "10.0.0.0/8"
      newbits: 8
      netnum: 2
  coalesce:
    fn::std:coalesce:
      input: ["hello", "world"]
  coalescelist:
    fn::std:coalescelist:
      input: [[], [1]]
  compact:
    fn::std:compact:
      input: ["", "one", ""]
  concat:
    fn::std:concat:
      input: [[1,2], [3,4], [5]]
  containsWithIntegers:
    fn::std:contains:
      input: [1,2,3,4,5]
      element: 1
  containsWithStrings:
    fn::std:contains:
      input: [one, two, three]
      element: two
  containsWithLists:
    fn::std:contains:
      input: [[1], [2], [3]]
      element: [2]
  shouldNotContain:
    fn::std:contains:
      input: [1,2,3]
      element: 5
  dirname:
    fn::std:dirname:
      input: /path/to/directory/file.txt
  distinctWithIntegers:
    fn::std:distinct:
      input: [1,2,2,3,3,4,5]
  distinctWithStrings:
    fn::std:distinct:
      input: [one, two, two, two, three]
  element:
    fn::std:element:
      input: [10, 20, 30]
      index: 1
  elementOverflow:
    fn::std:element:
      input: [10, 20, 30]
      index: 3
  elementNegativeIndex:
    fn::std:element:
      input: [10, 20, 30]
      index: -1
  file:
    fn::std:file:
      input: ./message.txt
  flatten:
    fn::std:flatten:
      input: [[[1]], [[[2,3,4]]], [5]]
  flattenWithStrings:
    fn::std:flatten:
      input: [[[one]], [[[two, three, four]]], [five]]
  floor:
    fn::std:floor:
      input: 1.1
  format:
    fn::std:format:
      input: "hello-%s"
      args: [world]
  index:
    fn::std:index:
      input: [one, two, three]
      element: two
  join:
    fn::std:join:
      input: [one, two, three]
      separator: "-"
  jsonencode:
    fn::std:jsonencode:
      input:
        hello: world
  keys: 
    fn::std:keys:
      input:
        hello: world
        one: two
  log:
    fn::std:log:
      input: 8
      base: 2
  pathexpand:
    fn::std:pathexpand:
      input: ~/test
  md5:
    fn::std:md5:
      input: abc
  slice:
    fn::std:slice:
      list: [1,2,3]
      from: 0
      to: 3
  parseint:
    fn::std:parseint:
      input: "100"
  parseintWithBase:
    fn::std:parseint:
      input: "FF"
      base: 16
  reverse:
    fn::std:reverse:
      input: [nil, true, 1, "foo"]
  sort:
    fn::std:sort:
      input: ["apple", "Avocado", "pear", "Orange", "banana", "orange", "watermelon"]
  startswith:
    fn::std:startswith:
      input: hello
      prefix: he
  endswith:
    fn::std:endswith:
      input: hello
      suffix: llo
  urlencode:
    fn::std:urlencode:
      input: Hello World!
  trim:
    fn::std:trim:
      input: " Hello  World!$ "
      cutset: "a$ "
  trimprefix:
    fn::std:trimprefix:
      input: "foo bar"
      prefix: "foo"
  trimsuffix:
    fn::std:trimsuffix:
      input: "foo bar"
      prefix: "foo "
  trimspace:
    fn::std:trimspace:
      input: "  foobar\t\n "
  values:
    fn::std:values:
      input:
        one: 1
        two: 2

outputs:
  abs-positive: ${abs-positive.result}
  abs-negative: ${abs-negative.result}
  base64encode: ${base64encode.result}
  base64decode: ${base64decode.result}
  basename: ${basename.result}
  base64gzip: ${base64gzip.result}
  base64sha256: ${base64sha256.result}
  base64sha512: ${base64sha512.result}
  bcrypt: ${bcrypt.result}
  costlyBcrypt: ${costlyBcrypt.result}
  chunklist: ${chunklist.result}
  chunklistByOne: ${chunklistByOne.result}
  cidrhost: ${cidrhost.result}
  cidrhostV2: ${cidrhostV2.result}
  cidrnetmask: ${cidrnetmask.result}
  cidrsubnet: ${cidrsubnet.result}
  coalesce: ${coalesce.result}
  coalescelist: ${coalescelist.result}
  compact: ${compact.result}
  concat: ${concat.result}
  containsWithIntegers: ${containsWithIntegers.result}
  containsWithStrings: ${containsWithStrings.result}
  containsWithLists: ${containsWithLists.result}
  shouldNotContain: ${shouldNotContain.result}
  dirname: ${dirname.result}
  distinctWithIntegers: ${distinctWithIntegers.result}
  element: ${element.result}
  elementOverflow: ${elementOverflow.result}
  elementNegativeIndex: ${elementNegativeIndex.result}
  file: ${file.result}
  flatten: ${flatten.result}
  flattenWithStrings: ${flattenWithStrings.result}
  format: ${format.result}
  index: ${index.result}
  join: ${join.result}
  jsonencode: ${jsonencode.result}
  keys: ${keys.result}
  log: ${log.result}
  pathexpand: ${pathexpand.result}
  md5: ${md5.result}
  slice: ${slice.result}
  parseint: ${parseint.result}
  parseintWithBase: ${parseintWithBase.result}
  reverse: ${reverse.result}
  sort: ${sort.result}
  startswith: ${startswith.result}
  endswith: ${endswith.result}
  trim: ${trim.result}
  trimprefix: ${trimprefix.result}
  trimsuffix: ${trimsuffix.result}
  trimspace: ${trimspace.result}
  values: ${values.result}