name: standard-library-tests
runtime: yaml

plugins:
  providers:
    - name: std
      path: ../bin

variables:
  abs-positive:
    fn::std:abs:
      input: 42.24
  abs-negative:
    fn::std:abs:
      input: -42.24
  abspath:
    fn::std:abspath:
      input: myfile.txt
  base64encode:
    fn::std:base64encode:
      input: ABCDE
  base64decode:
    fn::std:base64decode:
      input: QUJDREU=
  basename:
    fn::std:basename:
      input: path/to/pulumi
  base64gzip:
    fn::std:base64gzip:
      input: abc
  base64sha256:
    fn::std:base64sha256:
      input: abc
  base64sha512:
    fn::std:base64sha512:
      input: abc
  bcrypt:
    fn::std:bcrypt:
      input: abc
  costlyBcrypt:
    fn::std:bcrypt:
      input: abc
      cost: 15
  chunklist:
    fn::std:chunklist:
      input: [1,2,3,4,5]
      size: 2
  chunklistByOne:
    fn::std:chunklist:
      input: [1,2,3,4,5]
      size: 1
  cidrhost:
    fn::std:cidrhost:
      input: "10.0.0.0/8"
      host: 2
  cidrhostV2:
    fn::std:cidrhost:
      input: "10.0.0.0/8"
      host: -2
  cidrnetmask:
    fn::std:cidrnetmask:
      input: "10.0.0.0/8"
  cidrsubnet:
    fn::std:cidrsubnet:
      input: "10.0.0.0/8"
      newbits: 8
      netnum: 2
  coalesce:
    fn::std:coalesce:
      input: ["hello", "world"]
  coalesceWithNil:
    fn::std:coalesce:
      input: [null, "hello", "world"]
  coalesceWithInts:
    fn::std:coalesce:
      input: [1,2,3]
  coalesceWithIntsAndFloats:
    fn::std:coalesce:
      input: [1,2.0,null,3,null]
  coalesceWithFloatsAndStrings:
    fn::std:coalesce:
      input: [null, 1.0, "hello"]
  coalesceWithIntsAndStrings:
    fn::std:coalesce:
      input: [null, 1, "hello"]
  coalesceWithBoolsAndStrings:
    fn::std:coalesce:
      input: [true, null, "hello"]
  coalescelistWithNonEmptyFirst:
    fn::std:coalescelist:
      input: [[1], [], [2]]
  coalescelistWithNonEmptySecond:
    fn::std:coalescelist:
      input: [[], [1], [2]]
  compact:
    fn::std:compact:
      input: ["", "one", "", null]
  compactMixed:
    fn::std:compact:
      input: ["", "one", "", null, "two"]
  compactMixedEmpty:
    fn::std:compact:
      input: ["", "", null]
  compactNullsEmpty:
    fn::std:compact:
      input: [null, null]
  concat:
    fn::std:concat:
      input: [[1,2], [3,4], [5]]
  containsWithIntegers:
    fn::std:contains:
      input: [1,2,3,4,5]
      element: 1
  containsWithStrings:
    fn::std:contains:
      input: [one, two, three]
      element: two
  containsWithLists:
    fn::std:contains:
      input: [[1], [2], [3]]
      element: [2]
  csvdecode:
    fn::std:csvdecode:
      input: "a,b,c\n 1,2, 3\n 4, 5,6"
  shouldNotContain:
    fn::std:contains:
      input: [1,2,3]
      element: 5
  dirname:
    fn::std:dirname:
      input: /path/to/directory/file.txt
  distinctWithIntegers:
    fn::std:distinct:
      input: [1,2,2,3,3,4,5]
  distinctWithStrings:
    fn::std:distinct:
      input: [one, two, two, two, three]
  element:
    fn::std:element:
      input: [10, 20, 30]
      index: 1
  elementOverflow:
    fn::std:element:
      input: [10, 20, 30]
      index: 3
  elementNegativeIndex:
    fn::std:element:
      input: [10, 20, 30]
      index: -1
  file:
    fn::std:file:
      input: ./message.txt
  fileExistsTrue:
    fn::std:fileexists:
      input: ./message.txt
  filemd5:
    fn::std:filemd5:
      input: ./message.txt
  filesha1:
    fn::std:filesha1:
      input: ./message.txt
  filesha256:
    fn::std:filesha256:
      input: ./message.txt
  filesha512:
    fn::std:filesha512:
      input: ./message.txt
  filebase64:
    fn::std:filebase64:
      input: ./message.txt
  filebase64sha256:
    fn::std:filebase64sha256:
      input: ./message.txt
  filebase64sha512:
    fn::std:filebase64sha512:
      input: ./message.txt
  flatten:
    fn::std:flatten:
      input: [[[1]], [[[2,3,4]]], [5]]
  flattenWithStrings:
    fn::std:flatten:
      input: [[[one]], [[[two, three, four]]], [five]]
  floor:
    fn::std:floor:
      input: 1.1
  formatPercent:
    fn::std:format:
      input: "hello-%%-%s"
      args: [world]
  formatValues:
    fn::std:format:
      input: "hello-%v-%v-%v-%v-%v"
      args: [42, hello, true, [1,2,3], {hello: world}]
  formatJSONs:
    fn::std:format:
      input: "hello-%#v-%#v-%#v-%#v-%#v"
      args: [42, hello, true, [1,2,3], {hello: world}]
  formatBooleans:
    fn::std:format:
      input: "hello-%t-%t"
      args: [true, false]
  formatIntegersBinary:
    fn::std:format:
      input: "hello-%b-%b"
      args: [42, 5]
  formatIntegersDecimal:
    fn::std:format:
      input: "hello-%d-%d"
      args: [42, 5]
  formatIntegersOctal:
    fn::std:format:
      input: "hello-%o-%o"
      args: [42, 5]
  formatIntegersHexLower:
    fn::std:format:
      input: "hello-%x-%x"
      args: [42, 13]
  formatIntegersHexUpper:
    fn::std:format:
      input: "hello-%X-%X"
      args: [42, 13]
  formatFloatsScientificLower:
    fn::std:format:
      input: "hello-%e-%e"
      args: [42000042.42, 13.13]
  formatFloatsScientificUpper:
    fn::std:format:
      input: "hello-%E-%E"
      args: [42000042.42, 13.13]
  formatFloatsDecimal:
    fn::std:format:
      input: "hello-%f-%f"
      args: [42000042.42, 13.13]
  formatFloatsGeneralLower:
    fn::std:format:
      input: "hello-%g-%g"
      args: [42000042.42, 13.13]
  formatFloatsGeneralUpper:
    fn::std:format:
      input: "hello-%G-%G"
      args: [42000042.42, 13.13]
  formatStrings:
    fn::std:format:
      input: "hello-%s-%s"
      args: [world, hello]
  formatQuotedStrings:
    fn::std:format:
      input: "hello-%q-%q"
      args: [world, hello]
  index:
    fn::std:index:
      input: [one, two, three]
      element: two
  join:
    fn::std:join:
      input: [one, two, three]
      separator: "-"
  jsonencode:
    fn::std:jsonencode:
      input:
        hello: world
  jsondecode:
    fn::std:jsondecode:
      input: '{"str": "hello", "num":6.13,"strs":["a","b"], "bool": true}'
  keys:
    fn::std:keys:
      input:
        hello: world
        one: two
  log:
    fn::std:log:
      input: 8
      base: 2
  pathexpand:
    fn::std:pathexpand:
      input: ~/test
  md5:
    fn::std:md5:
      input: abc
  slice:
    fn::std:slice:
      list: [1,2,3]
      from: 0
      to: 3
  parseint:
    fn::std:parseint:
      input: "100"
  parseintWithBase:
    fn::std:parseint:
      input: "FF"
      base: 16
  reverse:
    fn::std:reverse:
      input: [true, 1, "foo"]
  range:
    fn::std:range:
      limit: 3
  rangeStartLimit:
    fn::std:range:
      start: 1
      limit: 4
  rangeStartLimitStep:
    fn::std:range:
      start: 1
      limit: 8
      step: 2
  rangeStartLimitStepDecimal:
    fn::std:range:
      limit: 4
      start: 1
      step: 0.5
  rangeStartLimitDecline:
    fn::std:range:
      limit: 1
      start: 4
  rangeStartLimitStepDecline:
    fn::std:range:
      start: 10
      limit: 5
      step: -2
  sort:
    fn::std:sort:
      input: ["apple", "Avocado", "pear", "Orange", "banana", "orange", "watermelon"]
  startswith:
    fn::std:startswith:
      input: hello
      prefix: he
  endswith:
    fn::std:endswith:
      input: hello
      suffix: llo
  values:
    fn::std:values:
      input:
        one: 1
        two: 2
  split:
    fn::std:split:
      separator: ","
      text: "one,two,three"
  strrev:
    fn::std:strrev:
      input: hello
  substr:
    fn::std:substr:
      input: hello world
      offset: 0
      length: 5
  transpose:
    fn::std:transpose:
      input:
        a: ["1", "2"]
        b: ["2", "3"]
  title:
    fn::std:title:
      input: hello world
  timeadd:
    fn::std:timeadd:
      timestamp: "2017-11-22T00:00:00Z"
      duration: "20m"
  timecmp:
    fn::std:timecmp:
      timestampa: "2017-11-22T01:00:00Z"
      timestampb: "2017-11-22T00:00:00-01:00"
  toboolBool:
    fn::std:tobool:
      input: true
  toboolStr:
    fn::std:tobool:
      input: "false"
  tolist:
    fn::std:tolist:
      input: ["a", true, 3.14]
  toset:
    fn::std:toset:
      input: ["a", true, 3.14, "a", 3.14]
  tonumberInt:
    fn::std:tonumber:
      input: 3
  tonumberFloat:
    fn::std:tonumber:
      input: 3.14159
  tonumberStr:
    fn::std:tonumber:
      input: "10"
  tostringStr:
    fn::std:tostring:
      input: "hello world"
  tostringInt:
    fn::std:tostring:
      input: 8
  tostringFloat:
    fn::std:tostring:
      input: 1.234
  tostringBool:
    fn::std:tostring:
      input: true
  trim:
    fn::std:trim:
      input: " Hello  World!$ "
      cutset: "a$ "
  trimprefix:
    fn::std:trimprefix:
      input: "foo bar"
      prefix: "foo"
  trimsuffix:
    fn::std:trimsuffix:
      input: "foo bar"
      suffix: "bar"
  trimspace:
    fn::std:trimspace:
      input: "  foobar\t\n "
  urlencode:
    fn::std:urlencode:
      input: Hello World!
  upper:
    fn::std:upper:
      input: one
  alltrue:
    fn::std:alltrue:
      input: [true, "true", true]
  anytrue:
    fn::std:anytrue:
      input: [false, "true", false]
  sum:
    fn::std:sum:
      input: [1,2,3,4,5]
  zipmap:
    fn::std:zipmap:
      keys: [one,two,three]
      values: [1,2,3]

outputs:
  abs-positive: ${abs-positive.result}
  abs-negative: ${abs-negative.result}
  abspath: ${abspath.result}
  base64encode: ${base64encode.result}
  base64decode: ${base64decode.result}
  basename: ${basename.result}
  base64gzip: ${base64gzip.result}
  base64sha256: ${base64sha256.result}
  base64sha512: ${base64sha512.result}
  bcrypt: ${bcrypt.result}
  costlyBcrypt: ${costlyBcrypt.result}
  chunklist: ${chunklist.result}
  chunklistByOne: ${chunklistByOne.result}
  cidrhost: ${cidrhost.result}
  cidrhostV2: ${cidrhostV2.result}
  cidrnetmask: ${cidrnetmask.result}
  cidrsubnet: ${cidrsubnet.result}
  coalesce: ${coalesce.result}
  coalesceWithNil: ${coalesceWithNil.result}
  coalesceWithInts: ${coalesceWithInts.result}
  coalesceWithIntsAndFloats: ${coalesceWithIntsAndFloats.result}
  coalesceWithFloatsAndStrings: ${coalesceWithFloatsAndStrings.result}
  coalesceWithIntsAndStrings: ${coalesceWithIntsAndStrings.result}
  coalesceWithBoolsAndStrings: ${coalesceWithBoolsAndStrings.result}
  coalescelistWithNonEmptyFirst: ${coalescelistWithNonEmptyFirst.result}
  coalescelistWithNonEmptySecond: ${coalescelistWithNonEmptySecond.result}
  compact: ${compact.result}
  compactMixed: ${compactMixed.result}
  compactMixedEmpty: ${compactMixedEmpty.result}
  compactNullsEmpty: ${compactNullsEmpty.result}
  concat: ${concat.result}
  containsWithIntegers: ${containsWithIntegers.result}
  containsWithStrings: ${containsWithStrings.result}
  containsWithLists: ${containsWithLists.result}
  csvdecode: ${csvdecode.result}
  shouldNotContain: ${shouldNotContain.result}
  dirname: ${dirname.result}
  distinctWithIntegers: ${distinctWithIntegers.result}
  element: ${element.result}
  elementOverflow: ${elementOverflow.result}
  elementNegativeIndex: ${elementNegativeIndex.result}
  file: ${file.result}
  fileExistsTrue: ${fileExistsTrue.result}
  filemd5: ${filemd5.result}
  filesha1: ${filesha1.result}
  filesha256: ${filesha256.result}
  filesha512: ${filesha512.result}
  filebase64: ${filebase64.result}
  filebase64sha256: ${filebase64sha256.result}
  filebase64sha512: ${filebase64sha512.result}
  flatten: ${flatten.result}
  flattenWithStrings: ${flattenWithStrings.result}
  formatPercent: ${formatPercent.result}
  formatValues: ${formatValues.result}
  formatJSONs: ${formatJSONs.result}
  formatBooleans: ${formatBooleans.result}
  formatIntegersBinary: ${formatIntegersBinary.result}
  formatIntegersDecimal: ${formatIntegersDecimal.result}
  formatIntegersOctal: ${formatIntegersOctal.result}
  formatIntegersHexLower: ${formatIntegersHexLower.result}
  formatIntegersHexUpper: ${formatIntegersHexUpper.result}
  formatFloatsScientificLower: ${formatFloatsScientificLower.result}
  formatFloatsScientificUpper: ${formatFloatsScientificUpper.result}
  formatFloatsDecimal: ${formatFloatsDecimal.result}
  formatFloatsGeneralLower: ${formatFloatsGeneralLower.result}
  formatFloatsGeneralUpper: ${formatFloatsGeneralUpper.result}
  formatStrings: ${formatStrings.result}
  formatQuotedStrings: ${formatQuotedStrings.result}
  index: ${index.result}
  join: ${join.result}
  jsonencode: ${jsonencode.result}
  jsondecode: ${jsondecode.result}
  keys: ${keys.result}
  log: ${log.result}
  pathexpand: ${pathexpand.result}
  md5: ${md5.result}
  slice: ${slice.result}
  parseint: ${parseint.result}
  parseintWithBase: ${parseintWithBase.result}
  reverse: ${reverse.result}
  range: ${range.result}
  rangeStartLimit: ${rangeStartLimit.result}
  rangeStartLimitStep: ${rangeStartLimitStep.result}
  rangeStartLimitStepDecimal: ${rangeStartLimitStepDecimal.result}
  rangeStartLimitDecline: ${rangeStartLimitDecline.result}
  rangeStartLimitStepDecline: ${rangeStartLimitStepDecline.result}
  sort: ${sort.result}
  startswith: ${startswith.result}
  endswith: ${endswith.result}
  values: ${values.result}
  split: ${split.result}
  strrev: ${strrev.result}
  substr: ${substr.result}
  toboolBool: ${toboolBool.result}
  toboolStr: ${toboolStr.result}
  tolist: ${tolist.result}
  toset: ${toset.result}
  tonumberInt: ${tonumberInt.result}
  tonumberFloat: ${tonumberFloat.result}
  tonumberStr: ${tonumberStr.result}
  tostringStr: ${tostringStr.result}
  tostringInt: ${tostringInt.result}
  tostringFloat: ${tostringFloat.result}
  tostringBool: ${tostringBool.result}
  transpose: ${transpose.result}
  title: ${title.result}
  timeadd: ${timeadd.result}
  timecmp: ${timecmp.result}
  trim: ${trim.result}
  trimprefix: ${trimprefix.result}
  trimsuffix: ${trimsuffix.result}
  trimspace: ${trimspace.result}
  upper: ${upper.result}
  urlencode: ${urlencode.result}
  alltrue: ${alltrue.result}
  anytrue: ${anytrue.result}
  sum: ${sum.result}
  zipmap: ${zipmap.result}
